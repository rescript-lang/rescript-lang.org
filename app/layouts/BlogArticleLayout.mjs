// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Blog from "../../src/Blog.mjs";
import * as Icon from "../../src/components/Icon.mjs";
import * as Meta from "../../src/components/Meta.mjs";
import * as Util from "../../src/common/Util.mjs";
import * as Path from "path";
import * as BlogApi from "../../src/common/BlogApi.mjs";
import * as DateStr from "../../src/common/DateStr.mjs";
import * as Markdown from "../../src/components/Markdown.mjs";
import * as MdxRemote from "../../src/bindings/MdxRemote.mjs";
import Link from "next/link";
import * as MainLayout from "../../src/layouts/MainLayout.mjs";
import * as Stdlib_Option from "rescript/lib/es6/Stdlib_Option.js";
import * as BlogFrontmatter from "../../src/common/BlogFrontmatter.mjs";
import * as NextMdxRemote from "next-mdx-remote";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as JsxRuntime from "react/jsx-runtime";
import * as MarkdownComponents from "../../src/components/MarkdownComponents.mjs";
import * as Serialize from "next-mdx-remote/serialize";

let middleDotSpacer = " " + (String.fromCharCode(183) + " ");

let Params = {};

function BlogArticleLayout$Line(props) {
  return JsxRuntime.jsx("div", {
    className: "block border-t border-gray-20"
  });
}

let Line = {
  make: BlogArticleLayout$Line
};

function BlogArticleLayout$AuthorBox(props) {
  let author = props.author;
  let authorImg = JsxRuntime.jsx("img", {
    className: "h-full w-full rounded-full",
    src: author.imgUrl
  });
  let handle = author.social;
  let tmp;
  tmp = handle.TAG === "X" ? "https://x.com/" + handle._0 : "https://bsky.app/profile/" + handle._0;
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsx("div", {
        children: authorImg,
        className: "w-10 h-10 bg-berry-40 block rounded-full mr-3"
      }),
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsx("a", {
            children: author.fullname,
            className: "hover:text-gray-80",
            href: tmp,
            rel: "noopener noreferrer"
          }),
          JsxRuntime.jsx("div", {
            children: author.role,
            className: "text-gray-60"
          })
        ],
        className: "body-sm"
      })
    ],
    className: "flex items-center"
  });
}

let AuthorBox = {
  make: BlogArticleLayout$AuthorBox
};

function BlogArticleLayout$BlogHeader(props) {
  let articleImg = props.articleImg;
  let category = props.category;
  let date = DateStr.toDate(props.date);
  let authors = [props.author].concat(props.co_authors);
  return JsxRuntime.jsxs("div", {
    children: [
      JsxRuntime.jsxs("div", {
        children: [
          JsxRuntime.jsxs("div", {
            children: [
              category !== undefined ? JsxRuntime.jsxs(JsxRuntime.Fragment, {
                  children: [
                    category,
                    middleDotSpacer
                  ]
                }) : null,
              Util.$$Date.toDayMonthYear(date)
            ],
            className: "text-gray-60 body-sm mb-5"
          }),
          JsxRuntime.jsx("h1", {
            children: props.title,
            className: "hl-title"
          }),
          Stdlib_Option.mapOr(props.description, null, desc => {
            if (desc === "") {
              return JsxRuntime.jsx("div", {
                className: "mb-8"
              });
            } else {
              return JsxRuntime.jsx("div", {
                children: JsxRuntime.jsx("p", {
                  children: desc,
                  className: "body-lg"
                }),
                className: "text-gray-80 mt-1 mb-8"
              });
            }
          }),
          JsxRuntime.jsx("div", {
            children: authors.map(author => JsxRuntime.jsx("div", {
              children: JsxRuntime.jsx(BlogArticleLayout$AuthorBox, {
                author: author
              }),
              className: "mt-4 md:mt-0 md:ml-8 first:ml-0 min-w-[8.1875rem]"
            }, author.username)),
            className: "flex flex-col md:flex-row mb-12"
          })
        ],
        className: "w-full max-w-740"
      }),
      articleImg !== undefined ? JsxRuntime.jsx("div", {
          children: JsxRuntime.jsx("img", {
            className: "h-full w-full object-cover max-h-[33.625rem]",
            src: articleImg
          }),
          className: "-mx-8 sm:mx-0 sm:w-full bg-gray-5-tr md:mt-24"
        }) : JsxRuntime.jsx("div", {
          children: JsxRuntime.jsx(BlogArticleLayout$Line, {}),
          className: "max-w-740 w-full"
        })
    ],
    className: "flex flex-col items-center"
  });
}

let BlogHeader = {
  make: BlogArticleLayout$BlogHeader
};

function $$default(props) {
  let mdxSource = props.mdxSource;
  let children = JsxRuntime.jsx(NextMdxRemote.MDXRemote, {
    frontmatter: mdxSource.frontmatter,
    compiledSource: mdxSource.compiledSource,
    scope: mdxSource.scope,
    components: MarkdownComponents.default
  });
  let fm = BlogFrontmatter.decode(mdxSource.frontmatter);
  let archivedNote = props.isArchived ? JsxRuntime.jsx("div", {
      children: JsxRuntime.jsx(Markdown.Warn.make, {
        children: JsxRuntime.jsxs(Markdown.P.make, {
          children: [
            JsxRuntime.jsx("span", {
              children: "Important: ",
              className: "font-bold"
            }),
            "This is an archived blog post, kept for historical reasons. Please note that this information might be outdated."
          ]
        })
      }),
      className: "mb-10"
    }) : null;
  let content;
  if (fm.TAG === "Ok") {
    let match = fm._0;
    let description = match.description;
    let title = match.title;
    content = JsxRuntime.jsxs("div", {
      children: [
        JsxRuntime.jsx(Meta.make, {
          siteName: "ReScript Blog",
          description: description === null ? undefined : Primitive_option.some(description),
          title: title + " | ReScript Blog",
          ogImage: Stdlib_Option.getOr(Primitive_option.fromNull(match.previewImg), Blog.defaultPreviewImg)
        }),
        JsxRuntime.jsx("div", {
          children: JsxRuntime.jsx(BlogArticleLayout$BlogHeader, {
            date: match.date,
            author: match.author,
            co_authors: match.co_authors,
            title: title,
            description: description === null ? undefined : Primitive_option.some(description),
            articleImg: Primitive_option.fromNull(match.articleImg)
          }),
          className: "mb-10 md:mb-20"
        }),
        JsxRuntime.jsx("div", {
          children: JsxRuntime.jsxs("div", {
            children: [
              archivedNote,
              children,
              JsxRuntime.jsxs("div", {
                children: [
                  JsxRuntime.jsx(BlogArticleLayout$Line, {}),
                  JsxRuntime.jsxs("div", {
                    children: [
                      JsxRuntime.jsx("div", {
                        children: "Want to read more?",
                        className: "text-24 sm:text-32 text-center text-gray-80 font-medium"
                      }),
                      JsxRuntime.jsxs(Link, {
                        href: "/blog",
                        children: [
                          "Back to Overview",
                          JsxRuntime.jsx(Icon.ArrowRight.make, {
                            className: "ml-2 inline-block"
                          })
                        ],
                        className: "text-fire hover:text-fire-70"
                      })
                    ],
                    className: "pt-20 flex flex-col items-center"
                  })
                ],
                className: "mt-12"
              })
            ],
            className: "max-w-740 w-full"
          }),
          className: "flex justify-center"
        })
      ],
      className: "w-full"
    });
  } else {
    content = JsxRuntime.jsx("div", {
      children: JsxRuntime.jsxs(Markdown.Warn.make, {
        children: [
          JsxRuntime.jsx("h2", {
            children: "Could not parse file '_blogposts/" + (props.path + ".mdx'"),
            className: "font-bold text-gray-80 text-24 mb-2"
          }),
          JsxRuntime.jsx("p", {
            children: "The content of this blog post will be displayed as soon as all\n            required frontmatter data has been added."
          }),
          JsxRuntime.jsx("p", {
            children: "Errors:",
            className: "font-bold mt-4"
          }),
          fm._0
        ]
      })
    });
  }
  return JsxRuntime.jsx(MainLayout.make, {
    children: content
  });
}

async function getStaticProps(ctx) {
  let params = ctx.params;
  let match = BlogApi.getAllPosts().find(param => BlogApi.blogPathToSlug(param.path) === params.slug);
  let path = match !== undefined ? match.path : params.slug;
  let filePath = Path.resolve("_blogposts", path);
  let isArchived = path.startsWith("archive/");
  let source = Fs.readFileSync(filePath);
  let mdxSource = await Serialize.serialize(source, {
    parseFrontmatter: true,
    mdxOptions: MdxRemote.defaultMdxOptions
  });
  return {
    props: {
      mdxSource: mdxSource,
      isArchived: isArchived,
      path: path
    }
  };
}

async function getStaticPaths() {
  let paths = BlogApi.getAllPosts().map(postData => ({
    params: {
      slug: BlogApi.blogPathToSlug(postData.path)
    }
  }));
  return {
    paths: paths,
    fallback: false
  };
}

export {
  middleDotSpacer,
  Params,
  Line,
  AuthorBox,
  BlogHeader,
  $$default as default,
  getStaticProps,
  getStaticPaths,
}
/* middleDotSpacer Not a pure module */
