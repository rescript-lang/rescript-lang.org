// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "@rescript/runtime/lib/es6/Belt_Array.js";
import * as Promises from "node:fs/promises";
import * as Server from "react-router-mdx/server";
import * as Routes from "@react-router/dev/routes";

let rawFile = await Promises.readFile("./docs/api/stdlib.json", "utf-8");

let json = JSON.parse(rawFile);

let tmp;

tmp = typeof json === "object" && json !== null && !Array.isArray(json) ? Object.keys(json) : [];

let stdlibPaths = tmp.map(key => "docs/manual/api/" + key).filter(path => path !== "docs/manual/api/stdlib");

let stdlibRoutes = stdlibPaths.map(path => Routes.route(path, "./routes/ApiRoute.mjs", {
  id: path
}));

let $$default = Belt_Array.concatMany([
  [
    Routes.index("./routes/LandingPageRoute.mjs"),
    Routes.route("packages", "./routes/PackagesRoute.mjs"),
    Routes.route("try", "./routes/TryRoute.mjs"),
    Routes.route("community", "./routes/CommunityRoute.mjs"),
    Routes.route("community/overview", "./routes/CommunityRoute.mjs", {
      id: "overview"
    }),
    Routes.route("syntax-lookup", "./routes/SyntaxLookupRoute.mjs"),
    Routes.route("blog", "./routes/BlogRoute.mjs"),
    Routes.route("docs/manual/api/stdlib", "./routes/ApiRoute.mjs", {
      id: "api-stdlib"
    }),
    Routes.route("docs/manual/api/introduction", "./routes/ApiRoute.mjs", {
      id: "api-intro"
    }),
    Routes.route("docs/manual/api/belt", "./routes/ApiRoute.mjs", {
      id: "api-belt"
    }),
    Routes.route("docs/manual/api/dom", "./routes/ApiRoute.mjs", {
      id: "api-dom"
    })
  ],
  stdlibRoutes,
  Server.routes("./routes/MdxRoute.mjs")
]);

export {
  stdlibPaths,
  stdlibRoutes,
  $$default as default,
}
/* rawFile Not a pure module */
