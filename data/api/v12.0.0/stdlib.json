{
  "stdlib": {
    "id": "Stdlib",
    "name": "Stdlib",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.timeoutId",
        "kind": "type",
        "name": "timeoutId",
        "docstrings": [
          "An `id` representing a timeout started via `setTimeout`.\n\nSee [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) on MDN."
        ],
        "signature": "type timeoutId = Global.timeoutId"
      },
      {
        "id": "Stdlib.setTimeout",
        "kind": "value",
        "name": "setTimeout",
        "docstrings": [
          "`setTimeout(callback, durationInMilliseconds)` starts a timer that will execute `callback` after `durationInMilliseconds`.\n\nSee [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) on MDN.\n\n## Examples\n\n```rescript\n// Log to the console after 200 milliseconds.\nlet timeoutId = setTimeout(() => {\n  Console.log(\"This prints in 200 ms.\")\n}, 200)\n```"
        ],
        "signature": "let setTimeout: (unit => unit, int) => timeoutId"
      },
      {
        "id": "Stdlib.setTimeoutFloat",
        "kind": "value",
        "name": "setTimeoutFloat",
        "docstrings": [
          "`setTimeoutFloat(callback, durationInMilliseconds)` starts a timer that will execute `callback` after `durationInMilliseconds`.\n\nThe same as `setTimeout`, but allows you to pass a `float` instead of an `int` for the duration.\n\nSee [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/setTimeout) on MDN.\n\n## Examples\n\n```rescript\n// Log to the console after 200 milliseconds.\nlet timeoutId = setTimeoutFloat(() => {\n  Console.log(\"This prints in 200 ms.\")\n}, 200.)\n```"
        ],
        "signature": "let setTimeoutFloat: (unit => unit, float) => timeoutId"
      },
      {
        "id": "Stdlib.clearTimeout",
        "kind": "value",
        "name": "clearTimeout",
        "docstrings": [
          "`clearTimeout(timeoutId)` clears a scheduled timeout if it hasn't already executed.\n\nSee [`clearTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout) on MDN.\n\n## Examples\n\n```rescript\nlet timeoutId = setTimeout(() => {\n  Console.log(\"This prints in 2 seconds.\")\n}, 2000)\n\n// Clearing the timeout right away, before 2 seconds has passed, means that the above callback logging to the console will never run.\nclearTimeout(timeoutId)\n```"
        ],
        "signature": "let clearTimeout: timeoutId => unit"
      },
      {
        "id": "Stdlib.intervalId",
        "kind": "type",
        "name": "intervalId",
        "docstrings": [
          "An `id` representing an interval started via `setInterval`.\n\nSee [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) on MDN."
        ],
        "signature": "type intervalId = Global.intervalId"
      },
      {
        "id": "Stdlib.setInterval",
        "kind": "value",
        "name": "setInterval",
        "docstrings": [
          "`setInterval(callback, intervalInMilliseconds)` starts an interval that will execute `callback` every `durationInMilliseconds` milliseconds.\n\nSee [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) on MDN.\n\n## Examples\n\n```rescript\n// Log to the console ever 200 ms (200 milliseconds).\nlet intervalId = setInterval(() => {\n  Console.log(\"This prints every 200 ms.\")\n}, 200)\n\nlet timeoutId = setTimeout(() => {\n  clearInterval(intervalId)\n}, 500)\n```"
        ],
        "signature": "let setInterval: (unit => unit, int) => intervalId"
      },
      {
        "id": "Stdlib.setIntervalFloat",
        "kind": "value",
        "name": "setIntervalFloat",
        "docstrings": [
          "`setIntervalFloat(callback, intervalInMilliseconds)` starts an interval that will execute `callback` every `durationInMilliseconds` milliseconds.\n\nThe same as `setInterval`, but allows you to pass a `float` instead of an `int` for the duration.\n\nSee [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) on MDN.\n\n## Examples\n\n```rescript\n// Log to the console ever 2 seconds (200 milliseconds).\nlet intervalId = setIntervalFloat(() => {\n  Console.log(\"This prints every 200 ms\")\n}, 200.)\n\n// Stop the interval after 500 ms\nlet timeoutId = setTimeoutFloat(() => {\n  clearInterval(intervalId)\n}, 500.0)\n```"
        ],
        "signature": "let setIntervalFloat: (unit => unit, float) => intervalId"
      },
      {
        "id": "Stdlib.clearInterval",
        "kind": "value",
        "name": "clearInterval",
        "docstrings": [
          "`clearInterval(intervalId)` clears a scheduled interval.\n\nSee [`clearInterval`](https://developer.mozilla.org/en-US/docs/Web/API/clearInterval) on MDN.\n\n## Examples\n\n```rescript\nlet intervalId = setInterval(() => {\n  Console.log(\"This prints in 100 ms\")\n}, 100)\n\n// Stop the interval after 500 ms\nlet timeoutId = setTimeout(() => {\n  clearInterval(intervalId)\n}, 500)\n```"
        ],
        "signature": "let clearInterval: intervalId => unit"
      },
      {
        "id": "Stdlib.encodeURI",
        "kind": "value",
        "name": "encodeURI",
        "docstrings": [
          "Encodes a URI by replacing characters in the provided string that aren't valid in a URL.\n\nThis is intended to operate on full URIs, so it encodes fewer characters than what `encodeURIComponent` does.\nIf you're looking to encode just parts of a URI, like a query parameter, prefer `encodeURIComponent`.\n\nSee [`encodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI) on MDN.\n\n## Examples\n```rescript\nConsole.log(encodeURI(\"https://rescript-lang.org?array=[someValue]\"))\n// Logs \"https://rescript-lang.org?array=%5BsomeValue%5D\" to the console.\n```"
        ],
        "signature": "let encodeURI: string => string"
      },
      {
        "id": "Stdlib.decodeURI",
        "kind": "value",
        "name": "decodeURI",
        "docstrings": [
          "Decodes a previously encoded URI back to a regular string.\n\nThis is intended to operate on full URIs, so it decodes fewer characters than what `decodeURIComponent` does.\nIf you're looking to decode just parts of a URI, like a query parameter, prefer `decodeURIComponent`.\n\nSee [`decodeURI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI) on MDN.\n\n## Examples\n```rescript\nConsole.log(decodeURI(\"https://rescript-lang.org?array=%5BsomeValue%5D\"))\n// Logs \"https://rescript-lang.org?array=[someValue]\" to the console.\n```"
        ],
        "signature": "let decodeURI: string => string"
      },
      {
        "id": "Stdlib.encodeURIComponent",
        "kind": "value",
        "name": "encodeURIComponent",
        "docstrings": [
          "Encodes a string so it can be used as part of a URI.\n\nSee [`encodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent) on MDN.\n\n## Examples\n```rescript\nConsole.log(encodeURIComponent(\"array=[someValue]\"))\n// Logs \"array%3D%5BsomeValue%5D\" to the console.\n```"
        ],
        "signature": "let encodeURIComponent: string => string"
      },
      {
        "id": "Stdlib.decodeURIComponent",
        "kind": "value",
        "name": "decodeURIComponent",
        "docstrings": [
          "Decodes a previously URI encoded string back to its original form.\n\nSee [`decodeURIComponent`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent) on MDN.\n\n## Examples\n```rescript\nConsole.log(decodeURIComponent(\"array%3D%5BsomeValue%5D\"))\n// Logs \"array=[someValue]\" to the console.\n```"
        ],
        "signature": "let decodeURIComponent: string => string"
      },
      {
        "id": "Stdlib.date",
        "kind": "type",
        "name": "date",
        "docstrings": [],
        "signature": "type date = Date.t"
      },
      {
        "id": "Stdlib.null",
        "kind": "type",
        "name": "null",
        "docstrings": [],
        "signature": "type null<'a> = null<'a>"
      },
      {
        "id": "Stdlib.undefined",
        "kind": "type",
        "name": "undefined",
        "docstrings": [],
        "signature": "type undefined<'a> = undefined<'a>"
      },
      {
        "id": "Stdlib.nullable",
        "kind": "type",
        "name": "nullable",
        "docstrings": [],
        "signature": "type nullable<'a> = nullable<'a>"
      },
      {
        "id": "Stdlib.lazy_t",
        "kind": "type",
        "name": "lazy_t",
        "docstrings": [],
        "signature": "type lazy_t<'a> = Lazy.t<'a>",
        "deprecated": "Use Lazy.t instead"
      },
      {
        "id": "Stdlib.window",
        "kind": "value",
        "name": "window",
        "docstrings": [],
        "signature": "let window: Dom.window",
        "deprecated": "Use rescript-webapi instead"
      },
      {
        "id": "Stdlib.document",
        "kind": "value",
        "name": "document",
        "docstrings": [],
        "signature": "let document: Dom.document",
        "deprecated": "Use rescript-webapi instead"
      },
      {
        "id": "Stdlib.globalThis",
        "kind": "value",
        "name": "globalThis",
        "docstrings": [],
        "signature": "let globalThis: {..}"
      },
      {
        "id": "Stdlib.import",
        "kind": "value",
        "name": "import",
        "docstrings": [
          "`import(value)` dynamically import a value or function from a ReScript\nmodule. The import call will return a `promise`, resolving to the dynamically loaded\nvalue.\n\n## Examples\n\n`Array.res` file:\n\n```rescript\n@send external indexOf: (array<'a>, 'a) => int = \"indexOf\"\n\nlet indexOfOpt = (arr, item) =>\n  switch arr->indexOf(item) {\n  | -1 => None\n  | index => Some(index)\n  }\n```\nIn other file you can import the `indexOfOpt` value defined in `Array.res`\n\n```rescript\nlet main = async () => {\n  let indexOfOpt = await import(Array.indexOfOpt)\n  let index = indexOfOpt([1, 2], 2)\n  Console.log(index)\n}\n```\n\nCompiles to:\n\n```javascript\nasync function main() {\n  var add = await import(\"./Array.mjs\").then(function(m) {\n    return m.indexOfOpt;\n  });\n  var index = indexOfOpt([1, 2], 2);\n  console.log(index);\n}\n```"
        ],
        "signature": "let import: 'a => promise<'a>"
      },
      {
        "id": "Stdlib.panic",
        "kind": "value",
        "name": "panic",
        "docstrings": [],
        "signature": "let panic: string => 'a"
      },
      {
        "id": "Stdlib.assertEqual",
        "kind": "value",
        "name": "assertEqual",
        "docstrings": [
          "`assertEqual(a, b)` check if `a` is equal `b`. If not raise a panic exception\n\n## Examples\n\n```rescript\nlist{1, 2}->List.tailExn == list{2}\n```"
        ],
        "signature": "let assertEqual: ('a, 'a) => unit"
      },
      {
        "id": "Stdlib.null",
        "kind": "value",
        "name": "null",
        "docstrings": [],
        "signature": "let null: nullable<'a>"
      },
      {
        "id": "Stdlib.undefined",
        "kind": "value",
        "name": "undefined",
        "docstrings": [],
        "signature": "let undefined: nullable<'a>"
      },
      {
        "id": "Stdlib.typeof",
        "kind": "value",
        "name": "typeof",
        "docstrings": [],
        "signature": "let typeof: 'a => Type.t"
      }
    ]
  },
  "stdlib/intl/numberformat/grouping": {
    "id": "Stdlib.Intl.NumberFormat.Grouping",
    "name": "Grouping",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.parsed",
        "kind": "type",
        "name": "parsed",
        "docstrings": [],
        "signature": "type parsed = [#always | #auto | #bool(bool) | #min2]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.fromBool",
        "kind": "value",
        "name": "fromBool",
        "docstrings": [],
        "signature": "let fromBool: bool => t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [],
        "signature": "let fromString: [#always | #auto | #min2] => t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.parseJsValue",
        "kind": "value",
        "name": "parseJsValue",
        "docstrings": [],
        "signature": "let parseJsValue: 'a => option<[> #always | #auto | #bool(bool) | #min2]>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.Grouping.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(grouping)` ignores the provided grouping and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/biguint64array/constants": {
    "id": "Stdlib.BigUint64Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.BigUint64Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/bigint64array/constants": {
    "id": "Stdlib.BigInt64Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.BigInt64Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/uint8clampedarray/constants": {
    "id": "Stdlib.Uint8ClampedArray.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint8ClampedArray.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/uint32array/constants": {
    "id": "Stdlib.Uint32Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint32Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/uint16array/constants": {
    "id": "Stdlib.Uint16Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint16Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/uint8array/constants": {
    "id": "Stdlib.Uint8Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint8Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/int32array/constants": {
    "id": "Stdlib.Int32Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int32Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/int16array/constants": {
    "id": "Stdlib.Int16Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int16Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/int8array/constants": {
    "id": "Stdlib.Int8Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int8Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/float64array/constants": {
    "id": "Stdlib.Float64Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Float64Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/float32array/constants": {
    "id": "Stdlib.Float32Array.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Float32Array.Constants.bytesPerElement",
        "kind": "value",
        "name": "bytesPerElement",
        "docstrings": [
          "`bytesPerElement` returns the element size. See [BYTES_PER_ELEMENT on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT)"
        ],
        "signature": "let bytesPerElement: int"
      }
    ]
  },
  "stdlib/type/classify": {
    "id": "Stdlib.Type.Classify",
    "name": "Classify",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Type.Classify.function",
        "kind": "type",
        "name": "function",
        "docstrings": [
          "An abstract type representing a JavaScript function.\n\n  See [`function`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function) on MDN."
        ],
        "signature": "type function"
      },
      {
        "id": "Stdlib.Type.Classify.object",
        "kind": "type",
        "name": "object",
        "docstrings": [
          "An abstract type representing a JavaScript object.\n\n  See [`object`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) on MDN."
        ],
        "signature": "type object"
      },
      {
        "id": "Stdlib.Type.Classify.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["The type representing a classified JavaScript value."],
        "signature": "type t =\n  | Bool(bool)\n  | Null\n  | Undefined\n  | String(string)\n  | Number(float)\n  | Object(object)\n  | Function(function)\n  | Symbol(Symbol.t)\n  | BigInt(bigint)"
      },
      {
        "id": "Stdlib.Type.Classify.classify",
        "kind": "value",
        "name": "classify",
        "docstrings": [
          "`classify(anyValue)`\nClassifies a JavaScript value.\n\n## Examples\n```rescript\nswitch %raw(`null`)->Type.Classify.classify {\n| Null => Console.log(\"Yup, that's null.\")\n| _ => Console.log(\"This doesn't actually appear to be null...\")\n}\n```"
        ],
        "signature": "let classify: 'a => t"
      }
    ]
  },
  "stdlib/regexp/result": {
    "id": "Stdlib.RegExp.Result",
    "name": "Result",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.RegExp.Result.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing the result of a `RegExp` execution."],
        "signature": "type t = array<option<string>>"
      },
      {
        "id": "Stdlib.RegExp.Result.fullMatch",
        "kind": "value",
        "name": "fullMatch",
        "docstrings": [
          "`fullMatch(regExpResult)` returns the full string that matched in this result.\n\n  ## Examples\n  ```rescript\n  // Match the first two words separated by a space\n  let regexp = RegExp.fromString(\"(\\\\w+) (\\\\w+)\")\n  \n  switch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n  | None => Console.log(\"Nope, no match...\")\n  | Some(result) => Console.log(result->RegExp.Result.fullMatch) // Prints the full string that matched, \"ReScript is\"\n  }\n  ```"
        ],
        "signature": "let fullMatch: t => string"
      },
      {
        "id": "Stdlib.RegExp.Result.matches",
        "kind": "value",
        "name": "matches",
        "docstrings": [
          "`matches(regExpResult)` returns all matches for `regExpResult`.\n\n  ## Examples\n  ```rescript\n  // Match the first two words separated by a space\n  let regexp = RegExp.fromString(\"(\\\\w+) (\\\\w+)\")\n  \n  // This below will log \"ReScript\" and \"is\" to the console.\n  switch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n  | None => Console.log(\"Nope, no match...\")\n  | Some(result) =>\n    switch result->RegExp.Result.matches->Array.keepSome {\n    | [firstWord, secondWord] => Console.log2(firstWord, secondWord)\n    | _ => Console.log(\"Didn't find exactly two words...\")\n    }\n  }\n  ```"
        ],
        "signature": "let matches: t => array<option<string>>"
      },
      {
        "id": "Stdlib.RegExp.Result.index",
        "kind": "value",
        "name": "index",
        "docstrings": [],
        "signature": "let index: t => int"
      },
      {
        "id": "Stdlib.RegExp.Result.input",
        "kind": "value",
        "name": "input",
        "docstrings": [
          "`input(regExpResult)` returns the full input string that was passed to what produced the `RegExp.Result.t`.\n\n  ## Examples\n  ```rescript\n  // Match the first two words separated by a space\n  let regexp = RegExp.fromString(\"(\\\\w+) (\\\\w+)\")\n  \n  // This below will log the full input string \"ReScript is pretty cool, right?\" to the console.\n  switch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n  | None => Console.log(\"Nope, no match...\")\n  | Some(result) => Console.log(result->RegExp.Result.input)\n  }\n  ```"
        ],
        "signature": "let input: t => string"
      }
    ]
  },
  "stdlib/math/int": {
    "id": "Stdlib.Math.Int",
    "name": "Int",
    "docstrings": ["Provide Math utilities for `int`"],
    "items": [
      {
        "id": "Stdlib.Math.Int.abs",
        "kind": "value",
        "name": "abs",
        "docstrings": [
          "`abs(v)` returns absolute value of `v`.\nSee [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.abs(-2) == 2\n  Math.Int.abs(3) == 3\n  ```"
        ],
        "signature": "let abs: int => int"
      },
      {
        "id": "Stdlib.Math.Int.clz32",
        "kind": "value",
        "name": "clz32",
        "docstrings": [
          "`clz32(v)` returns the number of leading zero bits of the argument's 32 bit\nint representation.\nSee [`Math.clz32`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32) on MDN.\n\n  ## Examples\n\n  ```rescript\n  // 00000000000000000000000000000001\n  Math.Int.clz32(1) == 31\n  // 00000000000000000000000000000100\n  Math.Int.clz32(4) == 29\n  ```"
        ],
        "signature": "let clz32: int => int"
      },
      {
        "id": "Stdlib.Math.Int.imul",
        "kind": "value",
        "name": "imul",
        "docstrings": [
          "`imul(a, b)` returns 32-bit integer multiplication. Use this only when you\nneed to optimize performance of multiplication of numbers stored as 32-bit\nintegers.\nSee [`Math.imul`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.imul(3, 4) == 12\n  Math.Int.imul(-5, 12) == -60\n  ```"
        ],
        "signature": "let imul: (int, int) => int"
      },
      {
        "id": "Stdlib.Math.Int.min",
        "kind": "value",
        "name": "min",
        "docstrings": [
          "`min(a, b)` returns the minimum of its two integer arguments.\nSee [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.min(1, 2) == 1\n  Math.Int.min(-1, -2) == -2\n  ```"
        ],
        "signature": "let min: (int, int) => int"
      },
      {
        "id": "Stdlib.Math.Int.minMany",
        "kind": "value",
        "name": "minMany",
        "docstrings": [
          "`minMany(arr)` returns the minimum of the integers in the given array `arr`.\nReturns `Infinity` if `arr` is empty.\nSee [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.minMany([1, 2]) == 1\n  Math.Int.minMany([-1, -2]) == -2\n  Math.Int.minMany([])->Int.toFloat->Float.isFinite == false\n  ```"
        ],
        "signature": "let minMany: array<int> => int"
      },
      {
        "id": "Stdlib.Math.Int.max",
        "kind": "value",
        "name": "max",
        "docstrings": [
          "`max(a, b)` returns the maximum of its two integer arguments.\nSee [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.max(1, 2) == 2\n  Math.Int.max(-1, -2) == -1\n  ```"
        ],
        "signature": "let max: (int, int) => int"
      },
      {
        "id": "Stdlib.Math.Int.maxMany",
        "kind": "value",
        "name": "maxMany",
        "docstrings": [
          "`maxMany(arr)` returns the maximum of the integers in the given array `arr`.\nReturns `Infinity` if `arr` is empty.\nSee [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.maxMany([1, 2]) == 2\n  Math.Int.maxMany([-1, -2]) == -1\n  Math.Int.maxMany([])->Int.toFloat->Float.isFinite == false\n  ```"
        ],
        "signature": "let maxMany: array<int> => int"
      },
      {
        "id": "Stdlib.Math.Int.pow",
        "kind": "value",
        "name": "pow",
        "docstrings": [
          "`pow(a, ~exp)` raises the given base `a` to the given exponent `exp`.\nSee [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.pow(2, ~exp=4) == 16\n  Math.Int.pow(3, ~exp=4) == 81\n  ```"
        ],
        "signature": "let pow: (int, ~exp: int) => int"
      },
      {
        "id": "Stdlib.Math.Int.sign",
        "kind": "value",
        "name": "sign",
        "docstrings": [
          "`sign(v)` returns the sign of its integer argument: `-1` if negative, `0` if\nzero, `1` if positive.\nSee [`Math.sign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.sign(3) == 1\n  Math.Int.sign(-3) == -1\n  Math.Int.sign(0) == 0\n  ```"
        ],
        "signature": "let sign: int => int"
      },
      {
        "id": "Stdlib.Math.Int.floor",
        "kind": "value",
        "name": "floor",
        "docstrings": [
          "floor(v) returns the largest `int` less than or equal to the argument;\nSee [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\non MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.floor(3.7) == 3\n  Math.Int.floor(3.0) == 3\n  Math.Int.floor(-3.1) == -4\n  ```"
        ],
        "signature": "let floor: float => int"
      },
      {
        "id": "Stdlib.Math.Int.ceil",
        "kind": "value",
        "name": "ceil",
        "docstrings": [
          "ceil(v) returns the smallest `int` greater than or equal to the argument;\nSee [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor)\non MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.ceil(3.7) == 4\n  Math.Int.ceil(3.0) == 3\n  Math.Int.ceil(-3.1) == -3\n  ```"
        ],
        "signature": "let ceil: float => int"
      },
      {
        "id": "Stdlib.Math.Int.random",
        "kind": "value",
        "name": "random",
        "docstrings": [
          "`random(minVal, maxVal)` returns a random integer number in the half-closed interval \\[minVal, maxVal).\nSee [`Math.random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random)\non MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Int.random(2, 5)\n  Math.Int.random(505, 2000)\n  Math.Int.random(-7, -2)\n  ```"
        ],
        "signature": "let random: (int, int) => int"
      }
    ]
  },
  "stdlib/math/constants": {
    "id": "Stdlib.Math.Constants",
    "name": "Constants",
    "docstrings": ["Mathematical Constants"],
    "items": [
      {
        "id": "Stdlib.Math.Constants.e",
        "kind": "value",
        "name": "e",
        "docstrings": [
          "`Math.Constants.e` returns Euler's number, ≈ 2.718281828459045.\nSee [`Math.E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.e\n  ```"
        ],
        "signature": "let e: float"
      },
      {
        "id": "Stdlib.Math.Constants.ln2",
        "kind": "value",
        "name": "ln2",
        "docstrings": [
          "`Math.Constants.ln2` returns Natural logarithm of 2, ≈ 0.6931471805599453.\nSee [`Math.LN2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.ln2\n  ```"
        ],
        "signature": "let ln2: float"
      },
      {
        "id": "Stdlib.Math.Constants.ln10",
        "kind": "value",
        "name": "ln10",
        "docstrings": [
          "`Math.Constants.ln10` returns Natural logarithm of 10, ≈ 2.302585092994046.\nSee [`Math.LN10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.ln10\n  ```"
        ],
        "signature": "let ln10: float"
      },
      {
        "id": "Stdlib.Math.Constants.log2e",
        "kind": "value",
        "name": "log2e",
        "docstrings": [
          "`Math.Constants.log2e` returns Base 2 logarithm of E, ≈ 1.4426950408889634.\nSee [`Math.LOG2E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.log2e\n  ```"
        ],
        "signature": "let log2e: float"
      },
      {
        "id": "Stdlib.Math.Constants.log10e",
        "kind": "value",
        "name": "log10e",
        "docstrings": [
          "`Math.Constants.log10e` returns Base 10 logarithm of E, ≈ 0.4342944819032518.\nSee [`Math.LOG10E`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.log10e\n  ```"
        ],
        "signature": "let log10e: float"
      },
      {
        "id": "Stdlib.Math.Constants.pi",
        "kind": "value",
        "name": "pi",
        "docstrings": [
          "`Math.Constants.pi` returns Pi - ratio of the circumference to the diameter\nof a circle, ≈ 3.141592653589793.\nSee [`Math.PI`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.pi\n  ```"
        ],
        "signature": "let pi: float"
      },
      {
        "id": "Stdlib.Math.Constants.sqrt1_2",
        "kind": "value",
        "name": "sqrt1_2",
        "docstrings": [
          "`Math.Constants.sqrt1_2` returns Square root of 1/2, ≈ 0.7071067811865476.\nSee [`Math.SQRT1_2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.sqrt1_2\n  ```"
        ],
        "signature": "let sqrt1_2: float"
      },
      {
        "id": "Stdlib.Math.Constants.sqrt2",
        "kind": "value",
        "name": "sqrt2",
        "docstrings": [
          "`Math.Constants.e` returns Absolute value for integer argument.\nSee [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Math.Constants.sqrt2\n  ```"
        ],
        "signature": "let sqrt2: float"
      }
    ]
  },
  "stdlib/json/decode": {
    "id": "Stdlib.JSON.Decode",
    "name": "Decode",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JSON.Decode.bool",
        "kind": "value",
        "name": "bool",
        "docstrings": [
          "Decodes a single JSON value. If the value is a bool, it will return `Some(bool)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`true`)->JSON.Decode.bool\n  // Some(true)\n  \n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.bool\n  // None\n  ```"
        ],
        "signature": "let bool: t => option<bool>"
      },
      {
        "id": "Stdlib.JSON.Decode.null",
        "kind": "value",
        "name": "null",
        "docstrings": [
          "Decodes a single JSON value. If the value is null, it will return `Some(Null.t)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`null`)->JSON.Decode.null\n  // Some(null)\n  \n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.null\n  // None\n  ```"
        ],
        "signature": "let null: t => option<Null.t<'a>>"
      },
      {
        "id": "Stdlib.JSON.Decode.string",
        "kind": "value",
        "name": "string",
        "docstrings": [
          "Decodes a single JSON value. If the value is a string, it will return `Some(string)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.string\n  // Some(\"hello world\")\n  \n  JSON.parseOrThrow(`42`)->JSON.Decode.string\n  // None\n  ```"
        ],
        "signature": "let string: t => option<string>"
      },
      {
        "id": "Stdlib.JSON.Decode.float",
        "kind": "value",
        "name": "float",
        "docstrings": [
          "Decodes a single JSON value. If the value is a float, it will return `Some(float)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`42.0`)->JSON.Decode.float\n  // Some(42.0)\n  \n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.float\n  // None\n  ```"
        ],
        "signature": "let float: t => option<float>"
      },
      {
        "id": "Stdlib.JSON.Decode.object",
        "kind": "value",
        "name": "object",
        "docstrings": [
          "Decodes a single JSON value. If the value is an object, it will return `Some(dict)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`{\"foo\":\"bar\"}`)->JSON.Decode.object\n  // Some({ foo: 'bar' })\n  \n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.object\n  // None\n  ```"
        ],
        "signature": "let object: t => option<dict<t>>"
      },
      {
        "id": "Stdlib.JSON.Decode.array",
        "kind": "value",
        "name": "array",
        "docstrings": [
          "Decodes a single JSON value. If the value is an array, it will return `Some(array)` - otherwise it will return `None`.\n\n  ## Examples\n  ```rescript\n  JSON.parseOrThrow(`[\"foo\", \"bar\"]`)->JSON.Decode.array\n  // Some([ 'foo', 'bar' ])\n  \n  JSON.parseOrThrow(`\"hello world\"`)->JSON.Decode.array\n  // None\n  ```"
        ],
        "signature": "let array: t => option<array<t>>"
      }
    ]
  },
  "stdlib/json/encode": {
    "id": "Stdlib.JSON.Encode",
    "name": "Encode",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JSON.Encode.bool",
        "kind": "value",
        "name": "bool",
        "docstrings": [
          "Returns a boolean as a JSON object.\n\n  ## Examples\n  ```rescript\n  JSON.Encode.bool(true)\n  ```"
        ],
        "signature": "let bool: bool => t"
      },
      {
        "id": "Stdlib.JSON.Encode.null",
        "kind": "value",
        "name": "null",
        "docstrings": [
          "Returns null as a JSON object.\n\n  ## Examples\n  ```rescript\n  JSON.Encode.null\n  ```"
        ],
        "signature": "let null: t"
      },
      {
        "id": "Stdlib.JSON.Encode.string",
        "kind": "value",
        "name": "string",
        "docstrings": [
          "Returns a string as a JSON object.\n\n  ## Examples\n  ```rescript\n  JSON.Encode.string(\"hello world\")\n  ```"
        ],
        "signature": "let string: string => t"
      },
      {
        "id": "Stdlib.JSON.Encode.int",
        "kind": "value",
        "name": "int",
        "docstrings": [
          "Returns an int as a JSON object.\n\n  ## Examples\n  ```rescript\n  JSON.Encode.int(42)\n  ```"
        ],
        "signature": "let int: int => t"
      },
      {
        "id": "Stdlib.JSON.Encode.float",
        "kind": "value",
        "name": "float",
        "docstrings": [
          "Returns a float as a JSON object.\n\n  ## Examples\n  ```rescript\n  JSON.Encode.float(42.0)\n  ```"
        ],
        "signature": "let float: float => t"
      },
      {
        "id": "Stdlib.JSON.Encode.object",
        "kind": "value",
        "name": "object",
        "docstrings": [
          "Returns a dict as a JSON object.\n\n  ## Examples\n  ```rescript\n  let dict = Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n  ])\n  \n  JSON.Encode.object(dict)\n  ```"
        ],
        "signature": "let object: dict<t> => t"
      },
      {
        "id": "Stdlib.JSON.Encode.array",
        "kind": "value",
        "name": "array",
        "docstrings": [
          "Returns an array as a JSON object.\n\n  ## Examples\n  ```rescript\n  let array = [JSON.Encode.string(\"hello world\"), JSON.Encode.int(42)]\n  \n  JSON.Encode.array(array)\n  ```"
        ],
        "signature": "let array: array<t> => t"
      }
    ]
  },
  "stdlib/json/classify": {
    "id": "Stdlib.JSON.Classify",
    "name": "Classify",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JSON.Classify.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["A type representing a JavaScript type."],
        "signature": "type t =\n  | Bool(bool)\n  | Null\n  | String(string)\n  | Number(float)\n  | Object(dict<t>)\n  | Array(array<t>)"
      },
      {
        "id": "Stdlib.JSON.Classify.classify",
        "kind": "value",
        "name": "classify",
        "docstrings": [
          "Returns the JSON type of any value.\n\n  ## Examples\n  ```rescript\n  JSON.Classify.classify(\"hello world\")\n  // String(\"hello world\")\n  \n  JSON.Classify.classify(42)\n  // Number(42)\n  ```"
        ],
        "signature": "let classify: 'a => t",
        "deprecated": "Directly switch on the JSON object instead"
      }
    ]
  },
  "stdlib/jserror/urierror": {
    "id": "Stdlib.JsError.URIError",
    "name": "URIError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.URIError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `URIError` with the provided `message`.\n\n  See [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.URIError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `URIError` with the provided `message` and throws it.\n\n  `JsError.URIError.throwWithMessage(\"message\")` is equivalent to `JsError.URIError.make(\"message\")->JsError.throw`.\n\n  See [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/jserror/typeerror": {
    "id": "Stdlib.JsError.TypeError",
    "name": "TypeError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.TypeError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `TypeError` with the provided `message`.\n\n  See [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.TypeError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `TypeError` with the provided `message` and throws it.\n\n  `JsError.TypeError.throwWithMessage(\"message\")` is equivalent to `JsError.TypeError.make(\"message\")->JsError.throw`.\n\n  See [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/jserror/syntaxerror": {
    "id": "Stdlib.JsError.SyntaxError",
    "name": "SyntaxError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.SyntaxError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `SyntaxError` with the provided `message`.\n\n  See [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.SyntaxError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `SyntaxError` with the provided `message` and throws it.\n  \n  `JsError.SyntaxError.throwWithMessage(\"message\")` is equivalent to `JsError.SyntaxError.make(\"message\")->JsError.throw`.\n  \n  See [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/jserror/referenceerror": {
    "id": "Stdlib.JsError.ReferenceError",
    "name": "ReferenceError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.ReferenceError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `ReferenceError` with the provided `message`.\n\n  See [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.ReferenceError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `ReferenceError` with the provided `message` and throws it.\n\n  `JsError.ReferenceError.throwWithMessage(\"message\")` is equivalent to `JsError.ReferenceError.make(\"message\")->JsError.throw`.\n\n  See [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/jserror/rangeerror": {
    "id": "Stdlib.JsError.RangeError",
    "name": "RangeError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.RangeError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `RangeError` with the provided `message`.\n\n  See [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.RangeError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `RangeError` with the provided `message` and throws it.\n  \n  `JsError.RangeError.throwWithMessage(\"message\")` is equivalent to `JsError.RangeError.make(\"message\")->JsError.throw`.\n\n  See [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/jserror/evalerror": {
    "id": "Stdlib.JsError.EvalError",
    "name": "EvalError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.JsError.EvalError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `EvalError` with the provided `message`.\n\n  See [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError) on MDN."
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.EvalError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `EvalError` with the provided `message` and throws it.\n\n  `JsError.EvalError.throwWithMessage(\"message\")` is equivalent to `JsError.EvalError.make(\"message\")->JsError.throw`.\n\n  See [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError) on MDN."
        ],
        "signature": "let throwWithMessage: string => 'a"
      }
    ]
  },
  "stdlib/intl/segments": {
    "id": "Stdlib.Intl.Segments",
    "name": "Segments",
    "docstrings": [
      "A Segments instance is an object that represents the segments of a specific string, subject to the locale and options of its constructing Intl.Segmenter instance.\nhttps://tc39.es/ecma402/#sec-segments-objects"
    ],
    "items": [
      {
        "id": "Stdlib.Intl.Segments.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.Segments.segmentData",
        "kind": "type",
        "name": "segmentData",
        "docstrings": [],
        "signature": "type segmentData = {\n  segment: string,\n  index: int,\n  isWordLike: option<bool>,\n  input: string,\n}"
      },
      {
        "id": "Stdlib.Intl.Segments.containing",
        "kind": "value",
        "name": "containing",
        "docstrings": [],
        "signature": "let containing: t => segmentData"
      },
      {
        "id": "Stdlib.Intl.Segments.containingWithIndex",
        "kind": "value",
        "name": "containingWithIndex",
        "docstrings": [],
        "signature": "let containingWithIndex: (t, int) => segmentData"
      },
      {
        "id": "Stdlib.Intl.Segments.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(segments)` ignores the provided segments and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/segmenter": {
    "id": "Stdlib.Intl.Segmenter",
    "name": "Segmenter",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.Segmenter.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.Segmenter.granularity",
        "kind": "type",
        "name": "granularity",
        "docstrings": [],
        "signature": "type granularity = [#grapheme | #sentence | #word]"
      },
      {
        "id": "Stdlib.Intl.Segmenter.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  localeMatcher?: Intl_Common.localeMatcher,\n  granularity?: granularity,\n}"
      },
      {
        "id": "Stdlib.Intl.Segmenter.pluralCategories",
        "kind": "type",
        "name": "pluralCategories",
        "docstrings": [],
        "signature": "type pluralCategories = [\n  | #few\n  | #many\n  | #one\n  | #other\n  | #two\n  | #zero\n]"
      },
      {
        "id": "Stdlib.Intl.Segmenter.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  locale: string,\n  granularity: granularity,\n}"
      },
      {
        "id": "Stdlib.Intl.Segmenter.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.Segmenter.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.Segmenter.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.Segmenter.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.Segmenter.segment",
        "kind": "value",
        "name": "segment",
        "docstrings": [],
        "signature": "let segment: (t, string) => Intl_Segments.t"
      },
      {
        "id": "Stdlib.Intl.Segmenter.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(segmenter)` ignores the provided segmenter and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/relativetimeformat": {
    "id": "Stdlib.Intl.RelativeTimeFormat",
    "name": "RelativeTimeFormat",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.numeric",
        "kind": "type",
        "name": "numeric",
        "docstrings": [],
        "signature": "type numeric = [#always | #auto]"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.style",
        "kind": "type",
        "name": "style",
        "docstrings": [],
        "signature": "type style = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.timeUnit",
        "kind": "type",
        "name": "timeUnit",
        "docstrings": [],
        "signature": "type timeUnit = [\n  | #day\n  | #hour\n  | #minute\n  | #month\n  | #quarter\n  | #second\n  | #week\n  | #year\n]"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  localeMatcher?: Intl_Common.localeMatcher,\n  numeric?: numeric,\n  style?: style,\n}"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  locale: string,\n  numeric: numeric,\n  style: style,\n  numberingSystem: string,\n}"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.relativeTimePartComponent",
        "kind": "type",
        "name": "relativeTimePartComponent",
        "docstrings": [],
        "signature": "type relativeTimePartComponent = [#integer | #literal]"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.relativeTimePart",
        "kind": "type",
        "name": "relativeTimePart",
        "docstrings": [],
        "signature": "type relativeTimePart = {\n  \\\"type\": relativeTimePartComponent,\n  value: string,\n  unit?: timeUnit,\n}"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.format",
        "kind": "value",
        "name": "format",
        "docstrings": [],
        "signature": "let format: (t, int, timeUnit) => string"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.formatToParts",
        "kind": "value",
        "name": "formatToParts",
        "docstrings": [],
        "signature": "let formatToParts: (t, int, timeUnit) => array<relativeTimePart>"
      },
      {
        "id": "Stdlib.Intl.RelativeTimeFormat.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(relativeTimeFormat)` ignores the provided relativeTimeFormat and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/pluralrules": {
    "id": "Stdlib.Intl.PluralRules",
    "name": "PluralRules",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.PluralRules.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.PluralRules.localeType",
        "kind": "type",
        "name": "localeType",
        "docstrings": [],
        "signature": "type localeType = [#cardinal | #ordinal]"
      },
      {
        "id": "Stdlib.Intl.PluralRules.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  localeMatcher?: Intl_Common.localeMatcher,\n  \\\"type\"?: localeType,\n  minimumIntegerDigits?: Intl_Common.oneTo21,\n  minimumFractionDigits?: Intl_Common.zeroTo20,\n  maximumFractionDigits?: Intl_Common.zeroTo20,\n  minimumSignificantDigits?: Intl_Common.oneTo21,\n  maximumSignificantDigits?: Intl_Common.oneTo21,\n}"
      },
      {
        "id": "Stdlib.Intl.PluralRules.pluralCategories",
        "kind": "type",
        "name": "pluralCategories",
        "docstrings": [],
        "signature": "type pluralCategories = [\n  | #few\n  | #many\n  | #one\n  | #other\n  | #two\n  | #zero\n]"
      },
      {
        "id": "Stdlib.Intl.PluralRules.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  locale: string,\n  pluralCategories: array<pluralCategories>,\n  \\\"type\": localeType,\n  minimumIntegerDigits?: Intl_Common.oneTo21,\n  minimumFractionDigits?: Intl_Common.zeroTo20,\n  maximumFractionDigits?: Intl_Common.zeroTo20,\n  minimumSignificantDigits?: Intl_Common.oneTo21,\n  maximumSignificantDigits?: Intl_Common.oneTo21,\n}"
      },
      {
        "id": "Stdlib.Intl.PluralRules.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.PluralRules.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.PluralRules.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.PluralRules.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.PluralRules.rule",
        "kind": "type",
        "name": "rule",
        "docstrings": [],
        "signature": "type rule = [#few | #many | #one | #other | #two | #zero]"
      },
      {
        "id": "Stdlib.Intl.PluralRules.select",
        "kind": "value",
        "name": "select",
        "docstrings": [],
        "signature": "let select: (t, float) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.selectInt",
        "kind": "value",
        "name": "selectInt",
        "docstrings": [],
        "signature": "let selectInt: (t, int) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.selectBigInt",
        "kind": "value",
        "name": "selectBigInt",
        "docstrings": [],
        "signature": "let selectBigInt: (t, bigint) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.selectRange",
        "kind": "value",
        "name": "selectRange",
        "docstrings": [],
        "signature": "let selectRange: (t, ~start: float, ~end: float) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.selectRangeInt",
        "kind": "value",
        "name": "selectRangeInt",
        "docstrings": [],
        "signature": "let selectRangeInt: (t, ~start: int, ~end: int) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.selectRangeBigInt",
        "kind": "value",
        "name": "selectRangeBigInt",
        "docstrings": [],
        "signature": "let selectRangeBigInt: (t, ~start: bigint, ~end: bigint) => rule"
      },
      {
        "id": "Stdlib.Intl.PluralRules.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(pluralRules)` ignores the provided pluralRules and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/numberformat": {
    "id": "Stdlib.Intl.NumberFormat",
    "name": "NumberFormat",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.NumberFormat.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.currency",
        "kind": "type",
        "name": "currency",
        "docstrings": ["An ISO 4217 currency code. e.g. USD, EUR, CNY"],
        "signature": "type currency = string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.currencyDisplay",
        "kind": "type",
        "name": "currencyDisplay",
        "docstrings": [],
        "signature": "type currencyDisplay = [\n  | #code\n  | #name\n  | #narrowSymbol\n  | #symbol\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.currencySign",
        "kind": "type",
        "name": "currencySign",
        "docstrings": [],
        "signature": "type currencySign = [#accounting | #standard]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.notation",
        "kind": "type",
        "name": "notation",
        "docstrings": [],
        "signature": "type notation = [\n  | #compact\n  | #engineering\n  | #scientific\n  | #standard\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.compactDisplay",
        "kind": "type",
        "name": "compactDisplay",
        "docstrings": ["Used only when notation is #compact"],
        "signature": "type compactDisplay = [#long | #short]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.signDisplay",
        "kind": "type",
        "name": "signDisplay",
        "docstrings": [],
        "signature": "type signDisplay = [\n  | #always\n  | #auto\n  | #exceptZero\n  | #negative\n  | #never\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.style",
        "kind": "type",
        "name": "style",
        "docstrings": [],
        "signature": "type style = [#currency | #decimal | #percent | #unit]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.unitSystem",
        "kind": "type",
        "name": "unitSystem",
        "docstrings": [
          "Defined in https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier\nOnly used when style is #unit"
        ],
        "signature": "type unitSystem = string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.unitDisplay",
        "kind": "type",
        "name": "unitDisplay",
        "docstrings": ["Only used when style is #unit"],
        "signature": "type unitDisplay = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.rounding",
        "kind": "type",
        "name": "rounding",
        "docstrings": [],
        "signature": "type rounding = [\n  | #ceil\n  | #expand\n  | #floor\n  | #halfCeil\n  | #halfEven\n  | #halfExpand\n  | #halfFloor\n  | #halfTrunc\n  | #trunc\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.roundingPriority",
        "kind": "type",
        "name": "roundingPriority",
        "docstrings": [],
        "signature": "type roundingPriority = [\n  | #auto\n  | #lessPrecision\n  | #morePrecision\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.roundingIncrement",
        "kind": "type",
        "name": "roundingIncrement",
        "docstrings": [],
        "signature": "type roundingIncrement = [\n  | #1\n  | #10\n  | #100\n  | #1000\n  | #2\n  | #20\n  | #200\n  | #2000\n  | #25\n  | #250\n  | #2500\n  | #5\n  | #50\n  | #500\n  | #5000\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.trailingZeroDisplay",
        "kind": "type",
        "name": "trailingZeroDisplay",
        "docstrings": [],
        "signature": "type trailingZeroDisplay = [\n  | #auto\n  | #lessPrecision\n  | #stripIfInteger\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  compactDisplay?: compactDisplay,\n  numberingSystem?: Intl_Common.numberingSystem,\n  currency?: currency,\n  currencyDisplay?: currencyDisplay,\n  currencySign?: currencySign,\n  localeMatcher?: Intl_Common.localeMatcher,\n  notation?: notation,\n  signDisplay?: signDisplay,\n  style?: style,\n  unit?: unitSystem,\n  unitDisplay?: unitDisplay,\n  useGrouping?: Grouping.t,\n  roundingMode?: rounding,\n  roundingPriority?: roundingPriority,\n  roundingIncrement?: roundingIncrement,\n  trailingZeroDisplay?: trailingZeroDisplay,\n  minimumIntegerDigits?: Intl_Common.oneTo21,\n  minimumFractionDigits?: Intl_Common.zeroTo20,\n  maximumFractionDigits?: Intl_Common.zeroTo20,\n  minimumSignificantDigits?: Intl_Common.oneTo21,\n  maximumSignificantDigits?: Intl_Common.oneTo21,\n}"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  currency?: currency,\n  currencyDisplay?: currencyDisplay,\n  currencySign?: currencySign,\n  compactDisplay?: compactDisplay,\n  unit: unitSystem,\n  unitDisplay: unitDisplay,\n  roundingMode?: rounding,\n  roundingPriority?: roundingPriority,\n  roundingIncrement?: roundingIncrement,\n  minimumIntegerDigits?: Intl_Common.oneTo21,\n  minimumFractionDigits?: Intl_Common.zeroTo20,\n  maximumFractionDigits?: Intl_Common.zeroTo20,\n  minimumSignificantDigits?: Intl_Common.oneTo21,\n  maximumSignificantDigits?: Intl_Common.oneTo21,\n  locale: string,\n  notation: notation,\n  numberingSystem: Intl_Common.numberingSystem,\n  signDisplay: signDisplay,\n  style: style,\n  useGrouping: Grouping.t,\n}"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.numberFormatPartType",
        "kind": "type",
        "name": "numberFormatPartType",
        "docstrings": [],
        "signature": "type numberFormatPartType = [\n  | #compact\n  | #currency\n  | #decimal\n  | #exponentInteger\n  | #exponentMinusSign\n  | #exponentSeparator\n  | #fraction\n  | #group\n  | #infinity\n  | #integer\n  | #literal\n  | #minusSign\n  | #nan\n  | #percentSign\n  | #plusSign\n  | #unit\n  | #unknown\n]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.numberFormatPart",
        "kind": "type",
        "name": "numberFormatPart",
        "docstrings": [],
        "signature": "type numberFormatPart = {\n  \\\"type\": numberFormatPartType,\n  value: string,\n}"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.rangeSource",
        "kind": "type",
        "name": "rangeSource",
        "docstrings": [],
        "signature": "type rangeSource = [#endRange | #shared | #startRange]"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.numberFormatRangePart",
        "kind": "type",
        "name": "numberFormatRangePart",
        "docstrings": [],
        "signature": "type numberFormatRangePart = {\n  \\\"type\": numberFormatPartType,\n  value: string,\n  source: rangeSource,\n}"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.format",
        "kind": "value",
        "name": "format",
        "docstrings": [],
        "signature": "let format: (t, float) => string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatRange",
        "kind": "value",
        "name": "formatRange",
        "docstrings": [],
        "signature": "let formatRange: (t, ~start: float, ~end: float) => array<string>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatToParts",
        "kind": "value",
        "name": "formatToParts",
        "docstrings": [],
        "signature": "let formatToParts: (t, float) => array<numberFormatPart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatRangeToParts",
        "kind": "value",
        "name": "formatRangeToParts",
        "docstrings": [],
        "signature": "let formatRangeToParts: (\n  t,\n  ~start: float,\n  ~end: float,\n) => array<numberFormatRangePart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatInt",
        "kind": "value",
        "name": "formatInt",
        "docstrings": [],
        "signature": "let formatInt: (t, int) => string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatIntRange",
        "kind": "value",
        "name": "formatIntRange",
        "docstrings": [],
        "signature": "let formatIntRange: (t, ~start: int, ~end: int) => array<string>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatIntToParts",
        "kind": "value",
        "name": "formatIntToParts",
        "docstrings": [],
        "signature": "let formatIntToParts: (t, int) => array<numberFormatPart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatIntRangeToParts",
        "kind": "value",
        "name": "formatIntRangeToParts",
        "docstrings": [],
        "signature": "let formatIntRangeToParts: (t, ~start: int, ~end: int) => array<numberFormatRangePart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatBigInt",
        "kind": "value",
        "name": "formatBigInt",
        "docstrings": [],
        "signature": "let formatBigInt: (t, bigint) => string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatBigIntRange",
        "kind": "value",
        "name": "formatBigIntRange",
        "docstrings": [],
        "signature": "let formatBigIntRange: (t, ~start: bigint, ~end: bigint) => array<string>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatBigIntToParts",
        "kind": "value",
        "name": "formatBigIntToParts",
        "docstrings": [],
        "signature": "let formatBigIntToParts: (t, bigint) => array<numberFormatPart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatBigIntRangeToParts",
        "kind": "value",
        "name": "formatBigIntRangeToParts",
        "docstrings": [],
        "signature": "let formatBigIntRangeToParts: (t, ~start: bigint, ~end: bigint) => array<numberFormatPart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatString",
        "kind": "value",
        "name": "formatString",
        "docstrings": [],
        "signature": "let formatString: (t, string) => string"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.formatStringToParts",
        "kind": "value",
        "name": "formatStringToParts",
        "docstrings": [],
        "signature": "let formatStringToParts: (t, string) => array<numberFormatRangePart>"
      },
      {
        "id": "Stdlib.Intl.NumberFormat.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(numberFormat)` ignores the provided numberFormat and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/locale": {
    "id": "Stdlib.Intl.Locale",
    "name": "Locale",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.Locale.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.Locale.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  baseName?: string,\n  calendar?: Intl_Common.calendar,\n  collation?: Intl_Common.collation,\n  hourCycle?: [#h11 | #h12 | #h23 | #h24],\n  caseFirst?: [#\"false\" | #lower | #upper],\n  numberingSystem?: Intl_Common.numberingSystem,\n  numeric?: bool,\n  language?: string,\n  script?: string,\n  region?: string,\n}"
      },
      {
        "id": "Stdlib.Intl.Locale.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (string, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.Locale.baseName",
        "kind": "value",
        "name": "baseName",
        "docstrings": [],
        "signature": "let baseName: t => string"
      },
      {
        "id": "Stdlib.Intl.Locale.calendar",
        "kind": "value",
        "name": "calendar",
        "docstrings": [],
        "signature": "let calendar: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.caseFirst",
        "kind": "value",
        "name": "caseFirst",
        "docstrings": [],
        "signature": "let caseFirst: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.collation",
        "kind": "value",
        "name": "collation",
        "docstrings": [],
        "signature": "let collation: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.hourCycle",
        "kind": "value",
        "name": "hourCycle",
        "docstrings": [],
        "signature": "let hourCycle: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.language",
        "kind": "value",
        "name": "language",
        "docstrings": [],
        "signature": "let language: t => string"
      },
      {
        "id": "Stdlib.Intl.Locale.numberingSystem",
        "kind": "value",
        "name": "numberingSystem",
        "docstrings": [],
        "signature": "let numberingSystem: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.numeric",
        "kind": "value",
        "name": "numeric",
        "docstrings": [],
        "signature": "let numeric: t => bool"
      },
      {
        "id": "Stdlib.Intl.Locale.region",
        "kind": "value",
        "name": "region",
        "docstrings": [],
        "signature": "let region: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.script",
        "kind": "value",
        "name": "script",
        "docstrings": [],
        "signature": "let script: t => option<string>"
      },
      {
        "id": "Stdlib.Intl.Locale.maximize",
        "kind": "value",
        "name": "maximize",
        "docstrings": [],
        "signature": "let maximize: t => t"
      },
      {
        "id": "Stdlib.Intl.Locale.minimize",
        "kind": "value",
        "name": "minimize",
        "docstrings": [],
        "signature": "let minimize: t => t"
      },
      {
        "id": "Stdlib.Intl.Locale.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(locale)` ignores the provided locale and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/listformat": {
    "id": "Stdlib.Intl.ListFormat",
    "name": "ListFormat",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.ListFormat.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.ListFormat.listType",
        "kind": "type",
        "name": "listType",
        "docstrings": [],
        "signature": "type listType = [#conjunction | #disjunction | #unit]"
      },
      {
        "id": "Stdlib.Intl.ListFormat.style",
        "kind": "type",
        "name": "style",
        "docstrings": [],
        "signature": "type style = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.ListFormat.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  localeMatcher?: Intl_Common.localeMatcher,\n  \\\"type\"?: listType,\n  style?: style,\n}"
      },
      {
        "id": "Stdlib.Intl.ListFormat.listPartComponentType",
        "kind": "type",
        "name": "listPartComponentType",
        "docstrings": [],
        "signature": "type listPartComponentType = [#element | #literal]"
      },
      {
        "id": "Stdlib.Intl.ListFormat.listPart",
        "kind": "type",
        "name": "listPart",
        "docstrings": [],
        "signature": "type listPart = {\n  \\\"type\": listPartComponentType,\n  value: string,\n}"
      },
      {
        "id": "Stdlib.Intl.ListFormat.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  locale: string,\n  style: style,\n  \\\"type\": listType,\n}"
      },
      {
        "id": "Stdlib.Intl.ListFormat.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.ListFormat.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.ListFormat.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.ListFormat.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.ListFormat.format",
        "kind": "value",
        "name": "format",
        "docstrings": [],
        "signature": "let format: (t, array<string>) => string"
      },
      {
        "id": "Stdlib.Intl.ListFormat.formatToParts",
        "kind": "value",
        "name": "formatToParts",
        "docstrings": [],
        "signature": "let formatToParts: (t, array<string>) => array<listPart>"
      },
      {
        "id": "Stdlib.Intl.ListFormat.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(listFormat)` ignores the provided listFormat and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/datetimeformat": {
    "id": "Stdlib.Intl.DateTimeFormat",
    "name": "DateTimeFormat",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.DateTimeFormat.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dateStyle",
        "kind": "type",
        "name": "dateStyle",
        "docstrings": [],
        "signature": "type dateStyle = [#full | #long | #medium | #short]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.timeStyle",
        "kind": "type",
        "name": "timeStyle",
        "docstrings": [],
        "signature": "type timeStyle = [#full | #long | #medium | #short]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dayPeriod",
        "kind": "type",
        "name": "dayPeriod",
        "docstrings": [],
        "signature": "type dayPeriod = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.weekday",
        "kind": "type",
        "name": "weekday",
        "docstrings": [],
        "signature": "type weekday = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.era",
        "kind": "type",
        "name": "era",
        "docstrings": [],
        "signature": "type era = [#long | #narrow | #short]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.year",
        "kind": "type",
        "name": "year",
        "docstrings": [],
        "signature": "type year = [#\"2-digit\" | #numeric]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.month",
        "kind": "type",
        "name": "month",
        "docstrings": [],
        "signature": "type month = [\n  | #\"2-digit\"\n  | #long\n  | #narrow\n  | #numeric\n  | #short\n]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.day",
        "kind": "type",
        "name": "day",
        "docstrings": [],
        "signature": "type day = [#\"2-digit\" | #numeric]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.hour",
        "kind": "type",
        "name": "hour",
        "docstrings": [],
        "signature": "type hour = [#\"2-digit\" | #numeric]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.minute",
        "kind": "type",
        "name": "minute",
        "docstrings": [],
        "signature": "type minute = [#\"2-digit\" | #numeric]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.second",
        "kind": "type",
        "name": "second",
        "docstrings": [],
        "signature": "type second = [#\"2-digit\" | #numeric]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.timeZoneName",
        "kind": "type",
        "name": "timeZoneName",
        "docstrings": [
          "Firefox also supports IANA time zone names here\nNode v19+ supports \"shortOffset\", \"shortGeneric\", \"longOffset\", and \"longGeneric\"."
        ],
        "signature": "type timeZoneName = [\n  | #long\n  | #longGeneric\n  | #longOffset\n  | #short\n  | #shortGeneric\n  | #shortOffset\n]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.hourCycle",
        "kind": "type",
        "name": "hourCycle",
        "docstrings": [],
        "signature": "type hourCycle = [#h11 | #h12 | #h23 | #h24]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.formatMatcher",
        "kind": "type",
        "name": "formatMatcher",
        "docstrings": [],
        "signature": "type formatMatcher = [#basic | #\"best fit\"]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.fractionalSecondDigits",
        "kind": "type",
        "name": "fractionalSecondDigits",
        "docstrings": [],
        "signature": "type fractionalSecondDigits = [#0 | #1 | #2 | #3]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  dateStyle?: dateStyle,\n  timeStyle?: timeStyle,\n  calendar?: Intl_Common.calendar,\n  dayPeriod?: dayPeriod,\n  numberingSystem?: Intl_Common.numberingSystem,\n  localeMatcher?: Intl_Common.localeMatcher,\n  timeZone?: string,\n  hour12?: bool,\n  hourCycle?: hourCycle,\n  formatMatcher?: formatMatcher,\n  weekday?: weekday,\n  era?: era,\n  year?: year,\n  month?: month,\n  day?: day,\n  hour?: hour,\n  minute?: minute,\n  second?: second,\n  fractionalSecondDigits?: fractionalSecondDigits,\n  timeZoneName?: timeZoneName,\n}"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  dateStyle?: dateStyle,\n  timeStyle?: timeStyle,\n  weekday?: weekday,\n  era?: era,\n  year?: year,\n  month?: month,\n  day?: day,\n  hour?: hour,\n  minute?: minute,\n  second?: second,\n  fractionalSecondDigits?: fractionalSecondDigits,\n  timeZoneName?: timeZoneName,\n  calendar: Intl_Common.calendar,\n  hour12: bool,\n  hourCycle: hourCycle,\n  locale: string,\n  numberingSystem: Intl_Common.numberingSystem,\n  timeZone: string,\n}"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dateTimeComponent",
        "kind": "type",
        "name": "dateTimeComponent",
        "docstrings": [],
        "signature": "type dateTimeComponent = [\n  | #day\n  | #dayPeriod\n  | #era\n  | #fractionalSecond\n  | #hour\n  | #literal\n  | #minute\n  | #month\n  | #relatedYear\n  | #second\n  | #timeZone\n  | #weekday\n  | #year\n  | #yearName\n]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dateTimePart",
        "kind": "type",
        "name": "dateTimePart",
        "docstrings": [],
        "signature": "type dateTimePart = {\n  \\\"type\": dateTimeComponent,\n  value: string,\n}"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dateTimeRangeSource",
        "kind": "type",
        "name": "dateTimeRangeSource",
        "docstrings": [],
        "signature": "type dateTimeRangeSource = [\n  | #endRange\n  | #shared\n  | #startRange\n]"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.dateTimeRangePart",
        "kind": "type",
        "name": "dateTimeRangePart",
        "docstrings": [],
        "signature": "type dateTimeRangePart = {\n  \\\"type\": dateTimeComponent,\n  value: string,\n  source: dateTimeRangeSource,\n}"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.format",
        "kind": "value",
        "name": "format",
        "docstrings": [],
        "signature": "let format: (t, Date.t) => string"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.formatToParts",
        "kind": "value",
        "name": "formatToParts",
        "docstrings": [],
        "signature": "let formatToParts: (t, Date.t) => array<dateTimePart>"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.formatRange",
        "kind": "value",
        "name": "formatRange",
        "docstrings": [],
        "signature": "let formatRange: (t, ~startDate: Date.t, ~endDate: Date.t) => string"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.formatRangeToParts",
        "kind": "value",
        "name": "formatRangeToParts",
        "docstrings": [],
        "signature": "let formatRangeToParts: (\n  t,\n  ~startDate: Date.t,\n  ~endDate: Date.t,\n) => array<dateTimeRangePart>"
      },
      {
        "id": "Stdlib.Intl.DateTimeFormat.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(dateTimeFormat)` ignores the provided dateTimeFormat and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/collator": {
    "id": "Stdlib.Intl.Collator",
    "name": "Collator",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.Collator.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Intl.Collator.usage",
        "kind": "type",
        "name": "usage",
        "docstrings": [],
        "signature": "type usage = [#search | #sort]"
      },
      {
        "id": "Stdlib.Intl.Collator.sensitivity",
        "kind": "type",
        "name": "sensitivity",
        "docstrings": [],
        "signature": "type sensitivity = [#accent | #base | #case | #variant]"
      },
      {
        "id": "Stdlib.Intl.Collator.caseFirst",
        "kind": "type",
        "name": "caseFirst",
        "docstrings": [],
        "signature": "type caseFirst = [#\"false\" | #lower | #upper]"
      },
      {
        "id": "Stdlib.Intl.Collator.options",
        "kind": "type",
        "name": "options",
        "docstrings": [],
        "signature": "type options = {\n  localeMatcher?: Intl_Common.localeMatcher,\n  usage?: usage,\n  sensitivity?: sensitivity,\n  ignorePunctuation?: bool,\n  numeric?: bool,\n  caseFirst?: caseFirst,\n}"
      },
      {
        "id": "Stdlib.Intl.Collator.resolvedOptions",
        "kind": "type",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "type resolvedOptions = {\n  locale: string,\n  usage: usage,\n  sensitivity: sensitivity,\n  ignorePunctuation: bool,\n  collation: [\n    | #compat\n    | #default\n    | #dict\n    | #emoji\n    | #eor\n    | #phonebk\n    | #phonetic\n    | #pinyin\n    | #stroke\n    | #trad\n    | #unihan\n    | #zhuyin\n  ],\n  numeric?: bool,\n  caseFirst?: caseFirst,\n}"
      },
      {
        "id": "Stdlib.Intl.Collator.supportedLocalesOptions",
        "kind": "type",
        "name": "supportedLocalesOptions",
        "docstrings": [],
        "signature": "type supportedLocalesOptions = {\n  localeMatcher: Intl_Common.localeMatcher,\n}"
      },
      {
        "id": "Stdlib.Intl.Collator.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: (~locales: array<string>=?, ~options: options=?) => t"
      },
      {
        "id": "Stdlib.Intl.Collator.supportedLocalesOf",
        "kind": "value",
        "name": "supportedLocalesOf",
        "docstrings": [],
        "signature": "let supportedLocalesOf: (array<string>, ~options: supportedLocalesOptions=?) => t"
      },
      {
        "id": "Stdlib.Intl.Collator.resolvedOptions",
        "kind": "value",
        "name": "resolvedOptions",
        "docstrings": [],
        "signature": "let resolvedOptions: t => resolvedOptions"
      },
      {
        "id": "Stdlib.Intl.Collator.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [],
        "signature": "let compare: (t, string, string) => int"
      },
      {
        "id": "Stdlib.Intl.Collator.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(collator)` ignores the provided collator and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl/common": {
    "id": "Stdlib.Intl.Common",
    "name": "Common",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.Common.localeMatcher",
        "kind": "type",
        "name": "localeMatcher",
        "docstrings": [],
        "signature": "type localeMatcher = [#\"best fit\" | #lookup]"
      },
      {
        "id": "Stdlib.Intl.Common.calendar",
        "kind": "type",
        "name": "calendar",
        "docstrings": [],
        "signature": "type calendar = [\n  | #buddhist\n  | #chinese\n  | #coptic\n  | #dangi\n  | #ethioaa\n  | #ethiopic\n  | #gregory\n  | #hebrew\n  | #indian\n  | #islamic\n  | #\"islamic-civil\"\n  | #\"islamic-rgsa\"\n  | #\"islamic-tbla\"\n  | #\"islamic-umalqura\"\n  | #iso8601\n  | #japanese\n  | #persian\n  | #roc\n]"
      },
      {
        "id": "Stdlib.Intl.Common.collation",
        "kind": "type",
        "name": "collation",
        "docstrings": [],
        "signature": "type collation = [\n  | #compat\n  | #dict\n  | #emoji\n  | #eor\n  | #phonebk\n  | #phonetic\n  | #pinyin\n  | #stroke\n  | #trad\n  | #unihan\n  | #zhuyin\n]"
      },
      {
        "id": "Stdlib.Intl.Common.numberingSystem",
        "kind": "type",
        "name": "numberingSystem",
        "docstrings": [],
        "signature": "type numberingSystem = [\n  | #adlm\n  | #ahom\n  | #arab\n  | #arabext\n  | #bali\n  | #beng\n  | #bhks\n  | #brah\n  | #cakm\n  | #cham\n  | #deva\n  | #diak\n  | #fullwide\n  | #gong\n  | #gonm\n  | #gujr\n  | #guru\n  | #hanidec\n  | #hmng\n  | #hmnp\n  | #java\n  | #kali\n  | #kawi\n  | #khmr\n  | #knda\n  | #lana\n  | #lanatham\n  | #laoo\n  | #latn\n  | #lepc\n  | #limb\n  | #mathbold\n  | #mathdbl\n  | #mathmono\n  | #mathsanb\n  | #mathsans\n  | #mlym\n  | #modi\n  | #mong\n  | #mroo\n  | #mtei\n  | #mymr\n  | #mymrshan\n  | #mymrtlng\n  | #nagm\n  | #newa\n  | #nkoo\n  | #olck\n  | #orya\n  | #osma\n  | #rohg\n  | #saur\n  | #segment\n  | #shrd\n  | #sind\n  | #sinh\n  | #sora\n  | #sund\n  | #takr\n  | #talu\n  | #tamldec\n  | #telu\n  | #thai\n  | #tibt\n  | #tirh\n  | #tnsa\n  | #vaii\n  | #wara\n  | #wcho\n]"
      },
      {
        "id": "Stdlib.Intl.Common.oneTo21",
        "kind": "type",
        "name": "oneTo21",
        "docstrings": [],
        "signature": "type oneTo21 = [\n  | #1\n  | #10\n  | #11\n  | #12\n  | #13\n  | #14\n  | #15\n  | #16\n  | #17\n  | #18\n  | #19\n  | #2\n  | #20\n  | #21\n  | #3\n  | #4\n  | #5\n  | #6\n  | #7\n  | #8\n  | #9\n]"
      },
      {
        "id": "Stdlib.Intl.Common.zeroTo20",
        "kind": "type",
        "name": "zeroTo20",
        "docstrings": [],
        "signature": "type zeroTo20 = [\n  | #0\n  | #1\n  | #10\n  | #11\n  | #12\n  | #13\n  | #14\n  | #15\n  | #16\n  | #17\n  | #18\n  | #19\n  | #2\n  | #20\n  | #3\n  | #4\n  | #5\n  | #6\n  | #7\n  | #8\n  | #9\n]"
      }
    ]
  },
  "stdlib/int/ref": {
    "id": "Stdlib.Int.Ref",
    "name": "Ref",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int.Ref.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t = ref<int>"
      },
      {
        "id": "Stdlib.Int.Ref.increment",
        "kind": "value",
        "name": "increment",
        "docstrings": [
          "`increment(intRef)` increments the value of the provided reference by 1.\n\n  ## Examples\n\n  ```rescript\n  let myRef = ref(4)\n  Int.Ref.increment(myRef)\n  myRef.contents == 5\n  ```"
        ],
        "signature": "let increment: ref<int> => unit"
      },
      {
        "id": "Stdlib.Int.Ref.decrement",
        "kind": "value",
        "name": "decrement",
        "docstrings": [
          "`decrement(intRef)` decrements the value of the provided reference by 1.\n\n  ## Examples\n\n  ```rescript\n  let myRef = ref(4)\n  Int.Ref.decrement(myRef)\n  myRef.contents == 3\n  ```"
        ],
        "signature": "let decrement: ref<int> => unit"
      }
    ]
  },
  "stdlib/int/constants": {
    "id": "Stdlib.Int.Constants",
    "name": "Constants",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int.Constants.minValue",
        "kind": "value",
        "name": "minValue",
        "docstrings": [
          "The smallest positive number represented in JavaScript.\nSee [`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE)\non MDN.\n\n  ## Examples\n\n  ```rescript\n  Console.log(Int.Constants.minValue)\n  ```"
        ],
        "signature": "let minValue: int"
      },
      {
        "id": "Stdlib.Int.Constants.maxValue",
        "kind": "value",
        "name": "maxValue",
        "docstrings": [
          "The largest positive number represented in JavaScript.\nSee [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE)\non MDN.\n\n  ## Examples\n\n  ```rescript\n  Console.log(Int.Constants.maxValue)\n  ```"
        ],
        "signature": "let maxValue: int"
      }
    ]
  },
  "stdlib/float/constants": {
    "id": "Stdlib.Float.Constants",
    "name": "Constants",
    "docstrings": ["Float constants."],
    "items": [
      {
        "id": "Stdlib.Float.Constants.nan",
        "kind": "value",
        "name": "nan",
        "docstrings": [
          "The special value \"Not a Number\"\nSee [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.nan\n  ```"
        ],
        "signature": "let nan: float"
      },
      {
        "id": "Stdlib.Float.Constants.epsilon",
        "kind": "value",
        "name": "epsilon",
        "docstrings": [
          "Represents the difference between 1 and the smallest floating point number greater than 1.\nSee [`Number.EPSILON`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.epsilon\n  ```"
        ],
        "signature": "let epsilon: float"
      },
      {
        "id": "Stdlib.Float.Constants.positiveInfinity",
        "kind": "value",
        "name": "positiveInfinity",
        "docstrings": [
          "The positive Infinity value\nSee [`Number.POSITIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.positiveInfinity\n  ```"
        ],
        "signature": "let positiveInfinity: float"
      },
      {
        "id": "Stdlib.Float.Constants.negativeInfinity",
        "kind": "value",
        "name": "negativeInfinity",
        "docstrings": [
          "The negative Infinity value\nSee [`Number.NEGATIVE_INFINITY`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.negativeInfinity\n  ```"
        ],
        "signature": "let negativeInfinity: float"
      },
      {
        "id": "Stdlib.Float.Constants.minValue",
        "kind": "value",
        "name": "minValue",
        "docstrings": [
          "The smallest positive numeric value representable in JavaScript.\nSee [`Number.MIN_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.minValue\n  ```"
        ],
        "signature": "let minValue: float"
      },
      {
        "id": "Stdlib.Float.Constants.maxValue",
        "kind": "value",
        "name": "maxValue",
        "docstrings": [
          "The maximum positive numeric value representable in JavaScript.\nSee [`Number.MAX_VALUE`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE) on MDN.\n\n  ## Examples\n\n  ```rescript\n  Float.Constants.minValue\n  ```"
        ],
        "signature": "let maxValue: float"
      }
    ]
  },
  "stdlib/error/urierror": {
    "id": "Stdlib.Error.URIError",
    "name": "URIError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.URIError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `URIError` with the provided `message`.\n\n  See [`URIError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.URIError.make` instead"
      }
    ]
  },
  "stdlib/error/typeerror": {
    "id": "Stdlib.Error.TypeError",
    "name": "TypeError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.TypeError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `TypeError` with the provided `message`.\n\n  See [`TypeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.TypeError.make` instead"
      }
    ]
  },
  "stdlib/error/syntaxerror": {
    "id": "Stdlib.Error.SyntaxError",
    "name": "SyntaxError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.SyntaxError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `SyntaxError` with the provided `message`.\n\n  See [`SyntaxError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.SyntaxError.make` instead"
      }
    ]
  },
  "stdlib/error/referenceerror": {
    "id": "Stdlib.Error.ReferenceError",
    "name": "ReferenceError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.ReferenceError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `ReferenceError` with the provided `message`.\n\n  See [`ReferenceError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.ReferenceError.make` instead"
      }
    ]
  },
  "stdlib/error/rangeerror": {
    "id": "Stdlib.Error.RangeError",
    "name": "RangeError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.RangeError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `RangeError` with the provided `message`.\n\n  See [`RangeError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.RangeError.make` instead"
      }
    ]
  },
  "stdlib/error/evalerror": {
    "id": "Stdlib.Error.EvalError",
    "name": "EvalError",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Error.EvalError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `EvalError` with the provided `message`.\n\n  See [`EvalError`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError) on MDN."
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.EvalError.make` instead"
      }
    ]
  },
  "stdlib/date/utc": {
    "id": "Stdlib.Date.UTC",
    "name": "UTC",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Date.UTC.makeWithYM",
        "kind": "value",
        "name": "makeWithYM",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYM(~year=2023, ~month=0)\n  // 1672531200000\n  \n  Date.UTC.makeWithYM(~year=2023, ~month=11)\n  // 1701388800000\n  \n  Date.UTC.makeWithYM(~year=2023, ~month=12)\n  // 1704067200000\n  \n  Date.UTC.makeWithYM(~year=2023, ~month=-1)\n  // 1669852800000\n  ```"
        ],
        "signature": "let makeWithYM: (~year: int, ~month: int) => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.UTC.makeWithYMD",
        "kind": "value",
        "name": "makeWithYMD",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYMD(~year=2023, ~month=1, ~day=20)\n  // 1676851200000\n  \n  Date.UTC.makeWithYMD(~year=2023, ~month=1, ~day=-1)\n  // 1675036800000\n  \n  Date.UTC.makeWithYMD(~year=2023, ~month=1, ~day=29)\n  // 1677628800000\n  ```"
        ],
        "signature": "let makeWithYMD: (~year: int, ~month: int, ~day: int) => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.UTC.makeWithYMDH",
        "kind": "value",
        "name": "makeWithYMDH",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=16)\n  // 1676908800000\n  \n  Date.UTC.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=24)\n  // 1676937600000\n  \n  Date.UTC.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=-1)\n  // 1676847600000\n  ```"
        ],
        "signature": "let makeWithYMDH: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n) => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.UTC.makeWithYMDHM",
        "kind": "value",
        "name": "makeWithYMDHM",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40)\n  // 1676911200000\n  \n  Date.UTC.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=60)\n  // 1676912400000\n  \n  Date.UTC.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=-1)\n  // 1676908740000\n  ```"
        ],
        "signature": "let makeWithYMDHM: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n) => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.UTC.makeWithYMDHMS",
        "kind": "value",
        "name": "makeWithYMDHMS",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=0)\n  // 1676911200000\n  \n  Date.UTC.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=60)\n  // 1676911260000\n  \n  Date.UTC.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=-1)\n  // 1676911199000\n  ```"
        ],
        "signature": "let makeWithYMDHMS: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n) => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.UTC.makeWithYMDHMSM",
        "kind": "value",
        "name": "makeWithYMDHMSM",
        "docstrings": [
          "Returns the time, in milliseconds, since UNIX epoch (January 1, 1970 00:00:00 UTC).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n  ## Examples\n  ```rescript\n  Date.UTC.makeWithYMDHMSM(\n    ~year=2023,\n    ~month=1,\n    ~day=20,\n    ~hours=16,\n    ~minutes=40,\n    ~seconds=0,\n    ~milliseconds=0,\n  )->Console.log\n  // 1676911200000\n  \n  Date.UTC.makeWithYMDHMSM(\n    ~year=2023,\n    ~month=1,\n    ~day=20,\n    ~hours=16,\n    ~minutes=40,\n    ~seconds=0,\n    ~milliseconds=1000,\n  )->Console.log\n  // 1676911201000\n  \n  Date.UTC.makeWithYMDHMSM(\n    ~year=2023,\n    ~month=1,\n    ~day=20,\n    ~hours=16,\n    ~minutes=40,\n    ~seconds=0,\n    ~milliseconds=-1,\n  )->Console.log\n  // 1676911199999\n  ```"
        ],
        "signature": "let makeWithYMDHMSM: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => msSinceEpoch"
      }
    ]
  },
  "stdlib/biguint64array": {
    "id": "Stdlib.BigUint64Array",
    "name": "BigUint64Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.BigUint64Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `BigUint64Array` typed array represents an array of 64-bit unsigned integers in platform byte order. See [BigUint64Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array)"
        ],
        "signature": "type t = TypedArray.t<bigint>"
      },
      {
        "id": "Stdlib.BigUint64Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `BigUint64Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)"
        ],
        "signature": "let fromArray: array<bigint> => t"
      },
      {
        "id": "Stdlib.BigUint64Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `BigUint64Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.BigUint64Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `BigUint64Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.BigUint64Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `BigUint64Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.BigUint64Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `BigUint64Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.BigUint64Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `BigUint64Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => bigint=?) => t"
      },
      {
        "id": "Stdlib.BigUint64Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `BigUint64Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => bigint) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.BigUint64Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(bigUintArray)` ignores the provided bigUintArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/bigint64array": {
    "id": "Stdlib.BigInt64Array",
    "name": "BigInt64Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.BigInt64Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `BigInt64Array` typed array represents an array of 64-bit signed integers in platform byte order. See [BigInt64Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array)"
        ],
        "signature": "type t = TypedArray.t<bigint>"
      },
      {
        "id": "Stdlib.BigInt64Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `BigInt64Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)"
        ],
        "signature": "let fromArray: array<bigint> => t"
      },
      {
        "id": "Stdlib.BigInt64Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `BigInt64Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.BigInt64Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `BigInt64Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.BigInt64Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `BigInt64Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.BigInt64Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `BigInt64Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.BigInt64Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `BigInt64Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => bigint=?) => t"
      },
      {
        "id": "Stdlib.BigInt64Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `BigInt64Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => bigint) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.BigInt64Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(bigIntArray)` ignores the provided bigIntArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/uint8clampedarray": {
    "id": "Stdlib.Uint8ClampedArray",
    "name": "Uint8ClampedArray",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint8ClampedArray.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped to 0-255. See [Uint8ClampedArray on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Uint8ClampedArray` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Uint8ClampedArray` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Uint8ClampedArray` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Uint8ClampedArray` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Uint8ClampedArray` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Uint8ClampedArray` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Uint8ClampedArray` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Uint8ClampedArray.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(uintArray)` ignores the provided uintArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/uint32array": {
    "id": "Stdlib.Uint32Array",
    "name": "Uint32Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint32Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Uint32Array` typed array represents an array of 32-bit unsigned integers in platform byte order. See [Uint32Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Uint32Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Uint32Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Uint32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Uint32Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Uint32Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Uint32Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint32Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Uint32Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Uint32Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Uint32Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Uint32Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Uint32Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Uint32Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Uint32Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(uintArray)` ignores the provided uintArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/uint16array": {
    "id": "Stdlib.Uint16Array",
    "name": "Uint16Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint16Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Uint16Array` typed array represents an array of 16-bit unsigned integers in platform byte order. See [Uint16Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Uint16Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Uint16Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Uint16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Uint16Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Uint16Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Uint16Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint16Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Uint16Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Uint16Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Uint16Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Uint16Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Uint16Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Uint16Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Uint16Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(uintArray)` ignores the provided uintArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/uint8array": {
    "id": "Stdlib.Uint8Array",
    "name": "Uint8Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Uint8Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Uint8Array` typed array represents an array of 8-bit unsigned integers. See [Uint8Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Uint8Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Uint8Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Uint8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Uint8Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Uint8Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Uint8Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint8Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Uint8Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Uint8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Uint8Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Uint8Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Uint8Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Uint8Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Uint8Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Uint8Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(uintArray)` ignores the provided uintArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/int32array": {
    "id": "Stdlib.Int32Array",
    "name": "Int32Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int32Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Int32Array` typed array represents an array of twos-complemenet 32-bit signed integers in platform byte order. See [Int32Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Int32Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Int32Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Int32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Int32Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Int32Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Int32Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int32Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Int32Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Int32Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Int32Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Int32Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Int32Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Int32Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Int32Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(intArray)` ignores the provided intArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/int16array": {
    "id": "Stdlib.Int16Array",
    "name": "Int16Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int16Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in platform byte order. See [Int16Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Int16Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Int16Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Int16Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Int16Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Int16Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Int16Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int16Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Int16Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int16Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Int16Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Int16Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Int16Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Int16Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Int16Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Int16Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(intArray)` ignores the provided intArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/int8array": {
    "id": "Stdlib.Int8Array",
    "name": "Int8Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Int8Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. See [Int8Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array)"
        ],
        "signature": "type t = TypedArray.t<int>"
      },
      {
        "id": "Stdlib.Int8Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Int8Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)"
        ],
        "signature": "let fromArray: array<int> => t"
      },
      {
        "id": "Stdlib.Int8Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Int8Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Int8Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Int8Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int8Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Int8Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Int8Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Int8Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Int8Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Int8Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => int=?) => t"
      },
      {
        "id": "Stdlib.Int8Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Int8Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => int) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Int8Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(intArray)` ignores the provided intArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/float64array": {
    "id": "Stdlib.Float64Array",
    "name": "Float64Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Float64Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Float64Array` typed array represents an array of 64-bit floating point numbers in platform byte order. See [Float64Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array)"
        ],
        "signature": "type t = TypedArray.t<float>"
      },
      {
        "id": "Stdlib.Float64Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Float64Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)"
        ],
        "signature": "let fromArray: array<float> => t"
      },
      {
        "id": "Stdlib.Float64Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Float64Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Float64Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Float64Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Float64Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Float64Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Float64Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Float64Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Float64Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Float64Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => float=?) => t"
      },
      {
        "id": "Stdlib.Float64Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Float64Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => float) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Float64Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(floatArray)` ignores the provided floatArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/float32array": {
    "id": "Stdlib.Float32Array",
    "name": "Float32Array",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Float32Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The `Float32Array` typed array represents an array of 32-bit floating point numbers in platform byte order. See [Float32Array on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array)"
        ],
        "signature": "type t = TypedArray.t<float>"
      },
      {
        "id": "Stdlib.Float32Array.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray` creates a `Float32Array` from an array of values. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)"
        ],
        "signature": "let fromArray: array<float> => t"
      },
      {
        "id": "Stdlib.Float32Array.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [
          "`fromBuffer` creates a `Float32Array` from an `ArrayBuffer.t`. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBuffer: (ArrayBuffer.t, ~byteOffset: int=?, ~length: int=?) => t"
      },
      {
        "id": "Stdlib.Float32Array.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [
          "`fromBufferToEnd` creates a `Float32Array` from an `ArrayBuffer.t`, starting at a particular offset and continuing through to the end. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Float32Array.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [
          "`fromBufferWithRange` creates a `Float32Array` from an `ArrayBuffer.t`, starting at a particular offset and consuming `length` **bytes**. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t",
        "deprecated": "Use `fromBuffer` instead"
      },
      {
        "id": "Stdlib.Float32Array.fromLength",
        "kind": "value",
        "name": "fromLength",
        "docstrings": [
          "`fromLength` creates a zero-initialized `Float32Array` to hold the specified count of numbers; this is **not** a byte length. See [TypedArray constructor on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array)\n\n**Note:** This is a potentially unsafe operation. Ensure the buffer is large enough and only accessed within its bounds."
        ],
        "signature": "let fromLength: int => t"
      },
      {
        "id": "Stdlib.Float32Array.fromArrayLikeOrIterable",
        "kind": "value",
        "name": "fromArrayLikeOrIterable",
        "docstrings": [
          "`fromArrayLikeOrIterable` creates a `Float32Array` from an array-like or iterable object. See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterable: ('a, ~map: ('b, int) => float=?) => t"
      },
      {
        "id": "Stdlib.Float32Array.fromArrayLikeOrIterableWithMap",
        "kind": "value",
        "name": "fromArrayLikeOrIterableWithMap",
        "docstrings": [
          "`fromArrayLikeOrIterableWithMap` creates a `Float32Array` from an array-like or iterable object and applies the mapping function to each item. The mapping function expects (value, index). See [TypedArray.from on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from)"
        ],
        "signature": "let fromArrayLikeOrIterableWithMap: ('a, ('b, int) => float) => t",
        "deprecated": "Use `fromArrayLikeOrIterable` instead"
      },
      {
        "id": "Stdlib.Float32Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(floatArray)` ignores the provided floatArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/typedarray": {
    "id": "Stdlib.TypedArray",
    "name": "TypedArray",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.TypedArray.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.get",
        "kind": "value",
        "name": "get",
        "docstrings": [],
        "signature": "let get: (t<'a>, int) => option<'a>"
      },
      {
        "id": "Stdlib.TypedArray.set",
        "kind": "value",
        "name": "set",
        "docstrings": [],
        "signature": "let set: (t<'a>, int, 'a) => unit"
      },
      {
        "id": "Stdlib.TypedArray.buffer",
        "kind": "value",
        "name": "buffer",
        "docstrings": [],
        "signature": "let buffer: t<'a> => ArrayBuffer.t"
      },
      {
        "id": "Stdlib.TypedArray.byteLength",
        "kind": "value",
        "name": "byteLength",
        "docstrings": [],
        "signature": "let byteLength: t<'a> => int"
      },
      {
        "id": "Stdlib.TypedArray.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "docstrings": [],
        "signature": "let byteOffset: t<'a> => int"
      },
      {
        "id": "Stdlib.TypedArray.setArray",
        "kind": "value",
        "name": "setArray",
        "docstrings": [],
        "signature": "let setArray: (t<'a>, array<'a>) => unit"
      },
      {
        "id": "Stdlib.TypedArray.setArrayFrom",
        "kind": "value",
        "name": "setArrayFrom",
        "docstrings": [],
        "signature": "let setArrayFrom: (t<'a>, array<'a>, int) => unit"
      },
      {
        "id": "Stdlib.TypedArray.length",
        "kind": "value",
        "name": "length",
        "docstrings": [],
        "signature": "let length: t<'a> => int"
      },
      {
        "id": "Stdlib.TypedArray.copyAllWithin",
        "kind": "value",
        "name": "copyAllWithin",
        "docstrings": [],
        "signature": "let copyAllWithin: (t<'a>, ~target: int) => array<'a>"
      },
      {
        "id": "Stdlib.TypedArray.copyWithinToEnd",
        "kind": "value",
        "name": "copyWithinToEnd",
        "docstrings": [],
        "signature": "let copyWithinToEnd: (t<'a>, ~target: int, ~start: int) => array<'a>",
        "deprecated": "Use `copyWithin` instead"
      },
      {
        "id": "Stdlib.TypedArray.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "docstrings": [],
        "signature": "let copyWithin: (t<'a>, ~target: int, ~start: int, ~end: int=?) => array<'a>"
      },
      {
        "id": "Stdlib.TypedArray.fillAll",
        "kind": "value",
        "name": "fillAll",
        "docstrings": [],
        "signature": "let fillAll: (t<'a>, 'a) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.fillToEnd",
        "kind": "value",
        "name": "fillToEnd",
        "docstrings": [],
        "signature": "let fillToEnd: (t<'a>, 'a, ~start: int) => t<'a>",
        "deprecated": "Use `fill` instead"
      },
      {
        "id": "Stdlib.TypedArray.fill",
        "kind": "value",
        "name": "fill",
        "docstrings": [],
        "signature": "let fill: (t<'a>, 'a, ~start: int, ~end: int=?) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.reverse",
        "kind": "value",
        "name": "reverse",
        "docstrings": [],
        "signature": "let reverse: t<'a> => unit"
      },
      {
        "id": "Stdlib.TypedArray.toReversed",
        "kind": "value",
        "name": "toReversed",
        "docstrings": [],
        "signature": "let toReversed: t<'a> => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.sort",
        "kind": "value",
        "name": "sort",
        "docstrings": [],
        "signature": "let sort: (t<'a>, ('a, 'a) => Ordering.t) => unit"
      },
      {
        "id": "Stdlib.TypedArray.toSorted",
        "kind": "value",
        "name": "toSorted",
        "docstrings": [],
        "signature": "let toSorted: (t<'a>, ('a, 'a) => Ordering.t) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.with",
        "kind": "value",
        "name": "with",
        "docstrings": [],
        "signature": "let with: (t<'a>, int, 'a) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.includes",
        "kind": "value",
        "name": "includes",
        "docstrings": [],
        "signature": "let includes: (t<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.TypedArray.indexOf",
        "kind": "value",
        "name": "indexOf",
        "docstrings": [],
        "signature": "let indexOf: (t<'a>, 'a) => int"
      },
      {
        "id": "Stdlib.TypedArray.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "docstrings": [],
        "signature": "let indexOfFrom: (t<'a>, 'a, int) => int"
      },
      {
        "id": "Stdlib.TypedArray.joinWith",
        "kind": "value",
        "name": "joinWith",
        "docstrings": [],
        "signature": "let joinWith: (t<'a>, string) => string"
      },
      {
        "id": "Stdlib.TypedArray.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "docstrings": [],
        "signature": "let lastIndexOf: (t<'a>, 'a) => int"
      },
      {
        "id": "Stdlib.TypedArray.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "docstrings": [],
        "signature": "let lastIndexOfFrom: (t<'a>, 'a, int) => int"
      },
      {
        "id": "Stdlib.TypedArray.slice",
        "kind": "value",
        "name": "slice",
        "docstrings": [],
        "signature": "let slice: (t<'a>, ~start: int, ~end: int=?) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.sliceToEnd",
        "kind": "value",
        "name": "sliceToEnd",
        "docstrings": [],
        "signature": "let sliceToEnd: (t<'a>, ~start: int) => t<'a>",
        "deprecated": "Use `slice` instead"
      },
      {
        "id": "Stdlib.TypedArray.copy",
        "kind": "value",
        "name": "copy",
        "docstrings": [],
        "signature": "let copy: t<'a> => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.subarray",
        "kind": "value",
        "name": "subarray",
        "docstrings": [],
        "signature": "let subarray: (t<'a>, ~start: int, ~end: int=?) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.subarrayToEnd",
        "kind": "value",
        "name": "subarrayToEnd",
        "docstrings": [],
        "signature": "let subarrayToEnd: (t<'a>, ~start: int) => t<'a>",
        "deprecated": "Use `subarray` instead"
      },
      {
        "id": "Stdlib.TypedArray.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [],
        "signature": "let toString: t<'a> => string"
      },
      {
        "id": "Stdlib.TypedArray.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [],
        "signature": "let toLocaleString: t<'a> => string"
      },
      {
        "id": "Stdlib.TypedArray.every",
        "kind": "value",
        "name": "every",
        "docstrings": [],
        "signature": "let every: (t<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.TypedArray.everyWithIndex",
        "kind": "value",
        "name": "everyWithIndex",
        "docstrings": [],
        "signature": "let everyWithIndex: (t<'a>, ('a, int) => bool) => bool"
      },
      {
        "id": "Stdlib.TypedArray.filter",
        "kind": "value",
        "name": "filter",
        "docstrings": [],
        "signature": "let filter: (t<'a>, 'a => bool) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.filterWithIndex",
        "kind": "value",
        "name": "filterWithIndex",
        "docstrings": [],
        "signature": "let filterWithIndex: (t<'a>, ('a, int) => bool) => t<'a>"
      },
      {
        "id": "Stdlib.TypedArray.find",
        "kind": "value",
        "name": "find",
        "docstrings": [],
        "signature": "let find: (t<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.TypedArray.findWithIndex",
        "kind": "value",
        "name": "findWithIndex",
        "docstrings": [],
        "signature": "let findWithIndex: (t<'a>, ('a, int) => bool) => option<'a>"
      },
      {
        "id": "Stdlib.TypedArray.findLast",
        "kind": "value",
        "name": "findLast",
        "docstrings": [],
        "signature": "let findLast: (t<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.TypedArray.findLastWithIndex",
        "kind": "value",
        "name": "findLastWithIndex",
        "docstrings": [],
        "signature": "let findLastWithIndex: (t<'a>, ('a, int) => bool) => option<'a>"
      },
      {
        "id": "Stdlib.TypedArray.findIndex",
        "kind": "value",
        "name": "findIndex",
        "docstrings": [],
        "signature": "let findIndex: (t<'a>, 'a => bool) => int"
      },
      {
        "id": "Stdlib.TypedArray.findIndexWithIndex",
        "kind": "value",
        "name": "findIndexWithIndex",
        "docstrings": [],
        "signature": "let findIndexWithIndex: (t<'a>, ('a, int) => bool) => int"
      },
      {
        "id": "Stdlib.TypedArray.findLastIndex",
        "kind": "value",
        "name": "findLastIndex",
        "docstrings": [],
        "signature": "let findLastIndex: (t<'a>, 'a => bool) => int"
      },
      {
        "id": "Stdlib.TypedArray.findLastIndexWithIndex",
        "kind": "value",
        "name": "findLastIndexWithIndex",
        "docstrings": [],
        "signature": "let findLastIndexWithIndex: (t<'a>, ('a, int) => bool) => int"
      },
      {
        "id": "Stdlib.TypedArray.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [],
        "signature": "let forEach: (t<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.TypedArray.forEachWithIndex",
        "kind": "value",
        "name": "forEachWithIndex",
        "docstrings": [],
        "signature": "let forEachWithIndex: (t<'a>, ('a, int) => unit) => unit"
      },
      {
        "id": "Stdlib.TypedArray.map",
        "kind": "value",
        "name": "map",
        "docstrings": [],
        "signature": "let map: (t<'a>, 'a => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.TypedArray.mapWithIndex",
        "kind": "value",
        "name": "mapWithIndex",
        "docstrings": [],
        "signature": "let mapWithIndex: (t<'a>, ('a, int) => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.TypedArray.reduce",
        "kind": "value",
        "name": "reduce",
        "docstrings": [],
        "signature": "let reduce: (t<'a>, ('b, 'a) => 'b, 'b) => 'b"
      },
      {
        "id": "Stdlib.TypedArray.reduceWithIndex",
        "kind": "value",
        "name": "reduceWithIndex",
        "docstrings": [],
        "signature": "let reduceWithIndex: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b"
      },
      {
        "id": "Stdlib.TypedArray.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "docstrings": [],
        "signature": "let reduceRight: (t<'a>, ('b, 'a) => 'b, 'b) => 'b"
      },
      {
        "id": "Stdlib.TypedArray.reduceRightWithIndex",
        "kind": "value",
        "name": "reduceRightWithIndex",
        "docstrings": [],
        "signature": "let reduceRightWithIndex: (t<'a>, ('b, 'a, int) => 'b, 'b) => 'b"
      },
      {
        "id": "Stdlib.TypedArray.some",
        "kind": "value",
        "name": "some",
        "docstrings": [],
        "signature": "let some: (t<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.TypedArray.someWithIndex",
        "kind": "value",
        "name": "someWithIndex",
        "docstrings": [],
        "signature": "let someWithIndex: (t<'a>, ('a, int) => bool) => bool"
      },
      {
        "id": "Stdlib.TypedArray.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(typedArray)` ignores the provided typedArray and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/arraybuffer": {
    "id": "Stdlib.ArrayBuffer",
    "name": "ArrayBuffer",
    "docstrings": [
      "Functions for interacting with JavaScript ArrayBuffer.\nSee: [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)."
    ],
    "items": [
      {
        "id": "Stdlib.ArrayBuffer.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "Type representing an ArrayBuffer object used to represent a generic raw binary data buffer."
        ],
        "signature": "type t"
      },
      {
        "id": "Stdlib.ArrayBuffer.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(length)` creates a new ArrayBuffer with the specified length in bytes.\nSee [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer) on MDN.\n\n## Examples\n\n```rescript\nlet buffer = ArrayBuffer.make(8)\nArrayBuffer.byteLength(buffer) == 8\n```\n\n## Exceptions\n\n- `RangeError`: If `length` is larger than `Number.MAX_SAFE_INTEGER` or negative."
        ],
        "signature": "let make: int => t"
      },
      {
        "id": "Stdlib.ArrayBuffer.byteLength",
        "kind": "value",
        "name": "byteLength",
        "docstrings": [
          "`byteLength(arrayBuffer)` returns the size, in bytes, of the ArrayBuffer.\nSee [`ArrayBuffer.byteLength`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength) on MDN.\n\n## Examples\n\n```rescript\nlet buffer = ArrayBuffer.make(16)\nArrayBuffer.byteLength(buffer) == 16\n```"
        ],
        "signature": "let byteLength: t => int"
      },
      {
        "id": "Stdlib.ArrayBuffer.slice",
        "kind": "value",
        "name": "slice",
        "docstrings": [
          "`slice(arrayBuffer, ~start, ~end)` returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from `start`, inclusive, up to `end`, exclusive.\nSee [`ArrayBuffer.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice) on MDN.\n\n## Examples\n\n```rescript\nlet buffer = ArrayBuffer.make(16)\nlet sliced = buffer->ArrayBuffer.slice(~start=4, ~end=12)\nArrayBuffer.byteLength(sliced) == 8\n```"
        ],
        "signature": "let slice: (t, ~start: int=?, ~end: int=?) => t"
      },
      {
        "id": "Stdlib.ArrayBuffer.sliceToEnd",
        "kind": "value",
        "name": "sliceToEnd",
        "docstrings": [],
        "signature": "let sliceToEnd: (t, ~start: int) => t",
        "deprecated": "Use `slice` instead."
      }
    ]
  },
  "stdlib/weakset": {
    "id": "Stdlib.WeakSet",
    "name": "WeakSet",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.WeakSet.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t<'a>"
      },
      {
        "id": "Stdlib.WeakSet.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: unit => t<'a>"
      },
      {
        "id": "Stdlib.WeakSet.add",
        "kind": "value",
        "name": "add",
        "docstrings": [],
        "signature": "let add: (t<'a>, 'a) => t<'a>"
      },
      {
        "id": "Stdlib.WeakSet.delete",
        "kind": "value",
        "name": "delete",
        "docstrings": [],
        "signature": "let delete: (t<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.WeakSet.has",
        "kind": "value",
        "name": "has",
        "docstrings": [],
        "signature": "let has: (t<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.WeakSet.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(weakSet)` ignores the provided weakSet and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/set": {
    "id": "Stdlib.Set",
    "name": "Set",
    "docstrings": [
      "Bindings to the mutable JavaScript `Set`.\n\nSee [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.Set.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an instance of `Set`."],
        "signature": "type t<'a>"
      },
      {
        "id": "Stdlib.Set.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new, mutable JavaScript `Set`. A `Set` is a collection of unique values.\n\nSee [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) on MDN.\n\n\n\n## Examples\n```rescript\n// You can annotate the type of your set if you want to\nlet mySet: Set.t<string> = Set.make()\n\n// Or you can let ReScript infer what's in your Set\nlet set = Set.make()\nset->Set.add(\"Fine name\") // Inferred as Set.t<string>\n```\n\n## Alternatives\nA JavaScript `Set` is mutable. If you're looking for an immutable alternative, check out `Belt.Set`."
        ],
        "signature": "let make: unit => t<'a>"
      },
      {
        "id": "Stdlib.Set.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "Turns an array of values into a Set. Meaning only unique values are preserved.\n\n## Examples\n```rescript\ntype languages = ReScript | JavaScript | TypeScript\nlet languageRank = [ReScript, JavaScript, TypeScript]\n\nlet set = Set.fromArray(languageRank) // Set.t<languages>\n\nswitch set->Set.has(ReScript) {\n| true => Console.log(\"Yay, ReScript is in there!\")\n| false => Console.log(\"Uh-oh, something is _terribly_ wrong with this program... abort.\")\n}\n```"
        ],
        "signature": "let fromArray: array<'a> => t<'a>"
      },
      {
        "id": "Stdlib.Set.fromIterator",
        "kind": "value",
        "name": "fromIterator",
        "docstrings": [
          "Turns an iterator into a `Set`.\n\n## Examples\n\n```rescript\n// Let's pretend we have an interator\nlet iterator: Iterator.t<string> = %raw(`\n  (() => {\n    var array1 = ['a', 'b', 'c'];\n    var iterator1 = array1[Symbol.iterator]();\n    return iterator1\n  })()\n`)\n\niterator\n->Set.fromIterator\n->Set.size == 3\n```"
        ],
        "signature": "let fromIterator: Iterator.t<'a> => t<'a>"
      },
      {
        "id": "Stdlib.Set.size",
        "kind": "value",
        "name": "size",
        "docstrings": [
          "Returns the size, the number of unique values, of the set.\n\nSee [`Set.prototype.size`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\n\nset->Set.add(\"someValue\")\nset->Set.add(\"someValue\")\nset->Set.add(\"someValue2\")\n\nlet size = set->Set.size // 2\n```"
        ],
        "signature": "let size: t<'a> => int"
      },
      {
        "id": "Stdlib.Set.clear",
        "kind": "value",
        "name": "clear",
        "docstrings": [
          "Clears all entries in the set.\n\nSee [`Set.clear`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\n\nset->Set.add(\"someKey\")\nset->Set.size // 1\n\nset->Set.clear\nset->Set.size // 0\n```"
        ],
        "signature": "let clear: t<'a> => unit"
      },
      {
        "id": "Stdlib.Set.add",
        "kind": "value",
        "name": "add",
        "docstrings": [
          "Adds a new value to the set.\n\nSee [`Set.add`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\nset->Set.add(\"someValue\")\n```"
        ],
        "signature": "let add: (t<'a>, 'a) => unit"
      },
      {
        "id": "Stdlib.Set.delete",
        "kind": "value",
        "name": "delete",
        "docstrings": [
          "Deletes the provided `value` from the set. Returns a `bool` for whether the value existed, and was deleted.\n\nSee [`Set.delete`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\nset->Set.add(\"someValue\")\nlet didDeleteValue = set->Set.delete(\"someValue\")\nConsole.log(didDeleteValue) // Logs `true` to the console, becuase the set had the value, so it was successfully deleted\n\nlet didDeleteValue = set->Set.delete(\"someNonExistantKey\")\nConsole.log(didDeleteValue) // Logs `false` to the console, becuase the value did not exist in the set\n```"
        ],
        "signature": "let delete: (t<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.Set.has",
        "kind": "value",
        "name": "has",
        "docstrings": [
          "Checks whether the set has a specific value.\n\nSee [`Set.has`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\nset->Set.add(\"someValue\")\n\nswitch set->Set.has(\"someValue\") {\n| false => Console.log(\"Nope, didn't have it.\")\n| true => Console.log(\"Yay, we have the value!\")\n}\n```"
        ],
        "signature": "let has: (t<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.Set.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "Iterates through all values of the set.\n\nSee [`Set.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\nset->Set.add(\"someValue\")\nset->Set.add(\"someValue2\")\n\nset->Set.forEach(value => {\n  Console.log(value)\n})\n```"
        ],
        "signature": "let forEach: (t<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Set.values",
        "kind": "value",
        "name": "values",
        "docstrings": [
          "Returns an iterator that holds all values of the set.\n\nSee [`Set.values`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values) on MDN.\n\n## Examples\n```rescript\nlet set = Set.make()\nset->Set.add(\"someValue\")\nset->Set.add(\"anotherValue\")\n\nlet values = set->Set.values\n\n// Logs the first value\nConsole.log(Iterator.next(values).value)\n\n// You can also turn the iterator into an array.\n// Remember that an iterator consumes values. We'll need a fresh values iterator to get an array of all values, since we consumed a value via `next` above already.\nConsole.log(set->Set.values->Iterator.toArray)\n```"
        ],
        "signature": "let values: t<'a> => Iterator.t<'a>"
      },
      {
        "id": "Stdlib.Set.difference",
        "kind": "value",
        "name": "difference",
        "docstrings": [
          "Returns a new set with the values of the set that are not in the other set.\n\nSee [`Set.difference`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/difference) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"orange\", \"banana\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nset1->Set.difference(set2) // Set.fromArray([\"orange\"])\n```"
        ],
        "signature": "let difference: (t<'a>, t<'a>) => t<'a>"
      },
      {
        "id": "Stdlib.Set.symmetricDifference",
        "kind": "value",
        "name": "symmetricDifference",
        "docstrings": [
          "Returns a new set with the values containing the values which are in either the set, but not in both.\n\nSee [`Set.symmetricDifference`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"orange\", \"banana\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nset1->Set.symmetricDifference(set2) // Set.fromArray([\"orange\", \"pear\"])\n```"
        ],
        "signature": "let symmetricDifference: (t<'a>, t<'a>) => t<'a>"
      },
      {
        "id": "Stdlib.Set.intersection",
        "kind": "value",
        "name": "intersection",
        "docstrings": [
          "Returns a new set with the values containing the values which are in both the set and the other set.\n\nSee [`Set.intersection`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/intersection) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"orange\", \"banana\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nset1->Set.intersection(set2) // Set.fromArray([\"apple\", \"banana\"])\n```"
        ],
        "signature": "let intersection: (t<'a>, t<'a>) => t<'a>"
      },
      {
        "id": "Stdlib.Set.isDisjointFrom",
        "kind": "value",
        "name": "isDisjointFrom",
        "docstrings": [
          "Returns a bool indicating if this set has no elements in common with the given set.\n\nSee [`Set.isDisjointFrom`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isDisjointFrom) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"orange\", \"banana\"])\nlet set2 = Set.fromArray([\"kiwi\", \"melon\", \"pear\"])\nset1->Set.isDisjointFrom(set2) // true\n```"
        ],
        "signature": "let isDisjointFrom: (t<'a>, t<'a>) => bool"
      },
      {
        "id": "Stdlib.Set.isSubsetOf",
        "kind": "value",
        "name": "isSubsetOf",
        "docstrings": [
          "Returns a bool indicating if the all values in the set are in the given set.\n\nSee [`Set.isSubsetOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSubsetOf) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"banana\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nset1->Set.isSubsetOf(set2) // true\n```"
        ],
        "signature": "let isSubsetOf: (t<'a>, t<'a>) => bool"
      },
      {
        "id": "Stdlib.Set.isSupersetOf",
        "kind": "value",
        "name": "isSupersetOf",
        "docstrings": [
          "Returns a bool indicating if the all values in the given set are in the set.\n\nSee [`Set.isSupersetOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/isSupersetOf) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\"])\nset1->Set.isSupersetOf(set2) // true\n```"
        ],
        "signature": "let isSupersetOf: (t<'a>, t<'a>) => bool"
      },
      {
        "id": "Stdlib.Set.union",
        "kind": "value",
        "name": "union",
        "docstrings": [
          "Returns a new set with the values of the set that are in both the set and the other set.\n\nSee [`Set.union`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union) on MDN.\n\n## Examples\n```rescript\nlet set1 = Set.fromArray([\"apple\", \"orange\", \"banana\"])\nlet set2 = Set.fromArray([\"apple\", \"banana\", \"pear\"])\nset1->Set.union(set2) // Set.fromArray([\"apple\", \"orange\", \"banana\", \"pear\"])\n```"
        ],
        "signature": "let union: (t<'a>, t<'a>) => t<'a>"
      },
      {
        "id": "Stdlib.Set.toArray",
        "kind": "value",
        "name": "toArray",
        "docstrings": [
          "`toArray(set)` returns an array of all values of the set.\n\nSee [`Array.from`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from) on MDN.\n\n## Examples\n```rescript\nlet set = Set.fromArray([\"apple\", \"orange\", \"apple\", \"banana\"])\nset->Set.toArray // [\"apple\", \"orange\", \"banana\"]\n```"
        ],
        "signature": "let toArray: t<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Set.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(set)` ignores the provided set and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/weakmap": {
    "id": "Stdlib.WeakMap",
    "name": "WeakMap",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.WeakMap.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t<'k, 'v>"
      },
      {
        "id": "Stdlib.WeakMap.make",
        "kind": "value",
        "name": "make",
        "docstrings": [],
        "signature": "let make: unit => t<'k, 'v>"
      },
      {
        "id": "Stdlib.WeakMap.get",
        "kind": "value",
        "name": "get",
        "docstrings": [],
        "signature": "let get: (t<'k, 'v>, 'k) => option<'v>"
      },
      {
        "id": "Stdlib.WeakMap.has",
        "kind": "value",
        "name": "has",
        "docstrings": [],
        "signature": "let has: (t<'k, 'v>, 'k) => bool"
      },
      {
        "id": "Stdlib.WeakMap.set",
        "kind": "value",
        "name": "set",
        "docstrings": [],
        "signature": "let set: (t<'k, 'v>, 'k, 'v) => t<'k, 'v>"
      },
      {
        "id": "Stdlib.WeakMap.delete",
        "kind": "value",
        "name": "delete",
        "docstrings": [],
        "signature": "let delete: (t<'k, 'v>, 'k) => bool"
      },
      {
        "id": "Stdlib.WeakMap.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(weakMap)` ignores the provided weakMap and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'k, 'v> => unit"
      }
    ]
  },
  "stdlib/map": {
    "id": "Stdlib.Map",
    "name": "Map",
    "docstrings": [
      "Bindings to the mutable JavaScript `Map`.\n\nSee [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.Map.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an instance of `Map`."],
        "signature": "type t<'k, 'v>"
      },
      {
        "id": "Stdlib.Map.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new, mutable JavaScript `Map`. A `Map` can have any values as both keys and values.\n\nSee [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) on MDN.\n\n\n\n## Examples\n```rescript\n`make()`\n// You can annotate the type of your map if you want to\nlet myMap: Map.t<string, int> = Map.make()\n\n// Or you can let ReScript infer what's in your map\nlet map = Map.make()\nmap->Map.set(\"lang\", \"ReScript\") // Inferred as Map.t<string, string>\n```\n\n## Alternatives\nA JavaScript `Map` is mutable. If you're looking for an immutable alternative, check out`Belt.Map`."
        ],
        "signature": "let make: unit => t<'k, 'v>"
      },
      {
        "id": "Stdlib.Map.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "Turns an array of key/value pairs into a Map.\n\n## Examples\n```rescript\ntype languages = ReScript | JavaScript | TypeScript\nlet languageRank = [(ReScript, 1), (JavaScript, 2), (TypeScript, 3)]\n\nlet map = Map.fromArray(languageRank) // Map.t<languages, int>\n\nswitch map->Map.get(ReScript) {\n| Some(1) => Console.log(\"Yay, ReScript is #1!\")\n| _ => Console.log(\"Uh-oh, something is _terribly_ wrong with this program... abort.\")\n}\n```"
        ],
        "signature": "let fromArray: array<('k, 'v)> => t<'k, 'v>"
      },
      {
        "id": "Stdlib.Map.fromIterator",
        "kind": "value",
        "name": "fromIterator",
        "docstrings": [
          "Turns an iterator in the shape of `('key, 'value)` into a `Map`.\n\n## Examples\n\n```rescript\n// Let's pretend we have an interator in the correct shape\nlet iterator: Iterator.t<(string, string)> = %raw(`\n  (() => {\n    var map1 = new Map();\n\n    map1.set('first', '1');\n    map1.set('second', '2');\n\n    var iterator1 = map1[Symbol.iterator]();\n    return iterator1;\n  })()\n`)\n\niterator\n->Map.fromIterator\n->Map.size == 2\n```"
        ],
        "signature": "let fromIterator: Iterator.t<('k, 'v)> => t<'k, 'v>"
      },
      {
        "id": "Stdlib.Map.size",
        "kind": "value",
        "name": "size",
        "docstrings": [
          "Returns the size, the number of key/value pairs, of the map.\n\n## Examples\n```rescript\nlet map = Map.make()\n\nmap->Map.set(\"someKey\", \"someValue\")\n\nlet size = map->Map.size // 1\n```"
        ],
        "signature": "let size: t<'k, 'v> => int"
      },
      {
        "id": "Stdlib.Map.clear",
        "kind": "value",
        "name": "clear",
        "docstrings": [
          "Clears all entries in the map.\n\n## Examples\n```rescript\nlet map = Map.make()\n\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.size // 1\n\nmap->Map.clear\nmap->Map.size // 0\n```"
        ],
        "signature": "let clear: t<'k, 'v> => unit"
      },
      {
        "id": "Stdlib.Map.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "Iterates through all values of the map.\n\n> Please note that this is *without the keys*, just the values. If you need the key as well, use `Map.forEachWithKey`.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"someKey2\", \"someValue2\")\n\nmap->Map.forEach(value => {\n  Console.log(value)\n})\n```"
        ],
        "signature": "let forEach: (t<'k, 'v>, 'v => unit) => unit"
      },
      {
        "id": "Stdlib.Map.forEachWithKey",
        "kind": "value",
        "name": "forEachWithKey",
        "docstrings": [
          "Iterates through all values of the map, including the key for each value.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"someKey2\", \"someValue2\")\n\nmap->Map.forEachWithKey((value, key) => {\n  Console.log2(value, key)\n})\n```"
        ],
        "signature": "let forEachWithKey: (t<'k, 'v>, ('v, 'k) => unit) => unit"
      },
      {
        "id": "Stdlib.Map.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "Returns the value for a key, if a value exists at that key.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\n\nswitch map->Map.get(\"someKey\") {\n| None => Console.log(\"Nope, didn't have it.\")\n| Some(value) => Console.log2(\"Yay, had the value, and it's:\", value)\n}\n```"
        ],
        "signature": "let get: (t<'k, 'v>, 'k) => option<'v>"
      },
      {
        "id": "Stdlib.Map.has",
        "kind": "value",
        "name": "has",
        "docstrings": [
          "Checks whether the map has a specific key.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\n\nswitch map->Map.has(\"someKey\") {\n| false => Console.log(\"Nope, didn't have it.\")\n| true => Console.log(\"Yay, we have the value!\")\n}\n```"
        ],
        "signature": "let has: (t<'k, 'v>, 'k) => bool"
      },
      {
        "id": "Stdlib.Map.set",
        "kind": "value",
        "name": "set",
        "docstrings": [
          "Sets the provided `value` to the provided `key`.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\n```"
        ],
        "signature": "let set: (t<'k, 'v>, 'k, 'v) => unit"
      },
      {
        "id": "Stdlib.Map.delete",
        "kind": "value",
        "name": "delete",
        "docstrings": [
          "Deletes the provided `key` and its value from the map. Returns a `bool` for whether the key existed, and was deleted.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nlet didDeleteKey = map->Map.delete(\"someKey\")\nConsole.log(didDeleteKey) // Logs `true` to the console, becuase the map had the key, so it was successfully deleted\n\nlet didDeleteKey = map->Map.delete(\"someNonExistantKey\")\nConsole.log(didDeleteKey) // Logs `false` to the console, becuase the key did not exist\n```"
        ],
        "signature": "let delete: (t<'k, 'v>, 'k) => bool"
      },
      {
        "id": "Stdlib.Map.keys",
        "kind": "value",
        "name": "keys",
        "docstrings": [
          "Returns an iterator that holds all keys of the map.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"anotherKey\", \"anotherValue\")\n\nlet keys = map->Map.keys\n\n// Logs the first key\nConsole.log(Iterator.next(keys).value)\n\n// You can also turn the iterator into an array.\n// Remember that an iterator consumes values. We'll need a fresh keys iterator to get an array of all keys, since we consumed a value via `next` above already.\nConsole.log(map->Map.keys->Iterator.toArray)\n```"
        ],
        "signature": "let keys: t<'k, 'v> => Iterator.t<'k>"
      },
      {
        "id": "Stdlib.Map.values",
        "kind": "value",
        "name": "values",
        "docstrings": [
          "Returns an iterator that holds all values of the map.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"anotherKey\", \"anotherValue\")\n\nlet values = map->Map.values\n\n// Logs the first value\nConsole.log(Iterator.next(values).value)\n\n// You can also turn the iterator into an array.\n// Remember that an iterator consumes values. We'll need a fresh values iterator to get an array of all values, since we consumed a value via `next` above already.\nConsole.log(map->Map.values->Iterator.toArray)\n```"
        ],
        "signature": "let values: t<'k, 'v> => Iterator.t<'v>"
      },
      {
        "id": "Stdlib.Map.entries",
        "kind": "value",
        "name": "entries",
        "docstrings": [
          "Returns an iterator that holds all entries of the map.\nAn entry is represented as a tuple of `('key, 'value)`,\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"anotherKey\", \"anotherValue\")\n\nlet entries = map->Map.entries\n\n// Logs the first value\nConsole.log(Iterator.next(entries).value)\n\n// You can also turn the iterator into an array.\n// Remember that an iterator consumes entries. We'll need a fresh entries iterator to get an array of all entries, since we consumed a value via `next` above already.\nConsole.log(map->Map.entries->Iterator.toArray)\n```"
        ],
        "signature": "let entries: t<'k, 'v> => Iterator.t<('k, 'v)>"
      },
      {
        "id": "Stdlib.Map.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(map)` ignores the provided map and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'k, 'v> => unit"
      }
    ]
  },
  "stdlib/asynciterator": {
    "id": "Stdlib.AsyncIterator",
    "name": "AsyncIterator",
    "docstrings": [
      "Bindings to async iterators, a way to do async iteration in JavaScript.\n\nSee [async iterator protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.AsyncIterator.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["The type representing an async iterator."],
        "signature": "type t<'a>"
      },
      {
        "id": "Stdlib.AsyncIterator.value",
        "kind": "type",
        "name": "value",
        "docstrings": [],
        "signature": "type value<'a> = {done: bool, value: option<'a>}"
      },
      {
        "id": "Stdlib.AsyncIterator.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(nextFn)`\n\nCreates an async iterator from a function that returns the next value of the iterator.\n\n## Examples\n\n- A simple example, creating an async iterator that returns 1, 2, 3:\n\n```rescript\nlet context = ref(0)\n\nlet asyncIterator = AsyncIterator.make(async () => {\n  let currentValue = context.contents\n  // Increment current value\n  context := currentValue + 1\n\n  {\n    AsyncIterator.value: Some(currentValue),\n    done: currentValue >= 3,\n  }\n})\n\n// This will log 1, 2, 3\nlet main = async () =>\n  await asyncIterator->AsyncIterator.forEach(value =>\n    switch value {\n    | Some(value) => Console.log(value)\n    | None => ()\n    }\n  )\n\nmain()->ignore\n```"
        ],
        "signature": "let make: (unit => promise<value<'value>>) => t<'value>"
      },
      {
        "id": "Stdlib.AsyncIterator.value",
        "kind": "value",
        "name": "value",
        "docstrings": [
          "`value(value)`\n\nShorthand for creating a value object with the provided value, and the `done` property set to false.\n\n## Examples\n\n```rescript\nlet context = ref(0)\n\nlet asyncIterator = AsyncIterator.make(async () => {\n  let currentValue = context.contents\n  // Increment current value\n  context := currentValue + 1\n\n  if currentValue >= 3 {\n    AsyncIterator.done()\n  } else {\n    AsyncIterator.value(currentValue)\n  }\n})\n```"
        ],
        "signature": "let value: 'value => value<'value>"
      },
      {
        "id": "Stdlib.AsyncIterator.done",
        "kind": "value",
        "name": "done",
        "docstrings": [
          "`done(~finalValue=?)`\n\n Shorthand for creating a value object with the `done` property set to true, and the provided value as the final value, if any.\n\n  ## Examples\n  ```rescript\n  let context = ref(0)\n  \n  let asyncIterator = AsyncIterator.make(async () => {\n    let currentValue = context.contents\n    // Increment current value\n    context := currentValue + 1\n  \n    if currentValue >= 3 {\n      AsyncIterator.done()\n    } else {\n      AsyncIterator.value(currentValue)\n    }\n  })\n  ```"
        ],
        "signature": "let done: (~finalValue: 'value=?) => value<'value>"
      },
      {
        "id": "Stdlib.AsyncIterator.next",
        "kind": "value",
        "name": "next",
        "docstrings": [
          "`next(asyncIterator)`\n\nReturns the next value of the iterator, if any.\n\nSee [async iterator protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols) on MDN.\n\n## Examples\n\n- A simple example, getting the next value:\n\n```rescript\nlet asyncIterator: AsyncIterator.t<(string, string)> = %raw(`\n  (() => {\n    var map1 = new Map();\n\n    map1.set('first', '1');\n    map1.set('second', '2');\n\n    var iterator1 = map1[Symbol.iterator]();\n    return iterator1;\n  })()\n`)\n\nlet processMyAsyncIterator = async () => {\n  // ReScript doesn't have `for ... of` loops, but it's easy to mimic using a while loop.\n  let break = ref(false)\n\n  while !break.contents {\n    // Await the next iterator value\n    let {value, done} = await asyncIterator->AsyncIterator.next\n\n    // Exit the while loop if the iterator says it's done\n    break := done\n\n    if done {\n      value->Option.isNone == true\n    }\n  }\n}\n\nprocessMyAsyncIterator()->ignore\n```"
        ],
        "signature": "let next: t<'a> => promise<value<'a>>"
      },
      {
        "id": "Stdlib.AsyncIterator.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(iterator, fn)` consumes all values in the async iterator and runs the callback `fn` for each value.\n\nSee [iterator protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) on MDN.\n\n## Examples\n\n```rescript\n// Let's pretend we get an async iterator returning ints from somewhere.\nlet asyncIterator: AsyncIterator.t<(string, string)> = %raw(`\n  (() => {\n    var map1 = new Map();\n\n    map1.set('first', '1');\n    map1.set('second', '2');\n\n    var iterator1 = map1[Symbol.iterator]();\n    return iterator1;\n  })()\n`)\n\nlet main = async () =>\n  await asyncIterator->AsyncIterator.forEach(v => {\n    switch v {\n    | Some((\"second\", value)) => value == \"2\"\n    | _ => ()\n    }\n  })\n\nmain()->ignore\n```"
        ],
        "signature": "let forEach: (t<'a>, option<'a> => unit) => promise<unit>"
      },
      {
        "id": "Stdlib.AsyncIterator.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(iterator)` ignores the provided async iterator and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/iterator": {
    "id": "Stdlib.Iterator",
    "name": "Iterator",
    "docstrings": [
      "Bindings to JavaScript iterators.\n\nSee [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.Iterator.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["The type representing an iterator."],
        "signature": "type t<'a>"
      },
      {
        "id": "Stdlib.Iterator.value",
        "kind": "type",
        "name": "value",
        "docstrings": ["The current value of an iterator."],
        "signature": "type value<'a> = {done: bool, value: option<'a>}"
      },
      {
        "id": "Stdlib.Iterator.next",
        "kind": "value",
        "name": "next",
        "docstrings": [
          "Returns the next value of the iterator, if any.\n\nSee [iterator protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) on MDN.\n\n## Examples\n\n```rescript\nlet iterator: Iterator.t<string> = %raw(`\n  (() => {\n    var array1 = ['a'];\n    var iterator1 = array1[Symbol.iterator]();\n    return iterator1\n  })()\n`)\n(iterator->Iterator.next).done == false\n(iterator->Iterator.next).done == true\n```"
        ],
        "signature": "let next: t<'a> => value<'a>"
      },
      {
        "id": "Stdlib.Iterator.toArray",
        "kind": "value",
        "name": "toArray",
        "docstrings": [
          "Turns an iterator into an array of the remaining values.\nRemember that each invocation of `next` of an iterator consumes a value. `Iterator.toArray` will consume all remaining values of the iterator and return them in an array to you.\n\nSee [Iterator.prototype.toArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/toArray) on MDN.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"someKey2\", \"someValue2\")\n\n// `Map.keys` returns all keys of the map as an iterator.\nlet mapKeysAsArray = map->Map.keys->Iterator.toArray\n\nmapKeysAsArray == [\"someKey\", \"someKey2\"]\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let toArray: t<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Iterator.toArrayWithMapper",
        "kind": "value",
        "name": "toArrayWithMapper",
        "docstrings": [
          "`toArray(iterator)` turns `iterator` into an array of its remaining values, applying the provided mapper function on each item.\nRemember that each invocation of `next` of an iterator consumes a value. `Iterator.toArrayWithMapper` will consume all remaining values of the iterator and return them in an array to you.\n\nSee [Iterator.prototype.toArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/toArray) on MDN.\n\n## Examples\n```rescript\nlet map = Map.make()\nmap->Map.set(\"someKey\", \"someValue\")\nmap->Map.set(\"someKey2\", \"someValue2\")\n\n// `Map.keys` returns all keys of the map as an iterator.\nlet mapKeysAsArray =\n  map\n  ->Map.keys\n  ->Iterator.toArrayWithMapper(key => key->String.length)\n\nmapKeysAsArray == [7, 8]\n```"
        ],
        "signature": "let toArrayWithMapper: (t<'a>, 'a => 'b) => array<'b>"
      },
      {
        "id": "Stdlib.Iterator.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(iterator, fn)` consumes all values in the iterator and runs the callback `fn` for each value.\n\nSee [iterator protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) on MDN.\n\n## Examples\n```rescript\nlet iterator: Iterator.t<string> = [\"a\", \"b\", \"c\"]->Array.values\nlet acc = ref(\"\")\niterator->Iterator.forEach(v => {\n  acc := acc.contents ++ v\n})\n\nacc.contents == \"abc\"\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let forEach: (t<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Iterator.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(iterator)` ignores the provided iterator and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      },
      {
        "id": "Stdlib.Iterator.drop",
        "kind": "value",
        "name": "drop",
        "docstrings": [
          "`drop(iterator, n)` returns a new iterator helper object that skips the given number of elements at the start of this iterator.\n\nSee [Iterator.prototype.drop](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/drop) on MDN.\n\n## Examples\n```rescript\nlet fibonacci: Iterator.t<int> = [1, 1, 2, 3, 5, 8, 13, 21]->Array.values\n\nlet seq = fibonacci->Iterator.drop(2)\nseq->Iterator.next == {done: false, value: Some(2)}\nseq->Iterator.next == {done: false, value: Some(3)}\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let drop: (t<'a>, int) => t<'a>"
      },
      {
        "id": "Stdlib.Iterator.every",
        "kind": "value",
        "name": "every",
        "docstrings": [
          "`every(iterator, fn)` tests whether all elements in the iterator pass the test implemented by the provided function.\n\nSee [Iterator.prototype.every](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/every) on MDN.\n\n## Examples\n```rescript\nlet fibonacci: Iterator.t<int> = [1, 1, 2, 3, 5, 8, 13, 21]->Array.values\n\nlet areAllEven = fibonacci->Iterator.every(n => n % 2 == 0)\nareAllEven == false\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let every: (t<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.Iterator.filter",
        "kind": "value",
        "name": "filter",
        "docstrings": [
          "`filter(iterator, fn)` returns a new iterator helper object that contains the elements of the original iterator that pass the test implemented by the provided function.\n\nSee [Iterator.prototype.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/filter) on MDN.\n\n## Examples\n```rescript\nlet fibonacci: Iterator.t<int> = [1, 1, 2, 3, 5, 8, 13, 21]->Array.values\n\nlet seq = fibonacci->Iterator.filter(n => n % 2 == 0)\nseq->Iterator.next == {done: false, value: Some(2)}\nseq->Iterator.next == {done: false, value: Some(8)}\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let filter: (t<'a>, 'a => bool) => t<'a>"
      },
      {
        "id": "Stdlib.Iterator.find",
        "kind": "value",
        "name": "find",
        "docstrings": [
          "`find(iterator, fn)` returns the value of the first element in the iterator that satisfies the provided testing function.\n\nSee [Iterator.prototype.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/find) on MDN.\n\n## Examples\n```rescript\nlet fibonacci: Iterator.t<int> = [1, 1, 2, 3, 5, 8, 13, 21]->Array.values\n\nlet seq = fibonacci->Iterator.find(n => n % 2 == 0)\nseq == Some(2)\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let find: (t<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Iterator.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(iterator, fn)` returns a new iterator helper object that contains the elements of the original iterator that pass the test implemented by the provided function.\n\nSee [Iterator.prototype.flatMap](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/flatMap) on MDN.\n\n## Examples\n```rescript\nlet map1 = Map.fromArray([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nlet map2 = Map.fromArray([(\"d\", 4), (\"e\", 5), (\"f\", 6)])\n\nlet letters =\n  [map1, map2]\n  ->Array.values\n  ->Iterator.flatMap(m => Map.keys(m))\n  ->Array.fromIterator\nletters == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let flatMap: (t<'a>, 'a => t<'b>) => t<'b>"
      },
      {
        "id": "Stdlib.Iterator.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(iterator, fn)` returns a new iterator helper object that yields elements of the iterator, each transformed by a mapping function.\n\nSee [Iterator.prototype.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/map) on MDN.\n\n## Examples\n```rescript\nlet map = Map.fromArray([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nlet letters = map->Map.keys->Iterator.map(v => v->String.toUpperCase)->Array.fromIterator\nletters == [\"A\", \"B\", \"C\"]\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let map: (t<'a>, 'a => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.Iterator.reduce",
        "kind": "value",
        "name": "reduce",
        "docstrings": [
          "`reduce(iterator, fn, initialValue)` applies a function against an accumulator and each element in the iterator (from left to right) to reduce it to a single value.\n\nSee [Iterator.prototype.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/reduce) on MDN.\n\n## Examples\n```rescript\nlet numbers: Iterator.t<int> = [1, 2, 3]->Array.values\n\nlet sum = numbers->Iterator.reduce((acc, n) => acc + n, ~initialValue=0)\nsum == 6\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let reduce: (t<'a>, ('acc, 'a) => 'acc, ~initialValue: 'acc=?) => 'acc"
      },
      {
        "id": "Stdlib.Iterator.some",
        "kind": "value",
        "name": "some",
        "docstrings": [
          "`some(iterator, fn)` The some() method of Iterator instances is similar to Array.some:\nit tests whether at least one element produced by the iterator passes the test implemented by the provided function.\nIt returns a boolean value.\n\nSee [Iterator.prototype.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/some) on MDN.\n\n## Examples\n```rescript\nlet numbers: Iterator.t<int> = [1, 2, 3]->Array.values\n\nlet hasEven = numbers->Iterator.some(n => n % 2 == 0)\nhasEven == true\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let some: (t<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.Iterator.take",
        "kind": "value",
        "name": "take",
        "docstrings": [
          "`take((iterator, n))` returns a new iterator helper object that contains the first `n` elements of this iterator.\n\nSee [Iterator.prototype.take](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/take) on MDN.\n\n## Examples\n```rescript\nlet fibonacci: Iterator.t<int> = [1, 1, 2, 3, 5, 8, 13, 21]->Array.values\n\nlet seq = fibonacci->Iterator.take(2)\nseq->Iterator.next == {done: false, value: Some(1)}\nseq->Iterator.next == {done: false, value: Some(1)}\nseq->Iterator.next == {done: true, value: None}\n```\n\n## Remark\n\nSince March 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let take: (t<'a>, int) => t<'a>"
      }
    ]
  },
  "stdlib/type": {
    "id": "Stdlib.Type",
    "name": "Type",
    "docstrings": [
      "Utilities for classifying the type of JavaScript values at runtime."
    ],
    "items": [
      {
        "id": "Stdlib.Type.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["The possible types of JavaScript values."],
        "signature": "type t = [\n  | #bigint\n  | #boolean\n  | #function\n  | #number\n  | #object\n  | #string\n  | #symbol\n  | #undefined\n]"
      },
      {
        "id": "Stdlib.Type.typeof",
        "kind": "value",
        "name": "typeof",
        "docstrings": [
          "`typeof(someValue)`\n\nReturns the underlying JavaScript type of any runtime value.\n\nSee [`typeof`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof) on MDN.\n\n## Examples\n```rescript\nConsole.log(Type.typeof(\"Hello\")) // Logs \"string\" to the console.\n\nlet someVariable = true\n\nswitch someVariable->Type.typeof {\n| #boolean => Console.log(\"This is a bool, yay!\")\n| _ => Console.log(\"Oh, not a bool sadly...\")\n}\n```"
        ],
        "signature": "let typeof: 'a => t"
      },
      {
        "id": "Stdlib.Type.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(type)` ignores the provided type and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/symbol": {
    "id": "Stdlib.Symbol",
    "name": "Symbol",
    "docstrings": [
      "A built-in object that serves as a namespace for globally-unique identifiers.\n\nCompiles to a regular JavaScript Symbol."
    ],
    "items": [
      {
        "id": "Stdlib.Symbol.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a Symbol."],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Symbol.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(key)`\n\nMakes a new unique Symbol value.\n\n## Examples\n\n```rescript\nSymbol.make(\"sym1\")->Symbol.description == Some(\"sym1\")\n```"
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.Symbol.getFor",
        "kind": "value",
        "name": "getFor",
        "docstrings": [
          "`getFor(key)`\n\nSearches for existing registered Symbols in the global Symbol registry with the given key and returns it if found.\nOtherwise a new Symbol gets created and registered with key.\n\n## Examples\n\n```rescript\nSymbol.getFor(\"sym1\") == Symbol.getFor(\"sym1\")\n```"
        ],
        "signature": "let getFor: string => option<t>"
      },
      {
        "id": "Stdlib.Symbol.keyFor",
        "kind": "value",
        "name": "keyFor",
        "docstrings": [
          "`keyFor(key)`\n\nRetrieves a shared Symbol key from the global Symbol registry for the given Symbol.\n\n## Examples\n\n```rescript\nlet globalSym = Symbol.getFor(\"sym1\") // Global symbol\n\nglobalSym->Option.flatMap(Symbol.description) == Some(\"sym1\")\n```"
        ],
        "signature": "let keyFor: t => option<string>"
      },
      {
        "id": "Stdlib.Symbol.description",
        "kind": "value",
        "name": "description",
        "docstrings": [
          "`description`\n\nReturns `Some(string)` containing the description of this symbol, or `None` if the symbol has no description.\n## Examples\n\n```rescript\nlet sym = Symbol.make(\"sym1\")\nSymbol.description(sym) == Some(\"sym1\")\n```"
        ],
        "signature": "let description: t => option<string>"
      },
      {
        "id": "Stdlib.Symbol.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "`toString`\n\n// Returns a string representing this symbol value.\n\n## Examples\n\n```rescript\nlet sym = Symbol.make(\"sym1\")\n\nSymbol.toString(sym) == \"Symbol(sym1)\"\n```"
        ],
        "signature": "let toString: t => string"
      },
      {
        "id": "Stdlib.Symbol.asyncIterator",
        "kind": "value",
        "name": "asyncIterator",
        "docstrings": [],
        "signature": "let asyncIterator: t"
      },
      {
        "id": "Stdlib.Symbol.hasInstance",
        "kind": "value",
        "name": "hasInstance",
        "docstrings": [],
        "signature": "let hasInstance: t"
      },
      {
        "id": "Stdlib.Symbol.isConcatSpreadable",
        "kind": "value",
        "name": "isConcatSpreadable",
        "docstrings": [],
        "signature": "let isConcatSpreadable: t"
      },
      {
        "id": "Stdlib.Symbol.iterator",
        "kind": "value",
        "name": "iterator",
        "docstrings": [],
        "signature": "let iterator: t"
      },
      {
        "id": "Stdlib.Symbol.match",
        "kind": "value",
        "name": "match",
        "docstrings": [],
        "signature": "let match: t"
      },
      {
        "id": "Stdlib.Symbol.matchAll",
        "kind": "value",
        "name": "matchAll",
        "docstrings": [],
        "signature": "let matchAll: t"
      },
      {
        "id": "Stdlib.Symbol.replace",
        "kind": "value",
        "name": "replace",
        "docstrings": [],
        "signature": "let replace: t"
      },
      {
        "id": "Stdlib.Symbol.search",
        "kind": "value",
        "name": "search",
        "docstrings": [],
        "signature": "let search: t"
      },
      {
        "id": "Stdlib.Symbol.species",
        "kind": "value",
        "name": "species",
        "docstrings": [],
        "signature": "let species: t"
      },
      {
        "id": "Stdlib.Symbol.split",
        "kind": "value",
        "name": "split",
        "docstrings": [],
        "signature": "let split: t"
      },
      {
        "id": "Stdlib.Symbol.toPrimitive",
        "kind": "value",
        "name": "toPrimitive",
        "docstrings": [],
        "signature": "let toPrimitive: t"
      },
      {
        "id": "Stdlib.Symbol.toStringTag",
        "kind": "value",
        "name": "toStringTag",
        "docstrings": [],
        "signature": "let toStringTag: t"
      },
      {
        "id": "Stdlib.Symbol.unscopables",
        "kind": "value",
        "name": "unscopables",
        "docstrings": [],
        "signature": "let unscopables: t"
      },
      {
        "id": "Stdlib.Symbol.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(symbol)` ignores the provided symbol and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/string": {
    "id": "Stdlib.String",
    "name": "String",
    "docstrings": [
      "Functions for interacting with JavaScript strings.\nSee: [`String`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String)."
    ],
    "items": [
      {
        "id": "Stdlib.String.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a string."],
        "signature": "type t = string"
      },
      {
        "id": "Stdlib.String.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(value)` converts the given value to a `string`.\n\n## Examples\n\n```rescript\nString.make(3.5) == \"3.5\"\nString.make([1, 2, 3]) == \"1,2,3\"\n```"
        ],
        "signature": "let make: 'a => string"
      },
      {
        "id": "Stdlib.String.fromCharCode",
        "kind": "value",
        "name": "fromCharCode",
        "docstrings": [
          "`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number, `n` ranges from 0 to 65535. If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) on MDN.\n\n## Examples\n\n```rescript\nString.fromCharCode(65) == \"A\"\nString.fromCharCode(0x3c8) == `ψ`\nString.fromCharCode(0xd55c) == `한`\nString.fromCharCode(-64568) == `ψ`\n```"
        ],
        "signature": "let fromCharCode: int => string"
      },
      {
        "id": "Stdlib.String.fromCharCodeMany",
        "kind": "value",
        "name": "fromCharCodeMany",
        "docstrings": [
          "`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode) on MDN.\n\n## Examples\n\n```rescript\nString.fromCharCodeMany([189, 43, 190, 61]) == \"½+¾=\"\nString.fromCharCodeMany([65, 66, 67]) == \"ABC\"\n```"
        ],
        "signature": "let fromCharCodeMany: array<int> => string"
      },
      {
        "id": "Stdlib.String.fromCodePoint",
        "kind": "value",
        "name": "fromCodePoint",
        "docstrings": [
          "`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point.\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) on MDN.\n\n## Examples\n\n```rescript\nString.fromCodePoint(65) == \"A\"\nString.fromCodePoint(0x3c8) == `ψ`\nString.fromCodePoint(0xd55c) == `한`\nString.fromCodePoint(0x1f63a) == `😺`\n```\n\n## Exceptions\n\n- `RangeError`: If the number is not a valid code point, like `fromCharCode(-5)`."
        ],
        "signature": "let fromCodePoint: int => string"
      },
      {
        "id": "Stdlib.String.fromCodePointMany",
        "kind": "value",
        "name": "fromCodePointMany",
        "docstrings": [
          "`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint) on MDN.\n\n## Examples\n\n```rescript\nString.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `한글😺`\n```\n\n## Exceptions\n\n- `RangeError`: If one of the number is not a valid code point, like\n  `fromCharCode([1, -5])`."
        ],
        "signature": "let fromCodePointMany: array<int> => string"
      },
      {
        "id": "Stdlib.String.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(str1, str2)` checks if two strings are equal.\n\n## Examples\n\n```rescript\nString.equal(\"hello\", \"hello\") == true\nString.equal(\"hello\", \"world\") == false\nString.equal(\"\", \"\") == true\n```"
        ],
        "signature": "let equal: (string, string) => bool"
      },
      {
        "id": "Stdlib.String.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(str1, str2)` compares two strings, returns an `Ordering.t` value.\n\n## Examples\n\n```rescript\nString.compare(\"hello\", \"hello\") == Ordering.equal\nString.compare(\"apple\", \"banana\") == Ordering.less\nString.compare(\"zebra\", \"apple\") == Ordering.greater\n```"
        ],
        "signature": "let compare: (string, string) => Ordering.t"
      },
      {
        "id": "Stdlib.String.length",
        "kind": "value",
        "name": "length",
        "docstrings": [
          "`length(str)` returns the length of the given `string`.\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length) on MDN.\n\n## Examples\n\n```rescript\nString.length(\"abcd\") == 4\n```"
        ],
        "signature": "let length: string => int"
      },
      {
        "id": "Stdlib.String.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "`get(str, index)` returns an `option<string>` at the given `index` number. If\n`index` is out of range, this function returns `None`.\n\n## Examples\n\n```rescript\nString.get(\"ReScript\", 0) == Some(\"R\")\nString.get(\"Hello\", 4) == Some(\"o\")\nString.get(`JS`, 4) == None\n```"
        ],
        "signature": "let get: (string, int) => option<string>"
      },
      {
        "id": "Stdlib.String.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(str, index)` returns an `string` at the given `index` number.\n\nThis is _unsafe_, meaning it will return `undefined` value if `index` does not exist in `string`.\n\nUse `String.getUnsafe` only when you are sure the `index` exists.\n## Examples\n\n```rescript\nString.getUnsafe(\"ReScript\", 0) == \"R\"\nString.getUnsafe(\"Hello\", 4) == \"o\"\n```"
        ],
        "signature": "let getUnsafe: (string, int) => string"
      },
      {
        "id": "Stdlib.String.charAt",
        "kind": "value",
        "name": "charAt",
        "docstrings": [
          "`charAt(str, index)` gets the character at `index` within string `str`. If\n`index` is negative or greater than the length of `str`, it returns the empty\nstring. If the string contains characters outside the range \\\\u0000-\\\\uffff, it\nwill return the first 16-bit value at that position in the string.\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt) on MDN.\n\n## Examples\n\n```rescript\nString.charAt(\"ReScript\", 0) == \"R\"\nString.charAt(\"Hello\", 12) == \"\"\nString.charAt(`JS`, 5) == \"\"\n```"
        ],
        "signature": "let charAt: (string, int) => string"
      },
      {
        "id": "Stdlib.String.charCodeAt",
        "kind": "value",
        "name": "charCodeAt",
        "docstrings": [
          "`charCodeAt(str, index)` returns the character code at position `index` in\nstring `str` the result is in the range 0-65535, unlike `codePointAt`, so it\nwill not work correctly for characters with code points greater than or equal\nto 0x10000. The return type is `float` because this function returns NaN if\n`index` is less than zero or greater than the length of the string.\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt) on MDN.\n\n## Examples\n\n```rescript\nString.charCodeAt(`😺`, 0) == 0xd83d->Int.toFloat\nString.codePointAt(`😺`, 0) == Some(0x1f63a)\n```"
        ],
        "signature": "let charCodeAt: (string, int) => float"
      },
      {
        "id": "Stdlib.String.codePointAt",
        "kind": "value",
        "name": "codePointAt",
        "docstrings": [
          "`codePointAt(str, index)` returns the code point at position `index` within\nstring `str` as a `Some(value)`. The return value handles code points greater\nthan or equal to 0x10000. If there is no code point at the given position, the\nfunction returns `None`.\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt) on MDN.\n\n## Examples\n\n```rescript\nString.codePointAt(`¿😺?`, 1) == Some(0x1f63a)\nString.codePointAt(\"abc\", 5) == None\n```"
        ],
        "signature": "let codePointAt: (string, int) => option<int>"
      },
      {
        "id": "Stdlib.String.concat",
        "kind": "value",
        "name": "concat",
        "docstrings": [
          "`concat(original, append)` returns a new `string` with `append` added after\n`original`.\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat) on MDN.\n\n## Examples\n\n```rescript\nString.concat(\"cow\", \"bell\") == \"cowbell\"\nString.concat(\"Re\", \"Script\") == \"ReScript\"\n```"
        ],
        "signature": "let concat: (string, string) => string"
      },
      {
        "id": "Stdlib.String.concatMany",
        "kind": "value",
        "name": "concatMany",
        "docstrings": [
          "`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat) on MDN.\n\n## Examples\n\n```rescript\nString.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```"
        ],
        "signature": "let concatMany: (string, array<string>) => string"
      },
      {
        "id": "Stdlib.String.endsWith",
        "kind": "value",
        "name": "endsWith",
        "docstrings": [
          "`endsWith(str, substr)` returns `true` if the `str` ends with `substr`, `false`\notherwise.\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) on MDN.\n\n## Examples\n\n```rescript\nString.endsWith(\"BuckleScript\", \"Script\") == true\nString.endsWith(\"BuckleShoes\", \"Script\") == false\n```"
        ],
        "signature": "let endsWith: (string, string) => bool"
      },
      {
        "id": "Stdlib.String.endsWithFrom",
        "kind": "value",
        "name": "endsWithFrom",
        "docstrings": [
          "`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`.\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith) on MDN.\n\n## Examples\n\n```rescript\nString.endsWithFrom(\"abcd\", \"cd\", 4) == true\nString.endsWithFrom(\"abcde\", \"cd\", 3) == false\nString.endsWithFrom(\"abcde\", \"cde\", 99) == true\nString.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```"
        ],
        "signature": "let endsWithFrom: (string, string, int) => bool"
      },
      {
        "id": "Stdlib.String.includes",
        "kind": "value",
        "name": "includes",
        "docstrings": [
          "`includes(str, searchValue)` returns `true` if `searchValue` is found anywhere\nwithin `str`, `false` otherwise.\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) on MDN.\n\n## Examples\n\n```rescript\nString.includes(\"programmer\", \"gram\") == true\nString.includes(\"programmer\", \"er\") == true\nString.includes(\"programmer\", \"pro\") == true\nString.includes(\"programmer.dat\", \"xyz\") == false\n```"
        ],
        "signature": "let includes: (string, string) => bool"
      },
      {
        "id": "Stdlib.String.includesFrom",
        "kind": "value",
        "name": "includesFrom",
        "docstrings": [
          "`includesFrom(str, searchValue, start)` returns `true` if `searchValue` is found\nanywhere within `str` starting at character number `start` (where 0 is the\nfirst character), `false` otherwise.\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes) on MDN.\n\n## Examples\n\n```rescript\nString.includesFrom(\"programmer\", \"gram\", 1) == true\nString.includesFrom(\"programmer\", \"gram\", 4) == false\nString.includesFrom(`대한민국`, `한`, 1) == true\n```"
        ],
        "signature": "let includesFrom: (string, string, int) => bool"
      },
      {
        "id": "Stdlib.String.indexOf",
        "kind": "value",
        "name": "indexOf",
        "docstrings": [
          "`indexOf(str, searchValue)` returns the position at which `searchValue` was\nfirst found within `str`, or `-1` if `searchValue` is not in `str`.\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) on MDN.\n\n## Examples\n\n```rescript\nString.indexOf(\"bookseller\", \"ok\") == 2\nString.indexOf(\"bookseller\", \"sell\") == 4\nString.indexOf(\"beekeeper\", \"ee\") == 1\nString.indexOf(\"bookseller\", \"xyz\") == -1\n```"
        ],
        "signature": "let indexOf: (string, string) => int"
      },
      {
        "id": "Stdlib.String.indexOfOpt",
        "kind": "value",
        "name": "indexOfOpt",
        "docstrings": [
          "`indexOfOpt(str, searchValue)`. Like `indexOf`, but return an `option<int>`.\n\n## Examples\n\n```rescript\nString.indexOfOpt(\"bookseller\", \"ok\") == Some(2)\nString.indexOfOpt(\"bookseller\", \"xyz\") == None\n```"
        ],
        "signature": "let indexOfOpt: (string, string) => option<int>"
      },
      {
        "id": "Stdlib.String.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "docstrings": [
          "`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n`-1` if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf) on MDN.\n\n## Examples\n\n```rescript\nString.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nString.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nString.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```"
        ],
        "signature": "let indexOfFrom: (string, string, int) => int"
      },
      {
        "id": "Stdlib.String.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "docstrings": [
          "`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns `-1` if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf) on MDN.\n\n## Examples\n\n```rescript\nString.lastIndexOf(\"bookseller\", \"ok\") == 2\nString.lastIndexOf(\"beekeeper\", \"ee\") == 4\nString.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```"
        ],
        "signature": "let lastIndexOf: (string, string) => int"
      },
      {
        "id": "Stdlib.String.lastIndexOfOpt",
        "kind": "value",
        "name": "lastIndexOfOpt",
        "docstrings": [
          "`lastIndexOfOpt(str, searchValue)`. Like `lastIndexOfOpt`, but return an\n`option<int>`.\n\n## Examples\n\n```rescript\nString.lastIndexOfOpt(\"bookseller\", \"ok\") == Some(2)\nString.lastIndexOfOpt(\"beekeeper\", \"ee\") == Some(4)\nString.lastIndexOfOpt(\"abcdefg\", \"xyz\") == None\n```"
        ],
        "signature": "let lastIndexOfOpt: (string, string) => option<int>"
      },
      {
        "id": "Stdlib.String.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "docstrings": [
          "`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns `-1` if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf) on MDN.\n\n## Examples\n\n```rescript\nString.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nString.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nString.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nString.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```"
        ],
        "signature": "let lastIndexOfFrom: (string, string, int) => int"
      },
      {
        "id": "Stdlib.String.match",
        "kind": "value",
        "name": "match",
        "docstrings": [
          "`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\nthere is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\n  For regular expressions with the g modifier, a matched expression returns\n  `Some(array)` with all the matched substrings and no capture groups.\n  See [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match) on MDN.\n\n## Examples\n\n```rescript\nString.match(\"The better bats\", /b[aeiou]t/) == Some([Some(\"bet\")])\nString.match(\"The better bats\", /b[aeiou]t/g) == Some([Some(\"bet\"), Some(\"bat\")])\nString.match(\"Today is 2018-04-05.\", /(\\d+)-(\\d+)-(\\d+)/) ==\n  Some([Some(\"2018-04-05\"), Some(\"2018\"), Some(\"04\"), Some(\"05\")])\nString.match(\"The optional example\", /(foo)?(example)/) ==\n  Some([Some(\"example\"), None, Some(\"example\")])\nString.match(\"The large container.\", /b[aeiou]g/) == None\n```"
        ],
        "signature": "let match: (string, RegExp.t) => option<\\\"RegExp.Result\".t>"
      },
      {
        "id": "Stdlib.String.normalize",
        "kind": "value",
        "name": "normalize",
        "docstrings": [
          "`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character ã, which can be represented\nas the single codepoint \\\\u00e3 or the combination of a lower case letter A\n\\\\u0061 and a combining tilde \\\\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report \\#15](https://unicode.org/reports/tr15/) for details.\n\n## Examples\n\n```rescript\nlet string1 = \"\\u00F1\"\nlet string2 = \"\\u006E\\u0303\"\n\nassert(string1 != string2) // true\nString.normalize(string1) == String.normalize(string2)\n```"
        ],
        "signature": "let normalize: string => string"
      },
      {
        "id": "Stdlib.String.normalizeForm",
        "kind": "type",
        "name": "normalizeForm",
        "docstrings": [
          "`normalizeByForm(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" — Normalization Form Canonical Composition.\n- \"NFD\" — Normalization Form Canonical Decomposition.\n- \"NFKC\" — Normalization Form Compatibility Composition.\n- \"NFKD\" — Normalization Form Compatibility Decomposition.\n  See [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\n  See also [Unicode technical report \\#15](https://unicode.org/reports/tr15/) for\n  details.\n\n## Examples\n\n```rescript\nlet string1 = \"\\uFB00\"\nlet string2 = \"\\u0066\\u0066\"\nConsole.log(string1 == string2) // false\n\nlet normalizeString1 = String.normalizeByForm(string1, #NFKD)\nlet normalizeString2 = String.normalizeByForm(string2, #NFKD)\nConsole.log(normalizeString1 == normalizeString2) // true\n```"
        ],
        "signature": "type normalizeForm = [#NFC | #NFD | #NFKC | #NFKD]"
      },
      {
        "id": "Stdlib.String.normalizeByForm",
        "kind": "value",
        "name": "normalizeByForm",
        "docstrings": [],
        "signature": "let normalizeByForm: (string, normalizeForm) => string"
      },
      {
        "id": "Stdlib.String.repeat",
        "kind": "value",
        "name": "repeat",
        "docstrings": [
          "`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat) on MDN.\n\n## Examples\n\n```rescript\nString.repeat(\"ha\", 3) == \"hahaha\"\nString.repeat(\"empty\", 0) == \"\"\n```\n\n## Exceptions\n\n- `RangeError`: if `n` is negative."
        ],
        "signature": "let repeat: (string, int) => string"
      },
      {
        "id": "Stdlib.String.replace",
        "kind": "value",
        "name": "replace",
        "docstrings": [
          "`replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nString.replace(\"old string\", \"old\", \"new\") == \"new string\"\nString.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```"
        ],
        "signature": "let replace: (string, string, string) => string"
      },
      {
        "id": "Stdlib.String.replaceRegExp",
        "kind": "value",
        "name": "replaceRegExp",
        "docstrings": [
          "`replaceRegExp(str, regex, replacement)` returns a new `string` where\noccurrences matching regex have been replaced by `replacement`.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nString.replaceRegExp(\"vowels be gone\", /[aeiou]/g, \"x\") == \"vxwxls bx gxnx\"\nString.replaceRegExp(\"Juan Fulano\", /(\\w+) (\\w+)/, \"$2, $1\") == \"Fulano, Juan\"\n```"
        ],
        "signature": "let replaceRegExp: (string, RegExp.t, string) => string"
      },
      {
        "id": "Stdlib.String.replaceAll",
        "kind": "value",
        "name": "replaceAll",
        "docstrings": [
          "`replaceAll(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with all matching instances of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\nSee [`String.replaceAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) on MDN.\n\n## Examples\n\n```rescript\nString.replaceAll(\"old old string\", \"old\", \"new\") == \"new new string\"\nString.replaceAll(\"the cat and the dog\", \"the\", \"this\") == \"this cat and this dog\"\n```"
        ],
        "signature": "let replaceAll: (string, string, string) => string"
      },
      {
        "id": "Stdlib.String.replaceAllRegExp",
        "kind": "value",
        "name": "replaceAllRegExp",
        "docstrings": [
          "`replaceAllRegExp(str, regex, replacement)` returns a new `string` where\nall occurrences matching regex have been replaced by `replacement`.\nThe pattern must include the global (`g`) flag or a runtime TypeError will be thrown.\nSee [`String.replaceAll`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll) on MDN.\n\n## Examples\n\n```rescript\nString.replaceAllRegExp(\"vowels be gone\", /[aeiou]/g, \"x\") == \"vxwxls bx gxnx\"\nString.replaceAllRegExp(\"aabbcc\", /b/g, \".\") == \"aa..cc\"\n```"
        ],
        "signature": "let replaceAllRegExp: (string, RegExp.t, string) => string"
      },
      {
        "id": "Stdlib.String.unsafeReplaceRegExpBy0",
        "kind": "value",
        "name": "unsafeReplaceRegExpBy0",
        "docstrings": [
          "`unsafeReplaceRegExpBy0(str, regex, f)` returns a new `string` with some or all\nmatches of a pattern with no capturing parentheses replaced by the value\nreturned from the given function. The function receives as its parameters the\nmatched string, the offset at which the match begins, and the whole string being\nmatched.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"beautiful vowels\"\nlet re = /[aeiou]/g\nlet matchFn = (~match, ~offset as _, ~input as _) => String.toUpperCase(match)\nString.unsafeReplaceRegExpBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```"
        ],
        "signature": "let unsafeReplaceRegExpBy0: (\n  string,\n  RegExp.t,\n  (~match: string, ~offset: int, ~input: string) => string,\n) => string",
        "deprecated": "Use `replaceRegExpBy0Unsafe` instead"
      },
      {
        "id": "Stdlib.String.unsafeReplaceRegExpBy1",
        "kind": "value",
        "name": "unsafeReplaceRegExpBy1",
        "docstrings": [
          "`unsafeReplaceRegExpBy1(str, regexp, f)`. Like `unsafeReplaceRegExpBy0`, but `f`\nhas `group1` parameter.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"Jony is 40\"\nlet re = /(Jony is )\\d+/g\nlet matchFn = (~match as _, ~group1, ~offset as _, ~input as _) => {\n  group1 ++ \"41\"\n}\nString.unsafeReplaceRegExpBy1(str, re, matchFn) == \"Jony is 41\"\n```"
        ],
        "signature": "let unsafeReplaceRegExpBy1: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string",
        "deprecated": "Use `replaceRegExpBy1Unsafe` instead"
      },
      {
        "id": "Stdlib.String.unsafeReplaceRegExpBy2",
        "kind": "value",
        "name": "unsafeReplaceRegExpBy2",
        "docstrings": [
          "`unsafeReplaceRegExpBy2(str, regexp, f)`. Like `unsafeReplaceRegExpBy1`, but `f`\nhas two group parameters.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"7 times 6\"\nlet re = /(\\d+) times (\\d+)/\nlet matchFn = (~match as _, ~group1, ~group2, ~offset as _, ~input as _) => {\n  switch (Int.fromString(group1), Int.fromString(group2)) {\n  | (Some(x), Some(y)) => Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\nString.unsafeReplaceRegExpBy2(str, re, matchFn) == \"42\"\n```"
        ],
        "signature": "let unsafeReplaceRegExpBy2: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~group2: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string",
        "deprecated": "Use `replaceRegExpBy2Unsafe` instead"
      },
      {
        "id": "Stdlib.String.unsafeReplaceRegExpBy3",
        "kind": "value",
        "name": "unsafeReplaceRegExpBy3",
        "docstrings": [
          "`unsafeReplaceRegExpBy3(str, regexp, f)`. Like `unsafeReplaceRegExpBy2`, but `f`\nhas three group parameters.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN."
        ],
        "signature": "let unsafeReplaceRegExpBy3: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~group2: string,\n    ~group3: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string",
        "deprecated": "Use `replaceRegExpBy3Unsafe` instead"
      },
      {
        "id": "Stdlib.String.replaceRegExpBy0Unsafe",
        "kind": "value",
        "name": "replaceRegExpBy0Unsafe",
        "docstrings": [
          "`replaceRegExpBy0Unsafe(str, regex, f)` returns a new `string` with some or all\nmatches of a pattern with no capturing parentheses replaced by the value\nreturned from the given function. The function receives as its parameters the\nmatched string, the offset at which the match begins, and the whole string being\nmatched.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"beautiful vowels\"\nlet re = /[aeiou]/g\nlet matchFn = (~match, ~offset as _, ~input as _) => String.toUpperCase(match)\nString.replaceRegExpBy0Unsafe(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```"
        ],
        "signature": "let replaceRegExpBy0Unsafe: (\n  string,\n  RegExp.t,\n  (~match: string, ~offset: int, ~input: string) => string,\n) => string"
      },
      {
        "id": "Stdlib.String.replaceRegExpBy1Unsafe",
        "kind": "value",
        "name": "replaceRegExpBy1Unsafe",
        "docstrings": [
          "`replaceRegExpBy1Unsafe(str, regexp, f)`. Like `replaceRegExpBy0Unsafe`, but `f`\nhas `group1` parameter.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"Jony is 40\"\nlet re = /(Jony is )\\d+/g\nlet matchFn = (~match as _, ~group1, ~offset as _, ~input as _) => {\n  group1 ++ \"41\"\n}\nString.replaceRegExpBy1Unsafe(str, re, matchFn) == \"Jony is 41\"\n```"
        ],
        "signature": "let replaceRegExpBy1Unsafe: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string"
      },
      {
        "id": "Stdlib.String.replaceRegExpBy2Unsafe",
        "kind": "value",
        "name": "replaceRegExpBy2Unsafe",
        "docstrings": [
          "`replaceRegExpBy2Unsafe(str, regexp, f)`. Like `replaceRegExpBy1Unsafe`, but `f`\nhas two group parameters.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN.\n\n## Examples\n\n```rescript\nlet str = \"7 times 6\"\nlet re = /(\\d+) times (\\d+)/\nlet matchFn = (~match as _, ~group1, ~group2, ~offset as _, ~input as _) => {\n  switch (Int.fromString(group1), Int.fromString(group2)) {\n  | (Some(x), Some(y)) => Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\nString.replaceRegExpBy2Unsafe(str, re, matchFn) == \"42\"\n```"
        ],
        "signature": "let replaceRegExpBy2Unsafe: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~group2: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string"
      },
      {
        "id": "Stdlib.String.replaceRegExpBy3Unsafe",
        "kind": "value",
        "name": "replaceRegExpBy3Unsafe",
        "docstrings": [
          "`replaceRegExpBy3Unsafe(str, regexp, f)`. Like `replaceRegExpBy2Unsafe`, but `f`\nhas three group parameters.\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) on MDN."
        ],
        "signature": "let replaceRegExpBy3Unsafe: (\n  string,\n  RegExp.t,\n  (\n    ~match: string,\n    ~group1: string,\n    ~group2: string,\n    ~group3: string,\n    ~offset: int,\n    ~input: string,\n  ) => string,\n) => string"
      },
      {
        "id": "Stdlib.String.search",
        "kind": "value",
        "name": "search",
        "docstrings": [
          "`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search) on MDN.\n\n## Examples\n\n```rescript\nString.search(\"testing 1 2 3\", /\\d+/) == 8\nString.search(\"no numbers\", /\\d+/) == -1\n```"
        ],
        "signature": "let search: (string, RegExp.t) => int"
      },
      {
        "id": "Stdlib.String.searchOpt",
        "kind": "value",
        "name": "searchOpt",
        "docstrings": [
          "`searchOpt(str, regexp)`. Like `search`, but return an `option<int>`.\n\n## Examples\n\n```rescript\nString.searchOpt(\"testing 1 2 3\", /\\d+/) == Some(8)\nString.searchOpt(\"no numbers\", /\\d+/) == None\n```"
        ],
        "signature": "let searchOpt: (string, RegExp.t) => option<int>"
      },
      {
        "id": "Stdlib.String.slice",
        "kind": "value",
        "name": "slice",
        "docstrings": [
          "`slice(str, ~start, ~end)` returns the substring of `str` starting at\ncharacter `start` up to but not including `end`.\n- If either `start` or `end` is negative, then it is evaluated as\n  `length(str - start)` or `length(str - end)`.\n- If `end` is greater than the length of `str`, then it is treated as\n  `length(str)`.\n- If `start` is greater than `end`, slice returns the empty string.\n  See [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n## Examples\n\n```rescript\nString.slice(\"abcdefg\", ~start=2, ~end=5) == \"cde\"\nString.slice(\"abcdefg\", ~start=2, ~end=9) == \"cdefg\"\nString.slice(\"abcdefg\", ~start=-4, ~end=-2) == \"de\"\nString.slice(\"abcdefg\", ~start=5, ~end=1) == \"\"\nString.slice(\"abcdefg\", ~start=2) == \"cdefg\"\nString.slice(\"Hello World\", ~start=6) == \"World\"\n```"
        ],
        "signature": "let slice: (string, ~start: int, ~end: int=?) => string"
      },
      {
        "id": "Stdlib.String.sliceToEnd",
        "kind": "value",
        "name": "sliceToEnd",
        "docstrings": [
          "`sliceToEnd(str, ~start)` returns the substring of `str` starting at character\n`start` to the end of the string.\n- If `start` is negative, then it is evaluated as `length(str - start)`.\n- If `start` is greater than the length of `str`, then sliceToEnd returns the empty string.\n  See [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n## Examples\n\n```rescript\nString.sliceToEnd(\"abcdefg\", ~start=4) == \"efg\"\nString.sliceToEnd(\"abcdefg\", ~start=-2) == \"fg\"\nString.sliceToEnd(\"abcdefg\", ~start=7) == \"\"\n```"
        ],
        "signature": "let sliceToEnd: (string, ~start: int) => string",
        "deprecated": "Use `slice` instead"
      },
      {
        "id": "Stdlib.String.split",
        "kind": "value",
        "name": "split",
        "docstrings": [
          "`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) on MDN.\n\n## Examples\n\n```rescript\nString.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nString.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nString.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nString.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```"
        ],
        "signature": "let split: (string, string) => array<string>"
      },
      {
        "id": "Stdlib.String.splitAtMost",
        "kind": "value",
        "name": "splitAtMost",
        "docstrings": [
          "`splitAtMost(str, delimiter, ~limit)` splits the given `str` at every\noccurrence of `delimiter` and returns an array of the first `limit` resulting\nsubstrings. If `limit` is negative or greater than the number of substrings,\nthe array will contain all the substrings.\n\n## Examples\n\n```rescript\nString.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=3) == [\"ant\", \"bee\", \"cat\"]\nString.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=0) == []\nString.splitAtMost(\"ant/bee/cat/dog/elk\", \"/\", ~limit=9) == [\"ant\", \"bee\", \"cat\", \"dog\", \"elk\"]\n```"
        ],
        "signature": "let splitAtMost: (string, string, ~limit: int) => array<string>"
      },
      {
        "id": "Stdlib.String.splitByRegExp",
        "kind": "value",
        "name": "splitByRegExp",
        "docstrings": [
          "`splitByRegExp(str, regexp)` splits the given `str` at every occurrence of\n`regexp` and returns an array of the resulting substrings.\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) on MDN.\n\n## Examples\n\n```rescript\nString.splitByRegExp(\"Jan,Feb,Mar\", /,/) == [Some(\"Jan\"), Some(\"Feb\"), Some(\"Mar\")]\n```"
        ],
        "signature": "let splitByRegExp: (string, RegExp.t) => array<option<string>>"
      },
      {
        "id": "Stdlib.String.splitByRegExpAtMost",
        "kind": "value",
        "name": "splitByRegExpAtMost",
        "docstrings": [
          "`splitByRegExpAtMost(str, regexp, ~limit)` splits the given `str` at every\noccurrence of `regexp` and returns an array of the first `limit` resulting\nsubstrings. If `limit` is negative or greater than the number of substrings, the\narray will contain all the substrings.\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split) on MDN.\n\n## Examples\n\n```rescript\nString.splitByRegExpAtMost(\"Hello World. How are you doing?\", / /, ~limit=3) == [\n    Some(\"Hello\"),\n    Some(\"World.\"),\n    Some(\"How\"),\n  ]\n```"
        ],
        "signature": "let splitByRegExpAtMost: (string, RegExp.t, ~limit: int) => array<option<string>>"
      },
      {
        "id": "Stdlib.String.startsWith",
        "kind": "value",
        "name": "startsWith",
        "docstrings": [
          "`startsWith(str, substr)` returns `true` if the `str` starts with `substr`,\n`false` otherwise.\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) on MDN.\n\n## Examples\n\n```rescript\nString.startsWith(\"BuckleScript\", \"Buckle\") == true\nString.startsWith(\"BuckleScript\", \"\") == true\nString.startsWith(\"JavaScript\", \"Buckle\") == false\n```"
        ],
        "signature": "let startsWith: (string, string) => bool"
      },
      {
        "id": "Stdlib.String.startsWithFrom",
        "kind": "value",
        "name": "startsWithFrom",
        "docstrings": [
          "`startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, `false` otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith) on MDN.\n\n## Examples\n\n```rescript\nString.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nString.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nString.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```"
        ],
        "signature": "let startsWithFrom: (string, string, int) => bool"
      },
      {
        "id": "Stdlib.String.substring",
        "kind": "value",
        "name": "substring",
        "docstrings": [
          "`substring(str, ~start, ~end)` returns characters `start` up to but not\nincluding end from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `end` is zero or negative, the empty string is returned.\n- If `start` is greater than `end`, the `start` and `end` points are swapped.\n  See [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n## Examples\n\n```rescript\nString.substring(\"playground\", ~start=3, ~end=6) == \"ygr\"\nString.substring(\"playground\", ~start=6, ~end=3) == \"ygr\"\nString.substring(\"playground\", ~start=4, ~end=12) == \"ground\"\nString.substring(\"playground\", ~start=4) == \"ground\"\nString.substring(\"Hello World\", ~start=6) == \"World\"\n```"
        ],
        "signature": "let substring: (string, ~start: int, ~end: int=?) => string"
      },
      {
        "id": "Stdlib.String.substringToEnd",
        "kind": "value",
        "name": "substringToEnd",
        "docstrings": [
          "`substringToEnd(str, ~start)` returns the substring of `str` from position\n`start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string\n  is returned.\n  See [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n## Examples\n\n```rescript\nString.substringToEnd(\"playground\", ~start=4) == \"ground\"\nString.substringToEnd(\"playground\", ~start=-3) == \"playground\"\nString.substringToEnd(\"playground\", ~start=12) == \"\"\n```"
        ],
        "signature": "let substringToEnd: (string, ~start: int) => string",
        "deprecated": "Use `substring` instead"
      },
      {
        "id": "Stdlib.String.toLowerCase",
        "kind": "value",
        "name": "toLowerCase",
        "docstrings": [
          "`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms, one when it is the last\ncharacter in a string and another when it is not.\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) on MDN.\n\n## Examples\n\n```rescript\nString.toLowerCase(\"ABC\") == \"abc\"\nString.toLowerCase(`ΣΠ`) == `σπ`\nString.toLowerCase(`ΠΣ`) == `πς`\n```"
        ],
        "signature": "let toLowerCase: string => string"
      },
      {
        "id": "Stdlib.String.toLocaleLowerCase",
        "kind": "value",
        "name": "toLocaleLowerCase",
        "docstrings": [
          "`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase) on MDN."
        ],
        "signature": "let toLocaleLowerCase: string => string"
      },
      {
        "id": "Stdlib.String.toUpperCase",
        "kind": "value",
        "name": "toUpperCase",
        "docstrings": [
          "`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result, for example the German ß\ncapitalizes to two Ses in a row.\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) on MDN.\n\n## Examples\n\n```rescript\nString.toUpperCase(\"abc\") == \"ABC\"\nString.toUpperCase(`Straße`) == `STRASSE`\nString.toUpperCase(`πς`) == `ΠΣ`\n```"
        ],
        "signature": "let toUpperCase: string => string"
      },
      {
        "id": "Stdlib.String.toLocaleUpperCase",
        "kind": "value",
        "name": "toLocaleUpperCase",
        "docstrings": [
          "`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.toLocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase) on MDN."
        ],
        "signature": "let toLocaleUpperCase: string => string"
      },
      {
        "id": "Stdlib.String.trim",
        "kind": "value",
        "name": "trim",
        "docstrings": [
          "`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim) on MDN.\n\n## Examples\n\n```rescript\nString.trim(\"   abc def   \") == \"abc def\"\nString.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```"
        ],
        "signature": "let trim: string => string"
      },
      {
        "id": "Stdlib.String.trimStart",
        "kind": "value",
        "name": "trimStart",
        "docstrings": [
          "`trimStart(str)` returns a string that is `str` with whitespace stripped from\nthe beginning of a string. Internal whitespace is not removed.\nSee [`String.trimStart`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart) on MDN.\n\n## Examples\n\n```rescript\nString.trimStart(\"   Hello world!   \") == \"Hello world!   \"\nString.trimStart(\"   Hello   world!   \") == \"Hello   world!   \"\n```"
        ],
        "signature": "let trimStart: string => string"
      },
      {
        "id": "Stdlib.String.trimEnd",
        "kind": "value",
        "name": "trimEnd",
        "docstrings": [
          "`trinEnd(str)` returns a string that is `str` with whitespace stripped from the\nend of a string. Internal whitespace is not removed.\nSee [`String.trimEnd`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd) on MDN.\n\n## Examples\n\n```rescript\nString.trimEnd(\"   Hello world!   \") == \"   Hello world!\"\nString.trimEnd(\"   Hello   world!   \") == \"   Hello   world!\"\n```"
        ],
        "signature": "let trimEnd: string => string"
      },
      {
        "id": "Stdlib.String.padStart",
        "kind": "value",
        "name": "padStart",
        "docstrings": [
          "`padStart(str, n, padStr)` returns a string that has been padded with `padStr`\n(multiple times, if needed) until the resulting string reaches the given `n`\nlength. The padding is applied from the start of the current string.\nSee [`String.padStart`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart) on MDN.\n\n## Examples\n\n```rescript\nString.padStart(\"abc\", 5, \" \") == \"  abc\"\nString.padStart(\"abc\", 6, \"123465\") == \"123abc\"\n```"
        ],
        "signature": "let padStart: (string, int, string) => string"
      },
      {
        "id": "Stdlib.String.padEnd",
        "kind": "value",
        "name": "padEnd",
        "docstrings": [
          "`padEnd(str, n, padStr)` returns a string that has been padded with `padStr`\n(multiple times, if needed) until the resulting string reaches the given `n`\nlength. The padding is applied from the end of the current string.\nSee [`String.padEnd`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd) on MDN.\n\n## Examples\n\n```rescript\nString.padEnd(\"Hello\", 10, \".\") == \"Hello.....\"\nString.padEnd(\"abc\", 1, \"\") == \"abc\"\n```"
        ],
        "signature": "let padEnd: (string, int, string) => string"
      },
      {
        "id": "Stdlib.String.localeCompare",
        "kind": "value",
        "name": "localeCompare",
        "docstrings": [
          "`localeCompare(referenceStr, compareStr)` returns a float than indicatings\nwhether a reference string comes before or after, or is the same as the given\nstring in sort order. If `referenceStr` occurs before `compareStr` positive if\nthe `referenceStr` occurs after `compareStr`, `0` if they are equivalent.\nDo not rely on exact return values of `-1` or `1`\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n## Examples\n\n```rescript\nString.localeCompare(\"a\", \"c\") < 0.0 == true\nString.localeCompare(\"a\", \"a\") == 0.0\n```"
        ],
        "signature": "let localeCompare: (string, string) => float"
      },
      {
        "id": "Stdlib.String.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(string)` ignores the provided string and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: string => unit"
      },
      {
        "id": "Stdlib.String.getSymbolUnsafe",
        "kind": "value",
        "name": "getSymbolUnsafe",
        "docstrings": [
          "`getSymbolUnsafe(str, symbol)` returns the value of the symbol property of a string.\n\n## Examples\n\n```rescript\nlet it: Iterator.t<string> = (\"foo\"->String.getSymbolUnsafe(Symbol.iterator))()\nNullable.make(it)->Nullable.isNullable == false\n```"
        ],
        "signature": "let getSymbolUnsafe: (string, Symbol.t) => 'a"
      }
    ]
  },
  "stdlib/result": {
    "id": "Stdlib.Result",
    "name": "Result",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Result.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "Result types are really useful to describe the result of a certain operation\n  without relying on exceptions or `option` types.\n\n  This module gives you useful utilities to create and combine `Result` data."
        ],
        "signature": "type t<'res, 'err> = result<'res, 'err> =\n  | Ok('res)\n  | Error('err)"
      },
      {
        "id": "Stdlib.Result.getExn",
        "kind": "value",
        "name": "getExn",
        "docstrings": [
          "`getExn(res, ~message=?)` returns `n` if `res` is `Ok(n)`, otherwise throws an exception with the message provided, or a generic message if no message was provided.\n\n  ```res example\n  Result.getExn(Result.Ok(42)) == 42\n  \n  switch Result.getExn(Error(\"Invalid data\")) {\n  | exception _ => assert(true)\n  | _ => assert(false)\n  }\n\n  switch Result.getExn(Error(\"Invalid data\"), ~message=\"was Error!\") {\n  | exception _ => assert(true) // Throws a JsError with the message \"was Error!\"\n  | _ => assert(false)\n  }\n  ```"
        ],
        "signature": "let getExn: (result<'a, 'b>, ~message: string=?) => 'a",
        "deprecated": "Use 'getOrThrow' instead"
      },
      {
        "id": "Stdlib.Result.getOrThrow",
        "kind": "value",
        "name": "getOrThrow",
        "docstrings": [
          "`getOrThrow(res, ~message=?)` returns `n` if `res` is `Ok(n)`, otherwise throws an exception with the message provided, or a generic message if no message was provided.\n\n  ```res example\n  Result.getOrThrow(Result.Ok(42)) == 42\n  \n  switch Result.getOrThrow(Error(\"Invalid data\")) {\n  | exception _ => assert(true)\n  | _ => assert(false)\n  }\n\n  switch Result.getOrThrow(Error(\"Invalid data\"), ~message=\"was Error!\") {\n  | exception _ => assert(true) // Throws a JsError with the message \"was Error!\"\n  | _ => assert(false)\n  }\n  ```"
        ],
        "signature": "let getOrThrow: (result<'a, 'b>, ~message: string=?) => 'a"
      },
      {
        "id": "Stdlib.Result.mapOr",
        "kind": "value",
        "name": "mapOr",
        "docstrings": [
          "`mapOr(res, default, f)`: When res is `Ok(n)`, returns `f(n)`, otherwise `default`.\n\n## Examples\n\n```rescript\nlet ok = Ok(42)\nResult.mapOr(ok, 0, x => x / 2) == 21\n\nlet error = Error(\"Invalid data\")\nResult.mapOr(error, 0, x => x / 2) == 0\n```"
        ],
        "signature": "let mapOr: (result<'a, 'c>, 'b, 'a => 'b) => 'b"
      },
      {
        "id": "Stdlib.Result.mapWithDefault",
        "kind": "value",
        "name": "mapWithDefault",
        "docstrings": [],
        "signature": "let mapWithDefault: (result<'a, 'c>, 'b, 'a => 'b) => 'b",
        "deprecated": "Use mapOr instead"
      },
      {
        "id": "Stdlib.Result.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(res, f)`: When res is `Ok(n)`, returns `Ok(f(n))`. Otherwise returns res\nunchanged. Function `f` takes a value of the same type as `n` and returns an\nordinary value.\n\n## Examples\n\n```rescript\nlet f = x => sqrt(Int.toFloat(x))\n\nResult.map(Ok(64), f) == Ok(8.0)\n\nResult.map(Error(\"Invalid data\"), f) == Error(\"Invalid data\")\n```"
        ],
        "signature": "let map: (result<'a, 'c>, 'a => 'b) => result<'b, 'c>"
      },
      {
        "id": "Stdlib.Result.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(res, f)`: When res is `Ok(n)`, returns `f(n)`. Otherwise, returns res\nunchanged. Function `f` takes a value of the same type as `n` and returns a\n`Result`.\n\n## Examples\n\n```rescript\nlet recip = x =>\n  if x !== 0.0 {\n    Ok(1.0 /. x)\n  } else {\n    Error(\"Divide by zero\")\n  }\n\nResult.flatMap(Ok(2.0), recip) == Ok(0.5)\n\nResult.flatMap(Ok(0.0), recip) == Error(\"Divide by zero\")\n\nResult.flatMap(Error(\"Already bad\"), recip) == Error(\"Already bad\")\n```"
        ],
        "signature": "let flatMap: (result<'a, 'c>, 'a => result<'b, 'c>) => result<'b, 'c>"
      },
      {
        "id": "Stdlib.Result.getOr",
        "kind": "value",
        "name": "getOr",
        "docstrings": [
          "`getOr(res, defaultValue)`: If `res` is `Ok(n)`, returns `n`, otherwise `default`\n\n## Examples\n\n```rescript\nResult.getOr(Ok(42), 0) == 42\n\nResult.getOr(Error(\"Invalid Data\"), 0) == 0\n```"
        ],
        "signature": "let getOr: (result<'a, 'b>, 'a) => 'a"
      },
      {
        "id": "Stdlib.Result.getWithDefault",
        "kind": "value",
        "name": "getWithDefault",
        "docstrings": [],
        "signature": "let getWithDefault: (result<'a, 'b>, 'a) => 'a",
        "deprecated": "Use getOr instead"
      },
      {
        "id": "Stdlib.Result.isOk",
        "kind": "value",
        "name": "isOk",
        "docstrings": [
          "`isOk(res)`: Returns `true` if `res` is of the form `Ok(n)`, `false` if it is the `Error(e)` variant."
        ],
        "signature": "let isOk: result<'a, 'b> => bool"
      },
      {
        "id": "Stdlib.Result.isError",
        "kind": "value",
        "name": "isError",
        "docstrings": [
          "`isError(res)`: Returns `true` if `res` is of the form `Error(e)`, `false` if it is the `Ok(n)` variant."
        ],
        "signature": "let isError: result<'a, 'b> => bool"
      },
      {
        "id": "Stdlib.Result.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(res1, res2, f)`: Determine if two `Result` variables are equal with\nrespect to an equality function. If `res1` and `res2` are of the form `Ok(n)`\nand `Ok(m)`, return the result of `f(n, m)`. If one of `res1` and `res2` are of\nthe form `Error(e)`, return false If both `res1` and `res2` are of the form\n`Error(e)`, return true\n\n## Examples\n\n```rescript\nlet good1 = Ok(42)\n\nlet good2 = Ok(32)\n\nlet bad1 = Error(\"invalid\")\n\nlet bad2 = Error(\"really invalid\")\n\nlet mod10equal = (a, b) => mod(a, 10) === mod(b, 10)\n\nResult.equal(good1, good2, mod10equal) == true\n\nResult.equal(good1, bad1, mod10equal) == false\n\nResult.equal(bad2, good2, mod10equal) == false\n\nResult.equal(bad1, bad2, mod10equal) == true\n```"
        ],
        "signature": "let equal: (result<'a, 'c>, result<'b, 'd>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.Result.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(res1, res2, f)`: Compare two `Result` variables with respect to a\ncomparison function. The comparison function returns -1. if the first variable\nis \"less than\" the second, 0. if the two variables are equal, and 1. if the first\nis \"greater than\" the second.\n\nIf `res1` and `res2` are of the form `Ok(n)` and `Ok(m)`, return the result of\n`f(n, m)`. If `res1` is of the form `Error(e)` and `res2` of the form `Ok(n)`,\nreturn -1. (nothing is less than something) If `res1` is of the form `Ok(n)` and\n`res2` of the form `Error(e)`, return 1. (something is greater than nothing) If\nboth `res1` and `res2` are of the form `Error(e)`, return 0. (equal)\n\n## Examples\n\n```rescript\nlet good1 = Ok(59)\n\nlet good2 = Ok(37)\n\nlet bad1 = Error(\"invalid\")\n\nlet bad2 = Error(\"really invalid\")\n\nlet mod10cmp = (a, b) => Int.compare(mod(a, 10), mod(b, 10))\n\nResult.compare(Ok(39), Ok(57), mod10cmp) == 1.\n\nResult.compare(Ok(57), Ok(39), mod10cmp) == -1.\n\nResult.compare(Ok(39), Error(\"y\"), mod10cmp) == 1.\n\nResult.compare(Error(\"x\"), Ok(57), mod10cmp) == -1.\n\nResult.compare(Error(\"x\"), Error(\"y\"), mod10cmp) == 0.\n```"
        ],
        "signature": "let compare: (\n  result<'a, 'c>,\n  result<'b, 'd>,\n  ('a, 'b) => Ordering.t,\n) => Ordering.t"
      },
      {
        "id": "Stdlib.Result.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(res, f)` runs the provided function `f` on the `Ok` value. If `res` is `Error`, nothing happens.\n\n## Examples\n\n```rescript\nResult.forEach(Ok(3), Console.log) // Logs \"3\", returns ()\nResult.forEach(Error(\"x\"), Console.log) // Does nothing, returns ()\n```"
        ],
        "signature": "let forEach: (result<'a, 'b>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Result.mapError",
        "kind": "value",
        "name": "mapError",
        "docstrings": [
          "`mapError(r, f)` generates a new `result` by applying the function `f` to the `Error` value. If the source is `Ok`, return it as-is.\n\n## Examples\n\n```rescript\nlet format = n => `Error code: ${n->Int.toString}`\nResult.mapError(Error(14), format) // Error(\"Error code: 14\")\nResult.mapError(Ok(\"abc\"), format) // Ok(\"abc\")\n```"
        ],
        "signature": "let mapError: (result<'a, 'b>, 'b => 'c) => result<'a, 'c>"
      },
      {
        "id": "Stdlib.Result.all",
        "kind": "value",
        "name": "all",
        "docstrings": [
          "`all(results)` returns a result of array if all options are Ok, otherwise returns Error.\n## Examples\n```rescript\nResult.all([Ok(1), Ok(2), Ok(3)]) // Ok([1, 2, 3])\nResult.all([Ok(1), Error(1)]) // Error(1)\n```"
        ],
        "signature": "let all: array<result<'a, 'b>> => result<array<'a>, 'b>"
      },
      {
        "id": "Stdlib.Result.all2",
        "kind": "value",
        "name": "all2",
        "docstrings": [
          "`all2((r1, r2))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all2: (\n  (result<'r1, 'e>, result<'r2, 'e>),\n) => result<('r1, 'r2), 'e>"
      },
      {
        "id": "Stdlib.Result.all3",
        "kind": "value",
        "name": "all3",
        "docstrings": [
          "`all3((r1, r2, r3))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all3: (\n  (result<'r1, 'e>, result<'r2, 'e>, result<'r3, 'e>),\n) => result<('r1, 'r2, 'r3), 'e>"
      },
      {
        "id": "Stdlib.Result.all4",
        "kind": "value",
        "name": "all4",
        "docstrings": [
          "`all4((r1, r2, r3, r4))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all4: (\n  (\n    result<'r1, 'e>,\n    result<'r2, 'e>,\n    result<'r3, 'e>,\n    result<'r4, 'e>,\n  ),\n) => result<('r1, 'r2, 'r3, 'r4), 'e>"
      },
      {
        "id": "Stdlib.Result.all5",
        "kind": "value",
        "name": "all5",
        "docstrings": [
          "`all5((r1, r2, r3, r4, r5))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all5: (\n  (\n    result<'r1, 'e>,\n    result<'r2, 'e>,\n    result<'r3, 'e>,\n    result<'r4, 'e>,\n    result<'r5, 'e>,\n  ),\n) => result<('r1, 'r2, 'r3, 'r4, 'r5), 'e>"
      },
      {
        "id": "Stdlib.Result.all6",
        "kind": "value",
        "name": "all6",
        "docstrings": [
          "`all6((r1, r2, r3, r4, r5, r6))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all6: (\n  (\n    result<'r1, 'e>,\n    result<'r2, 'e>,\n    result<'r3, 'e>,\n    result<'r4, 'e>,\n    result<'r5, 'e>,\n    result<'r6, 'e>,\n  ),\n) => result<('r1, 'r2, 'r3, 'r4, 'r5, 'r6), 'e>"
      },
      {
        "id": "Stdlib.Result.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(result)` ignores the provided result and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: result<'res, 'err> => unit"
      }
    ]
  },
  "stdlib/regexp": {
    "id": "Stdlib.RegExp",
    "name": "RegExp",
    "docstrings": [
      "Functions for handling RegExp's in ReScript.\n\nSee [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.RegExp.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an instantiated `RegExp`."],
        "signature": "type t"
      },
      {
        "id": "Stdlib.RegExp.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "`fromString(string)` creates a `RegExp.t` from the provided string. This can then be used to match on strings using `RegExp.exec`.\n\nSee [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromString(\"\\\\w+\")\n\nswitch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n| None => Console.log(\"Nope, no match...\")\n| Some(result) => Console.log(result->RegExp.Result.fullMatch) // Prints \"ReScript\"\n}\n\n// Match 'foo' with case insensitive flag\nlet regexp = RegExp.fromString(\"foo\", ~flags=\"i\")\n\nswitch regexp->RegExp.exec(\"FOO\") {\n| None => Console.log(\"Nope, no match...\")\n| Some(result) => Console.log(result->RegExp.Result.fullMatch) // Prints \"FOO\"\n}\n```"
        ],
        "signature": "let fromString: (string, ~flags: string=?) => t"
      },
      {
        "id": "Stdlib.RegExp.fromStringWithFlags",
        "kind": "value",
        "name": "fromStringWithFlags",
        "docstrings": [
          "`fromStringWithFlags(string)` creates a `RegExp.t` from the provided string, using the provided `flags`. This can then be used to match on strings using `RegExp.exec`.\n\nSee [`RegExp parameters`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp#parameters) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\n\nswitch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n| None => Console.log(\"Nope, no match...\")\n| Some(result) => Console.log(result->RegExp.Result.fullMatch) // Prints \"ReScript\"\n}\n```"
        ],
        "signature": "let fromStringWithFlags: (string, ~flags: string) => t",
        "deprecated": "Use `fromString` instead"
      },
      {
        "id": "Stdlib.RegExp.escape",
        "kind": "value",
        "name": "escape",
        "docstrings": [
          "`escape(string)` escapes any potential regex syntax characters in a string.\n\nSee [`RegExp.escape`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/escape) on MDN.\n\n## Examples\n```rescript\nlet literal = \"foo[bar]\"\nlet regexp = literal->RegExp.escape->RegExp.fromString\nregexp->RegExp.test(\"foo[bar]\") == true\n```\n\n## Remark\n\nSince May 2025, this feature works across the latest devices and browser versions.\nThis feature might not work in older devices or browsers."
        ],
        "signature": "let escape: string => string"
      },
      {
        "id": "Stdlib.RegExp.test",
        "kind": "value",
        "name": "test",
        "docstrings": [
          "`test(regexp, string)` tests whether the provided `regexp` matches on the provided string.\n\nSee [`RegExp.test`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromString(\"\\\\w+\")\n\nif regexp->RegExp.test(\"ReScript is cool!\") {\n  Console.log(\"Yay, there's a word in there.\")\n}\n```"
        ],
        "signature": "let test: (t, string) => bool"
      },
      {
        "id": "Stdlib.RegExp.exec",
        "kind": "value",
        "name": "exec",
        "docstrings": [
          "`exec(regexp, string)` executes the provided regexp on the provided string, optionally returning a `RegExp.Result.t` if the regexp matches on the string.\n\nSee [`RegExp.exec`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromString(\"\\\\w+\")\n\nswitch regexp->RegExp.exec(\"ReScript is pretty cool, right?\") {\n| None => Console.log(\"Nope, no match...\")\n| Some(result) => Console.log(result->RegExp.Result.fullMatch) // Prints \"ReScript\"\n}\n```"
        ],
        "signature": "let exec: (t, string) => option<Result.t>"
      },
      {
        "id": "Stdlib.RegExp.lastIndex",
        "kind": "value",
        "name": "lastIndex",
        "docstrings": [
          "`lastIndex(regexp)` returns the index the next match will start from.\n\nSee [`RegExp.lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromString(\"\\\\w+\")\nlet someStr = \"Many words here.\"\n\nConsole.log(regexp->RegExp.lastIndex) // Logs `0` to the console\n\nregexp->RegExp.exec(someStr)->ignore\n\nConsole.log(regexp->RegExp.lastIndex) // Logs `4` to the console\n```"
        ],
        "signature": "let lastIndex: t => int"
      },
      {
        "id": "Stdlib.RegExp.setLastIndex",
        "kind": "value",
        "name": "setLastIndex",
        "docstrings": [
          "`setLastIndex(regexp, index)` set the index the next match will start from.\n\nSee [`RegExp.lastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex) on MDN.\n\n## Examples\n```rescript\n// Match the first word in a sentence\nlet regexp = RegExp.fromString(\"\\\\w+\")\nlet someStr = \"Many words here.\"\n\nregexp->RegExp.setLastIndex(4)\nregexp->RegExp.exec(someStr)->ignore\n\nConsole.log(regexp->RegExp.lastIndex) // Logs `10` to the console\n```"
        ],
        "signature": "let setLastIndex: (t, int) => unit"
      },
      {
        "id": "Stdlib.RegExp.ignoreCase",
        "kind": "value",
        "name": "ignoreCase",
        "docstrings": [
          "`ignoreCase(regexp)` returns whether the ignore case (`i`) flag is set on this `RegExp`.\n\nSee [`RegExp.ignoreCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase) on MDN.\n\n## Examples\n```rescript\nlet regexp1 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp1->RegExp.ignoreCase) // Logs `false`, since `i` is not set\n\nlet regexp2 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"i\")\nConsole.log(regexp2->RegExp.ignoreCase) // Logs `true`, since `i` is set\n```"
        ],
        "signature": "let ignoreCase: t => bool"
      },
      {
        "id": "Stdlib.RegExp.global",
        "kind": "value",
        "name": "global",
        "docstrings": [
          "`global(regexp)` returns whether the global (`g`) flag is set on this `RegExp`.\n\nSee [`RegExp.global`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global) on MDN.\n\n## Examples\n```rescript\nlet regexp1 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp1->RegExp.global) // Logs `true`, since `g` is set\n\nlet regexp2 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"i\")\nConsole.log(regexp2->RegExp.global) // Logs `false`, since `g` is not set\n```"
        ],
        "signature": "let global: t => bool"
      },
      {
        "id": "Stdlib.RegExp.multiline",
        "kind": "value",
        "name": "multiline",
        "docstrings": [
          "`multiline(regexp)` returns whether the multiline (`m`) flag is set on this `RegExp`.\n\nSee [`RegExp.multiline`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline) on MDN.\n\n## Examples\n```rescript\nlet regexp1 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp1->RegExp.multiline) // Logs `false`, since `m` is not set\n\nlet regexp2 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"mi\")\nConsole.log(regexp2->RegExp.multiline) // Logs `true`, since `m` is set\n```"
        ],
        "signature": "let multiline: t => bool"
      },
      {
        "id": "Stdlib.RegExp.source",
        "kind": "value",
        "name": "source",
        "docstrings": [
          "`source(regexp)` returns the source text for this `RegExp`, without the two forward slashes (if present), and without any set flags.\n\nSee [`RegExp.source`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source) on MDN.\n\n## Examples\n```rescript\nlet regexp = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp->RegExp.source) // Logs `\\w+`, the source text of the `RegExp`\n```"
        ],
        "signature": "let source: t => string"
      },
      {
        "id": "Stdlib.RegExp.sticky",
        "kind": "value",
        "name": "sticky",
        "docstrings": [
          "`sticky(regexp)` returns whether the sticky (`y`) flag is set on this `RegExp`.\n\nSee [`RegExp.sticky`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky) on MDN.\n\n## Examples\n```rescript\nlet regexp1 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp1->RegExp.unicode) // Logs `false`, since `y` is not set\n\nlet regexp2 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"my\")\nConsole.log(regexp2->RegExp.unicode) // Logs `true`, since `y` is set\n```"
        ],
        "signature": "let sticky: t => bool"
      },
      {
        "id": "Stdlib.RegExp.unicode",
        "kind": "value",
        "name": "unicode",
        "docstrings": [
          "`unicode(regexp)` returns whether the unicode (`y`) flag is set on this `RegExp`.\n\nSee [`RegExp.unicode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode) on MDN.\n\n## Examples\n```rescript\nlet regexp1 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"g\")\nConsole.log(regexp1->RegExp.unicode) // Logs `false`, since `u` is not set\n\nlet regexp2 = RegExp.fromStringWithFlags(\"\\\\w+\", ~flags=\"mu\")\nConsole.log(regexp2->RegExp.unicode) // Logs `true`, since `u` is set\n```"
        ],
        "signature": "let unicode: t => bool"
      },
      {
        "id": "Stdlib.RegExp.flags",
        "kind": "value",
        "name": "flags",
        "docstrings": [
          "`flags(regexp)` returns a string consisting of all the flags set on this `RegExp`.\n\nSee [`RegExp.flags`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags) on MDN.\n\n## Examples\n```rescript\nlet regexp = RegExp.fromString(\"\\\\w+\", ~flags=\"gi\")\nConsole.log(regexp->RegExp.flags) // Logs \"gi\", all the flags set on the RegExp\n```"
        ],
        "signature": "let flags: t => string"
      },
      {
        "id": "Stdlib.RegExp.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(regExp)` ignores the provided regExp and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/promise": {
    "id": "Stdlib.Promise",
    "name": "Promise",
    "docstrings": [
      "Functions for interacting with JavaScript Promise.\nSee: [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)."
    ],
    "items": [
      {
        "id": "Stdlib.Promise.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t<'a> = promise<'a>"
      },
      {
        "id": "Stdlib.Promise.resolve",
        "kind": "value",
        "name": "resolve",
        "docstrings": [
          "`resolve(value)` creates a resolved Promise with a given `value`.\nSee [`Promise.resolve`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve) on MDN.\n\n## Examples\n\n```rescript\nlet p = Promise.resolve(5) // promise<int>\n```"
        ],
        "signature": "let resolve: 'a => t<'a>"
      },
      {
        "id": "Stdlib.Promise.reject",
        "kind": "value",
        "name": "reject",
        "docstrings": [
          "`reject(exn)` reject a Promise.\nSee [`Promise.reject`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject) on MDN.\n\n## Examples\n\n```rescript\nexception TestError(string)\n\nTestError(\"some rejected value\")\n->Promise.reject\n->Promise.catch(v => {\n  switch v {\n  | TestError(msg) => msg == \"some rejected value\"\n  | _ => assert(false)\n  }\n  Promise.resolve()\n})\n->ignore\n```"
        ],
        "signature": "let reject: exn => t<'a>"
      },
      {
        "id": "Stdlib.Promise.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(callback)` creates a new Promise based on a `callback` that receives two\nuncurried functions `resolve` and `reject` for defining the Promise's result.\n\n## Examples\n\n```rescript\nopen Promise\n\nlet n = 4\nPromise.make((resolve, reject) => {\n  if n < 5 {\n    resolve(\"success\")\n  } else {\n    reject(\"failed\")\n  }\n})\n->then(str => {\n  Console.log(str)->resolve\n})\n->catch(_ => {\n  Console.log(\"Error occurred\")\n  resolve()\n})\n->ignore\n```"
        ],
        "signature": "let make: (('a => unit, 'e => unit) => unit) => t<'a>"
      },
      {
        "id": "Stdlib.Promise.promiseAndResolvers",
        "kind": "type",
        "name": "promiseAndResolvers",
        "docstrings": [],
        "signature": "type promiseAndResolvers<'a> = {\n  promise: t<'a>,\n  resolve: 'a => unit,\n  reject: exn => unit,\n}"
      },
      {
        "id": "Stdlib.Promise.withResolvers",
        "kind": "value",
        "name": "withResolvers",
        "docstrings": [
          "`withResolvers()` returns a object containing a new promise with functions to resolve or reject it. See [`Promise.withResolvers`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/withResolvers) on MDN.\n\n## Examples\n\n```rescript\nopen Promise\n\nlet {promise, resolve, _} = Promise.withResolvers()\n\nsetTimeout(() => {\n  resolve(\"success\")\n}, 1000)->TimeoutId.ignore\n\npromise\n->thenResolve(str => {\n  Console.log(str)\n})\n->ignore\n```"
        ],
        "signature": "let withResolvers: unit => promiseAndResolvers<'a>"
      },
      {
        "id": "Stdlib.Promise.catch",
        "kind": "value",
        "name": "catch",
        "docstrings": [
          "`catch(promise, errorCallback)` registers an exception handler in a promise chain.\nThe `errorCallback` receives an `exn` value that can later be refined into a JS\nerror or ReScript error. The `errorCallback` needs to return a promise with the\nsame type as the consumed promise. See [`Promise.catch`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch) on MDN.\n\n## Examples\n\n```rescript\nopen Promise\n\nexception SomeError(string)\n\nreject(SomeError(\"this is an error\"))\n->then(_ => {\n  Ok(\"This result will never be returned\")->resolve\n})\n->catch(e => {\n  let msg = switch e {\n  | SomeError(msg) => \"ReScript error occurred: \" ++ msg\n  | JsExn(obj) =>\n    switch JsExn.message(obj) {\n    | Some(msg) => \"JS exception occurred: \" ++ msg\n    | None => \"Some other JS value has been thrown\"\n    }\n  | _ => \"Unexpected error occurred\"\n  }\n\n  Error(msg)->resolve\n})\n->then(result => {\n  switch result {\n  | Ok(r) => Console.log2(\"Operation successful: \", r)\n  | Error(msg) => Console.log2(\"Operation failed: \", msg)\n  }->resolve\n})\n->ignore // Ignore needed for side-effects\n```\n\nIn case you want to return another promise in your `callback`, consider using\n`then` instead."
        ],
        "signature": "let catch: (t<'a>, exn => t<'a>) => t<'a>"
      },
      {
        "id": "Stdlib.Promise.then",
        "kind": "value",
        "name": "then",
        "docstrings": [
          "`then(promise, callback)` returns a new promise based on the result of `promise`'s\nvalue. The `callback` needs to explicitly return a new promise via `resolve`.\nIt is **not allowed** to resolve a nested promise (like `resolve(resolve(1))`).\nSee [`Promise.then`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) on MDN.\n## Examples\n\n```rescript\nopen Promise\nresolve(5)\n->then(num => {\n  resolve(num + 5)\n})\n->then(num => {\n  Console.log2(\"Your lucky number is: \", num)\n  resolve()\n})\n->ignore\n```"
        ],
        "signature": "let then: (t<'a>, 'a => t<'b>) => t<'b>"
      },
      {
        "id": "Stdlib.Promise.thenResolve",
        "kind": "value",
        "name": "thenResolve",
        "docstrings": [
          "`thenResolve(promise, callback)` converts an encapsulated value of a promise\ninto another promise wrapped value. It is **not allowed** to return a promise\nwithin the provided callback (e.g. `thenResolve(value => resolve(value))`).\n\n## Examples\n\n```rescript\nopen Promise\nresolve(\"Anna\")\n->thenResolve(str => {\n  \"Hello \" ++ str\n})\n->thenResolve(str => {\n  Console.log(str)\n})\n->ignore // Ignore needed for side-effects\n```\n\nIn case you want to return another promise in your `callback`, consider using\n`then` instead."
        ],
        "signature": "let thenResolve: (t<'a>, 'a => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.Promise.finally",
        "kind": "value",
        "name": "finally",
        "docstrings": [
          "`finally(promise, callback)` is used to execute a function that is called no\nmatter if a promise was resolved or rejected. It will return the same `promise`\nit originally received. See [`Promise.finally`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally) on MDN.\n\n## Examples\n\n```rescript\nopen Promise\nexception SomeError(string)\nlet isDone = ref(false)\n\nresolve(5)\n->then(_ => {\n  reject(SomeError(\"test\"))\n})\n->then(v => {\n  Console.log2(\"final result\", v)\n  resolve()\n})\n->catch(_ => {\n  Console.log(\"Error handled\")\n  resolve()\n})\n->finally(() => {\n  Console.log(\"finally\")\n  isDone := true\n})\n->then(() => {\n  Console.log2(\"isDone:\", isDone.contents)\n  resolve()\n})\n->ignore\n```"
        ],
        "signature": "let finally: (t<'a>, unit => unit) => t<'a>"
      },
      {
        "id": "Stdlib.Promise.race",
        "kind": "value",
        "name": "race",
        "docstrings": [
          "`race(arr)` runs all promises concurrently and returns promise settles with the eventual state of the first promise that settles. See [`Promise.race`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race) on MDN.\n\n## Examples\n\n```rescript\nopen Promise\nlet racer = (ms, name) => {\n  Promise.make((resolve, _) => {\n    setTimeout(() => {\n      resolve(name)\n    }, ms)->TimeoutId.ignore\n  })\n}\n\nlet promises = [racer(1000, \"Turtle\"), racer(500, \"Hare\"), racer(100, \"Eagle\")]\n\nrace(promises)->then(winner => {\n  Console.log(\"The winner is \" ++ winner)\n  resolve()\n})\n```"
        ],
        "signature": "let race: array<t<'a>> => t<'a>"
      },
      {
        "id": "Stdlib.Promise.any",
        "kind": "value",
        "name": "any",
        "docstrings": [
          "`any(arr)` runs all promises concurrently and returns promise fulfills when any of the input's promises fulfills, with this first fulfillment value. See [`Promise.any`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any) on MDN.\n\n## Examples\n\n```rescript\nopen Promise\nlet racer = (ms, name) => {\n  Promise.make((resolve, _) => {\n    setTimeout(() => {\n      resolve(name)\n    }, ms)->TimeoutId.ignore\n  })\n}\n\nlet promises = [racer(1000, \"Turtle\"), racer(500, \"Hare\"), racer(100, \"Eagle\")]\n\nany(promises)->then(winner => {\n  Console.log(\"The winner is \" ++ winner)\n  resolve()\n})\n```"
        ],
        "signature": "let any: array<t<'a>> => t<'a>"
      },
      {
        "id": "Stdlib.Promise.all",
        "kind": "value",
        "name": "all",
        "docstrings": [
          "`all(promises)` runs all promises concurrently and returns a promise fulfills when all of the input's promises fulfill, with an array of the fulfillment values. See [`Promise.all`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all) on MDN.\n\n```rescript\nopen Promise\nlet promises = [resolve(1), resolve(2), resolve(3)]\n\nall(promises)\n->then(results => {\n  results->Array.forEach(num => {\n    Console.log2(\"Number: \", num)\n  })\n\n  resolve()\n})\n->ignore\n```"
        ],
        "signature": "let all: array<t<'a>> => t<array<'a>>"
      },
      {
        "id": "Stdlib.Promise.all2",
        "kind": "value",
        "name": "all2",
        "docstrings": [
          "`all2((p1, p2))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all2: ((t<'a>, t<'b>)) => t<('a, 'b)>"
      },
      {
        "id": "Stdlib.Promise.all3",
        "kind": "value",
        "name": "all3",
        "docstrings": [
          "`all3((p1, p2, p3))`. Like `all()`, but with a fixed size tuple of 3"
        ],
        "signature": "let all3: ((t<'a>, t<'b>, t<'c>)) => t<('a, 'b, 'c)>"
      },
      {
        "id": "Stdlib.Promise.all4",
        "kind": "value",
        "name": "all4",
        "docstrings": [
          "`all4((p1, p2, p3, p4))`. Like `all()`, but with a fixed size tuple of 4"
        ],
        "signature": "let all4: ((t<'a>, t<'b>, t<'c>, t<'d>)) => t<('a, 'b, 'c, 'd)>"
      },
      {
        "id": "Stdlib.Promise.all5",
        "kind": "value",
        "name": "all5",
        "docstrings": [
          "`all5((p1, p2, p3, p4, p5))`. Like `all()`, but with a fixed size tuple of 5"
        ],
        "signature": "let all5: (\n  (t<'a>, t<'b>, t<'c>, t<'d>, t<'e>),\n) => t<('a, 'b, 'c, 'd, 'e)>"
      },
      {
        "id": "Stdlib.Promise.all6",
        "kind": "value",
        "name": "all6",
        "docstrings": [
          "`all6((p1, p2, p4, p5, p6))`. Like `all()`, but with a fixed size tuple of 6\n\")"
        ],
        "signature": "let all6: (\n  (t<'a>, t<'b>, t<'c>, t<'d>, t<'e>, t<'f>),\n) => t<('a, 'b, 'c, 'd, 'e, 'f)>"
      },
      {
        "id": "Stdlib.Promise.settledResult",
        "kind": "type",
        "name": "settledResult",
        "docstrings": [],
        "signature": "type settledResult<'a> =\n  | Fulfilled({value: 'a})\n  | Rejected({reason: exn})"
      },
      {
        "id": "Stdlib.Promise.allSettled",
        "kind": "value",
        "name": "allSettled",
        "docstrings": [
          "`allSettled(promises)` runs all promises concurrently and returns promise fulfills when all of the input's promises settle with an array of objects that describe the outcome of each promise. See [`Promise.allSettled`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled) on MDN.\n\n```rescript\nopen Promise\n\nexception TestError(string)\n\nlet promises = [resolve(1), resolve(2), reject(TestError(\"some rejected promise\"))]\n\nallSettled(promises)\n->then(results => {\n  results->Array.forEach(result => {\n    switch result {\n    | Fulfilled({value: num}) => Console.log2(\"Number: \", num)\n    | Rejected({reason}) => Console.log(reason)\n    }\n  })\n\n  resolve()\n})\n->ignore\n```"
        ],
        "signature": "let allSettled: array<t<'a>> => t<array<settledResult<'a>>>"
      },
      {
        "id": "Stdlib.Promise.allSettled2",
        "kind": "value",
        "name": "allSettled2",
        "docstrings": [
          "`allSettled2((p1, p2))`. Like `allSettled()`, but with a fixed size tuple of 2"
        ],
        "signature": "let allSettled2: (\n  (t<'a>, t<'b>),\n) => t<(settledResult<'a>, settledResult<'b>)>"
      },
      {
        "id": "Stdlib.Promise.allSettled3",
        "kind": "value",
        "name": "allSettled3",
        "docstrings": [
          "`allSettled3((p1, p2, p3))`. Like `allSettled()`, but with a fixed size tuple of 3"
        ],
        "signature": "let allSettled3: (\n  (t<'a>, t<'b>, t<'c>),\n) => t<\n  (settledResult<'a>, settledResult<'b>, settledResult<'c>),\n>"
      },
      {
        "id": "Stdlib.Promise.allSettled4",
        "kind": "value",
        "name": "allSettled4",
        "docstrings": [
          "`allSettled4((p1, p2, p3, p4))`. Like `allSettled()`, but with a fixed size tuple of 4"
        ],
        "signature": "let allSettled4: (\n  (t<'a>, t<'b>, t<'c>, t<'d>),\n) => t<\n  (\n    settledResult<'a>,\n    settledResult<'b>,\n    settledResult<'c>,\n    settledResult<'d>,\n  ),\n>"
      },
      {
        "id": "Stdlib.Promise.allSettled5",
        "kind": "value",
        "name": "allSettled5",
        "docstrings": [
          "`allSettled5((p1, p2, p3, p4, p5))`. Like `allSettled()`, but with a fixed size tuple of 5"
        ],
        "signature": "let allSettled5: (\n  (t<'a>, t<'b>, t<'c>, t<'d>, t<'e>),\n) => t<\n  (\n    settledResult<'a>,\n    settledResult<'b>,\n    settledResult<'c>,\n    settledResult<'d>,\n    settledResult<'e>,\n  ),\n>"
      },
      {
        "id": "Stdlib.Promise.allSettled6",
        "kind": "value",
        "name": "allSettled6",
        "docstrings": [
          "`allSettled6((p1, p2, p4, p5, p6))`. Like `allSettled()`, but with a fixed size tuple of 6\n\")"
        ],
        "signature": "let allSettled6: (\n  (t<'a>, t<'b>, t<'c>, t<'d>, t<'e>, t<'f>),\n) => t<\n  (\n    settledResult<'a>,\n    settledResult<'b>,\n    settledResult<'c>,\n    settledResult<'d>,\n    settledResult<'e>,\n    settledResult<'f>,\n  ),\n>"
      },
      {
        "id": "Stdlib.Promise.done",
        "kind": "value",
        "name": "done",
        "docstrings": [
          "`done(p)` is a safe way to ignore a promise. If a value is anything else than a\npromise, it will raise a type error."
        ],
        "signature": "let done: promise<'a> => unit",
        "deprecated": "Please use `Promise.ignore` instead"
      },
      {
        "id": "Stdlib.Promise.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(promise)` ignores the provided promise and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: promise<'a> => unit"
      }
    ]
  },
  "stdlib/pair": {
    "id": "Stdlib.Pair",
    "name": "Pair",
    "docstrings": [
      "This module provides functions to work with pairs, which are 2-element tuples."
    ],
    "items": [
      {
        "id": "Stdlib.Pair.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t<'a, 'b> = ('a, 'b)"
      },
      {
        "id": "Stdlib.Pair.first",
        "kind": "value",
        "name": "first",
        "docstrings": [
          "`first(pair)` returns the first element of a pair.\n\n## Examples\n\n```rescript\nPair.first((1, 2)) == 1\n```"
        ],
        "signature": "let first: (('a, 'b)) => 'a"
      },
      {
        "id": "Stdlib.Pair.second",
        "kind": "value",
        "name": "second",
        "docstrings": [
          "`second(pair)` returns the second element of a pair.\n\n## Examples\n\n```rescript\nPair.second((1, 2)) == 2\n```"
        ],
        "signature": "let second: (('a, 'b)) => 'b"
      },
      {
        "id": "Stdlib.Pair.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(pair)` ignores the provided pair and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Pair.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(pair1, pair2, f1, f2)` check equality of `pair2` and `pair2` using `f1` for\nequality on the first element and `f2` for equality on the second element.\n\n## Examples\n\n```rescript\nPair.equal((1, \"test\"), (1, \"test\"), Int.equal, String.equal) == true\n\nPair.equal((1, \"test\"), (2, \"test\"), Int.equal, String.equal) == false\n```"
        ],
        "signature": "let equal: (\n  ('a, 'b),\n  ('c, 'd),\n  ('a, 'c) => bool,\n  ('b, 'd) => bool,\n) => bool"
      },
      {
        "id": "Stdlib.Pair.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(pair1, pair2, f1, f2)` compares two pairs, using `f1` to compare the first element\nand `f2` to compare the second element. Ordering is based on the first element,\nif they are equal, the second element is compared.\n\n## Examples\n\n```rescript\nPair.compare((1, \"a\"), (1, \"a\"), Int.compare, String.compare) == Ordering.equal\nPair.compare((1, \"a\"), (1, \"b\"), Int.compare, String.compare) == Ordering.less\nPair.compare((2, \"a\"), (1, \"b\"), Int.compare, String.compare) == Ordering.greater\n```"
        ],
        "signature": "let compare: (\n  ('a, 'b),\n  ('c, 'd),\n  ('a, 'c) => float,\n  ('b, 'd) => float,\n) => float"
      }
    ]
  },
  "stdlib/ordering": {
    "id": "Stdlib.Ordering",
    "name": "Ordering",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Ordering.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t = float"
      },
      {
        "id": "Stdlib.Ordering.less",
        "kind": "value",
        "name": "less",
        "docstrings": [],
        "signature": "let less: float"
      },
      {
        "id": "Stdlib.Ordering.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [],
        "signature": "let equal: float"
      },
      {
        "id": "Stdlib.Ordering.greater",
        "kind": "value",
        "name": "greater",
        "docstrings": [],
        "signature": "let greater: float"
      },
      {
        "id": "Stdlib.Ordering.isLess",
        "kind": "value",
        "name": "isLess",
        "docstrings": [],
        "signature": "let isLess: float => bool"
      },
      {
        "id": "Stdlib.Ordering.isEqual",
        "kind": "value",
        "name": "isEqual",
        "docstrings": [],
        "signature": "let isEqual: float => bool"
      },
      {
        "id": "Stdlib.Ordering.isGreater",
        "kind": "value",
        "name": "isGreater",
        "docstrings": [],
        "signature": "let isGreater: float => bool"
      },
      {
        "id": "Stdlib.Ordering.invert",
        "kind": "value",
        "name": "invert",
        "docstrings": [],
        "signature": "let invert: float => float"
      },
      {
        "id": "Stdlib.Ordering.fromInt",
        "kind": "value",
        "name": "fromInt",
        "docstrings": [],
        "signature": "let fromInt: int => float"
      },
      {
        "id": "Stdlib.Ordering.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(ordering)` ignores the provided ordering and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/option": {
    "id": "Stdlib.Option",
    "name": "Option",
    "docstrings": [
      "We represent the existence and nonexistence of a value by wrapping it with\nthe `option` type. In order to make it a bit more convenient to work with\noption-types, we provide utility-functions for it.\n\nThe `option` type is a part of the ReScript standard library which is defined\nlike this:\n\n```rescript\ntype option<'a> = None | Some('a)\n```\n\n```rescript\nlet someString: option<string> = Some(\"hello\")\n```"
    ],
    "items": [
      {
        "id": "Stdlib.Option.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an option of type 'a."],
        "signature": "type t<'a> = option<'a> = None | Some('a)"
      },
      {
        "id": "Stdlib.Option.filter",
        "kind": "value",
        "name": "filter",
        "docstrings": [
          "`filter(opt, f)` applies `f` to `opt`, if `f` returns `true`, then it returns `Some(value)`, otherwise returns `None`.\n\n## Examples\n\n```rescript\nOption.filter(Some(10), x => x > 5) // Some(10)\nOption.filter(Some(4), x => x > 5) // None\nOption.filter(None, x => x > 5) // None\n```"
        ],
        "signature": "let filter: (option<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Option.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(opt, f)` call `f` on `opt`. if `opt` is `Some(value)`, then if calls\n`f`, otherwise returns `unit`.\n\n## Examples\n\n```rescript\nOption.forEach(Some(\"thing\"), x => Console.log(x)) // logs \"thing\"\nOption.forEach(None, x => Console.log(x)) // returns ()\n```"
        ],
        "signature": "let forEach: (option<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Option.getExn",
        "kind": "value",
        "name": "getExn",
        "docstrings": [
          "`getExn(opt, ~message=?)` returns `value` if `opt` is `Some(value)`, otherwise throws an exception with the message provided, or a generic message if no message was provided.\n\n```rescript\nOption.getExn(Some(3)) == 3\n\nswitch Option.getExn(None) {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n\nswitch Option.getExn(None, ~message=\"was None!\") {\n| exception _ => assert(true) // Throws a JsError with the message \"was None!\"\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Throws an error if `opt` is `None`"
        ],
        "signature": "let getExn: (option<'a>, ~message: string=?) => 'a",
        "deprecated": "Use `getOrThrow` instead"
      },
      {
        "id": "Stdlib.Option.getOrThrow",
        "kind": "value",
        "name": "getOrThrow",
        "docstrings": [
          "`getOrThrow(opt, ~message=?)` returns `value` if `opt` is `Some(value)`, otherwise throws an exception with the message provided, or a generic message if no message was provided.\n\n```rescript\nOption.getOrThrow(Some(3)) == 3\n\nswitch Option.getOrThrow(None) {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n\nswitch Option.getOrThrow(None, ~message=\"was None!\") {\n| exception _ => assert(true) // Throws a JsError with the message \"was None!\"\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Throws an error if `opt` is `None`"
        ],
        "signature": "let getOrThrow: (option<'a>, ~message: string=?) => 'a"
      },
      {
        "id": "Stdlib.Option.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(opt)` returns `value` if `opt` is `Some(value)`, otherwise `undefined`.\n\n## Examples\n\n```rescript\nOption.getUnsafe(Some(3)) == 3\nOption.getUnsafe((None: option<int>)) // Returns `undefined`, which is not a valid `int`\n```\n\n## Notes\n\n- This is an unsafe operation. It assumes `value` is not `None`, and may cause undefined behaviour if it is."
        ],
        "signature": "let getUnsafe: option<'a> => 'a"
      },
      {
        "id": "Stdlib.Option.mapOr",
        "kind": "value",
        "name": "mapOr",
        "docstrings": [
          "`mapOr(opt, default, f)` returns `f(value)` if `opt` is `Some(value)`, otherwise `default`.\n\n## Examples\n\n```rescript\nlet someValue = Some(3)\nsomeValue->Option.mapOr(0, x => x + 5) // 8\n\nlet noneValue = None\nnoneValue->Option.mapOr(0, x => x + 5) // 0\n```"
        ],
        "signature": "let mapOr: (option<'a>, 'b, 'a => 'b) => 'b"
      },
      {
        "id": "Stdlib.Option.mapWithDefault",
        "kind": "value",
        "name": "mapWithDefault",
        "docstrings": [],
        "signature": "let mapWithDefault: (option<'a>, 'b, 'a => 'b) => 'b",
        "deprecated": "Use mapOr instead"
      },
      {
        "id": "Stdlib.Option.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(opt, f)` returns `Some(f(value))` if `opt` is `Some(value)`, otherwise `None`.\n\n## Examples\n\n```rescript\nOption.map(Some(3), x => x * x) // Some(9)\nOption.map(None, x => x * x) // None\n```"
        ],
        "signature": "let map: (option<'a>, 'a => 'b) => option<'b>"
      },
      {
        "id": "Stdlib.Option.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(opt, f)` returns `f(value)` if `opt` is `Some(value)`, otherwise `None`.\n\n## Examples\n\n```rescript\nlet addIfAboveOne = value =>\n  if value > 1 {\n    Some(value + 1)\n  } else {\n    None\n  }\n\nOption.flatMap(Some(2), addIfAboveOne) // Some(3)\nOption.flatMap(Some(-4), addIfAboveOne) // None\nOption.flatMap(None, addIfAboveOne) // None\n```"
        ],
        "signature": "let flatMap: (option<'a>, 'a => option<'b>) => option<'b>"
      },
      {
        "id": "Stdlib.Option.getOr",
        "kind": "value",
        "name": "getOr",
        "docstrings": [
          "`getOr(opt, default)` returns `value` if `opt` is `Some(value)`, otherwise `default`.\n\n## Examples\n\n```rescript\nOption.getOr(None, \"Banana\") // Banana\nOption.getOr(Some(\"Apple\"), \"Banana\") // Apple\n\nlet greet = (firstName: option<string>) => \"Greetings \" ++ firstName->Option.getOr(\"Anonymous\")\n\nSome(\"Jane\")->greet // \"Greetings Jane\"\nNone->greet // \"Greetings Anonymous\"\n```"
        ],
        "signature": "let getOr: (option<'a>, 'a) => 'a"
      },
      {
        "id": "Stdlib.Option.getWithDefault",
        "kind": "value",
        "name": "getWithDefault",
        "docstrings": [],
        "signature": "let getWithDefault: (option<'a>, 'a) => 'a",
        "deprecated": "Use getOr instead"
      },
      {
        "id": "Stdlib.Option.orElse",
        "kind": "value",
        "name": "orElse",
        "docstrings": [
          "`orElse(opt1, opt2)` returns `opt2` if `opt1` is `None`, otherwise `opt1`.\n\n## Examples\n\n```rescript\nOption.orElse(Some(1812), Some(1066)) == Some(1812)\nOption.orElse(None, Some(1066)) == Some(1066)\nOption.orElse(None, None) == None\n```"
        ],
        "signature": "let orElse: (option<'a>, option<'a>) => option<'a>"
      },
      {
        "id": "Stdlib.Option.isSome",
        "kind": "value",
        "name": "isSome",
        "docstrings": [
          "`isSome(opt)` returns `true` if `opt` is `Some(value)`, otherwise returns `false`.\n\n## Examples\n\n```rescript\nOption.isSome(None) // false\nOption.isSome(Some(1)) // true\n```"
        ],
        "signature": "let isSome: option<'a> => bool"
      },
      {
        "id": "Stdlib.Option.isNone",
        "kind": "value",
        "name": "isNone",
        "docstrings": [
          "`isNone(opt)` returns `true` if `opt` is `None`, false otherwise.\n\n## Examples\n\n```rescript\nOption.isNone(None) // true\nOption.isNone(Some(1)) // false\n```"
        ],
        "signature": "let isNone: option<'a> => bool"
      },
      {
        "id": "Stdlib.Option.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(opt1, opt2, f)` evaluates two optional values for equality with respect to a predicate function `f`. If both `opt1` and `opt2` are `None`, returns `true`.\nIf one of the arguments is `Some(value)` and the other is `None`, returns\n`false`.\nIf arguments are `Some(value1)` and `Some(value2)`, returns the result of\n`f(value1, value2)`, the predicate function `f` must return a bool.\n\n## Examples\n\n```rescript\nlet clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\nopen Option\n\nequal(Some(3), Some(15), clockEqual) // true\nequal(Some(3), None, clockEqual) // false\nequal(None, Some(3), clockEqual) // false\nequal(None, None, clockEqual) // true\n```"
        ],
        "signature": "let equal: (option<'a>, option<'b>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.Option.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(opt1, opt2, f)` compares two optional values with respect to given `f`.\n\nIf both `opt1` and `opt2` are `None`, it returns `0.`. If the first argument is `Some(value1)` and the second is `None`, returns `1.` (something is greater than nothing).\n\nIf the first argument is `None` and the second is `Some(value2)`, returns `-1.`\n(nothing is less than something).\n\nIf the arguments are `Some(value1)` and `Some(value2)`, returns the result of\n`f(value1, value2)`, `f` takes two arguments and returns `-1.` if the first\nargument is less than the second, `0.` if the arguments are equal, and `1.` if\nthe first argument is greater than the second.\n\n## Examples\n\n```rescript\nlet clockCompare = (a, b) => Int.compare(mod(a, 12), mod(b, 12))\n\nOption.compare(Some(3), Some(15), clockCompare) // 0.\nOption.compare(Some(3), Some(14), clockCompare) // 1.\nOption.compare(Some(2), Some(15), clockCompare) // (-1.)\nOption.compare(None, Some(15), clockCompare) // (-1.)\nOption.compare(Some(14), None, clockCompare) // 1.\nOption.compare(None, None, clockCompare) // 0.\n```"
        ],
        "signature": "let compare: (\n  option<'a>,\n  option<'b>,\n  ('a, 'b) => Ordering.t,\n) => Ordering.t"
      },
      {
        "id": "Stdlib.Option.all",
        "kind": "value",
        "name": "all",
        "docstrings": [
          "`all(options)` returns an option of array if all options are Some, otherwise returns None.\n\n## Examples\n\n```rescript\nOption.all([Some(1), Some(2), Some(3)]) // Some([1, 2, 3])\nOption.all([Some(1), None]) // None\n```"
        ],
        "signature": "let all: array<option<'a>> => option<array<'a>>"
      },
      {
        "id": "Stdlib.Option.all2",
        "kind": "value",
        "name": "all2",
        "docstrings": [
          "`all2((o1, o2))`. Like `all()`, but with a fixed size tuple of 2"
        ],
        "signature": "let all2: ((option<'a>, option<'b>)) => option<('a, 'b)>"
      },
      {
        "id": "Stdlib.Option.all3",
        "kind": "value",
        "name": "all3",
        "docstrings": [
          "`all3((o1, o2, o3))`. Like `all()`, but with a fixed size tuple of 3"
        ],
        "signature": "let all3: (\n  (option<'a>, option<'b>, option<'c>),\n) => option<('a, 'b, 'c)>"
      },
      {
        "id": "Stdlib.Option.all4",
        "kind": "value",
        "name": "all4",
        "docstrings": [
          "`all4((o1, o2, o3, o4))`. Like `all()`, but with a fixed size tuple of 4"
        ],
        "signature": "let all4: (\n  (option<'a>, option<'b>, option<'c>, option<'d>),\n) => option<('a, 'b, 'c, 'd)>"
      },
      {
        "id": "Stdlib.Option.all5",
        "kind": "value",
        "name": "all5",
        "docstrings": [
          "`all5((o1, o2, o3, o4, o5))`. Like `all()`, but with a fixed size tuple of 5"
        ],
        "signature": "let all5: (\n  (\n    option<'a>,\n    option<'b>,\n    option<'c>,\n    option<'d>,\n    option<'e>,\n  ),\n) => option<('a, 'b, 'c, 'd, 'e)>"
      },
      {
        "id": "Stdlib.Option.all6",
        "kind": "value",
        "name": "all6",
        "docstrings": [
          "`all6((o1, o2, o3, o4, o5, o6))`. Like `all()`, but with a fixed size tuple of 6"
        ],
        "signature": "let all6: (\n  (\n    option<'a>,\n    option<'b>,\n    option<'c>,\n    option<'d>,\n    option<'e>,\n    option<'f>,\n  ),\n) => option<('a, 'b, 'c, 'd, 'e, 'f)>"
      },
      {
        "id": "Stdlib.Option.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(option)` ignores the provided option and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: option<'a> => unit"
      }
    ]
  },
  "stdlib/object": {
    "id": "Stdlib.Object",
    "name": "Object",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Object.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make` create a new object that inherits the properties and methods from the standard built-in Object, such as `toString`. See [Object on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object)\n\n## Examples\n\n```rescript\nlet x = Object.make()\nx->Object.keysToArray->Array.length // 0\nx->Object.get(\"toString\")->Option.isSome // true\n```"
        ],
        "signature": "let make: unit => {..}"
      },
      {
        "id": "Stdlib.Object.is",
        "kind": "value",
        "name": "is",
        "docstrings": [
          "`is` determines if two objects are identical in all contexts. Objects, arrays, records, and other non-primitives are only identical if they reference the **exact** same object in memory. Primitives like ints, floats, and strings are identical if they have the same value. `+0` and `-0` are distinct. NaN is equal to itself. See [Object.is on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)\n\nIn most scenarios use `==` or `===` or the custom `equals` function (if provided) for the type.\n\n## Examples\n\n```rescript\nObject.is(25, 13) // false\nObject.is(\"abc\", \"abc\") // true\nObject.is(undefined, undefined) // true\nObject.is(undefined, null) // false\nObject.is(-0.0, 0.0) // false\nObject.is(list{1, 2}, list{1, 2}) // false\n\nObject.is([1, 2, 3], [1, 2, 3]) // false\n[1, 2, 3] == [1, 2, 3] // true\n[1, 2, 3] === [1, 2, 3] // false\n\nlet fruit = {\"name\": \"Apple\"}\nObject.is(fruit, fruit) // true\nObject.is(fruit, {\"name\": \"Apple\"}) // false\nfruit == {\"name\": \"Apple\"} // true\nfruit === {\"name\": \"Apple\"} // false\n```"
        ],
        "signature": "let is: ('a, 'a) => bool"
      },
      {
        "id": "Stdlib.Object.create",
        "kind": "value",
        "name": "create",
        "docstrings": [
          "`create` creates a new object, using an existing object as the prototype of the new object. See [Object.create on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\n\n**Note:** ReScript provides [first-class support for immutable objects](https://rescript-lang.org/docs/manual/latest/object) and [records](https://rescript-lang.org/docs/manual/latest/record). This is often safer and more convenient than using `create` and other functions in this module.\n\n## Examples\n\n```rescript\nlet x = {\"fruit\": \"banana\"}\nlet y = Object.create(x)\ny->Object.get(\"fruit\") // Some(\"banana\")\n```"
        ],
        "signature": "let create: {..} => {..}"
      },
      {
        "id": "Stdlib.Object.createWithProperties",
        "kind": "value",
        "name": "createWithProperties",
        "docstrings": [],
        "signature": "let createWithProperties: ({..}, {..}) => {..}"
      },
      {
        "id": "Stdlib.Object.createWithNull",
        "kind": "value",
        "name": "createWithNull",
        "docstrings": [],
        "signature": "let createWithNull: unit => {..}"
      },
      {
        "id": "Stdlib.Object.createWithNullAndProperties",
        "kind": "value",
        "name": "createWithNullAndProperties",
        "docstrings": [],
        "signature": "let createWithNullAndProperties: {..} => {..}"
      },
      {
        "id": "Stdlib.Object.assign",
        "kind": "value",
        "name": "assign",
        "docstrings": [
          "`assign(target, source)` copies enumerable own properties from the source to the target, overwriting properties with the same name. It returns the modified target object. A deep clone is not created; properties are copied by reference.\n\n**Warning:** ReScript provides compile-time support for type-safe access to JavaScript objects. This eliminates common errors such as accessing properties that do not exist, or using a property of type x as if it were a y. Using `assign` can bypass these safety checks and lead to run-time errors (if you are not careful). ReScript provides [first-class support for immutable objects](https://rescript-lang.org/docs/manual/latest/object) and [records](https://rescript-lang.org/docs/manual/latest/record). This is often safer and more convenient than using `assign` and other functions in this module.\n\nSee [Object.assign on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) or [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign).\n\n## Examples\n\n```rescript\nObject.assign({\"a\": 1}, {\"a\": 2}) // {\"a\": 2}\nObject.assign({\"a\": 1, \"b\": 2}, {\"a\": 0}) // {\"a\": 0, \"b\": 2}\nObject.assign({\"a\": 1}, {\"a\": null}) // {\"a\": null}\n```"
        ],
        "signature": "let assign: ({..}, {..}) => {..}"
      },
      {
        "id": "Stdlib.Object.assignMany",
        "kind": "value",
        "name": "assignMany",
        "docstrings": [
          "`assignMany(target, sources)` copies enumerable own properties from each source to the target, overwriting properties with the same name. Later sources' properties overwrite earlier ones. It returns the modified target object. A deep clone is not created; properties are copied by reference.\n\n**Note:** ReScript provides [first-class support for immutable objects](https://rescript-lang.org/docs/manual/latest/object), including spreading one object into another. This is often more convenient than using `assign` or `assignMany`.  \n\nSee [Object.assign on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign) or [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.assign)."
        ],
        "signature": "let assignMany: ({..}, array<{..}>) => {..}"
      },
      {
        "id": "Stdlib.Object.copy",
        "kind": "value",
        "name": "copy",
        "docstrings": [],
        "signature": "let copy: ({..} as 'a) => 'a"
      },
      {
        "id": "Stdlib.Object.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "`get` gets the value of a property by name. Returns `None` if the property does not exist or has the value `undefined`. Otherwise returns `Some`, including if the value is `null`.\n\n## Examples\n\n```rescript\n{\"a\": 1}->Object.get(\"a\") // Some(1)\n{\"a\": 1}->Object.get(\"b\") // None\n{\"a\": undefined}->Object.get(\"a\") // None\n{\"a\": null}->Object.get(\"a\") // Some(null)\n{\"a\": 1}->Object.get(\"toString\")->Option.isSome // true\n```"
        ],
        "signature": "let get: ({..}, string) => option<'a>"
      },
      {
        "id": "Stdlib.Object.getSymbol",
        "kind": "value",
        "name": "getSymbol",
        "docstrings": [
          "`getSymbol` gets the value of a property by symbol. Returns `None` if the property does not exist or has the value `undefined`. Otherwise returns `Some`, including if the value is `null`.\n\n## Examples\n\n```rescript\nlet fruit = Symbol.make(\"fruit\")\nlet x = Object.make()\nx->Object.setSymbol(fruit, \"banana\")\nx->Object.getSymbol(fruit) // Some(\"banana\")\n```"
        ],
        "signature": "let getSymbol: ({..}, Symbol.t) => option<'a>"
      },
      {
        "id": "Stdlib.Object.getSymbolUnsafe",
        "kind": "value",
        "name": "getSymbolUnsafe",
        "docstrings": [],
        "signature": "let getSymbolUnsafe: ({..}, Symbol.t) => 'a"
      },
      {
        "id": "Stdlib.Object.set",
        "kind": "value",
        "name": "set",
        "docstrings": [
          "`set(name, value)` assigns a value to the named object property, overwriting the previous value if any. See [Working with Objects on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#objects_and_properties)\n\n## Examples\n\n```rescript\n{\"a\": 1}->Object.set(\"a\", 2) // {\"a\": 2}\n{\"a\": 1}->Object.set(\"a\", None) // {\"a\": None}\n{\"a\": 1}->Object.set(\"b\", 2) // {\"a\": 1, \"b\": 2}\n```"
        ],
        "signature": "let set: ({..}, string, 'a) => unit"
      },
      {
        "id": "Stdlib.Object.setSymbol",
        "kind": "value",
        "name": "setSymbol",
        "docstrings": [],
        "signature": "let setSymbol: ({..}, Symbol.t, 'a) => unit"
      },
      {
        "id": "Stdlib.Object.keysToArray",
        "kind": "value",
        "name": "keysToArray",
        "docstrings": [
          "`keysToArray` returns an array of an object's own enumerable string-keyed property names. See [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.keys)\nor [Object.keys on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys).\n\n## Examples\n\n```rescript\n{\"a\": 1, \"b\": 2}->Object.keysToArray // [\"a\", \"b\"]\n{\"a\": None}->Object.keysToArray // [\"a\"]\nObject.make()->Object.keysToArray // []\n```"
        ],
        "signature": "let keysToArray: {..} => array<string>"
      },
      {
        "id": "Stdlib.Object.hasOwnProperty",
        "kind": "value",
        "name": "hasOwnProperty",
        "docstrings": [
          "`hasOwnProperty` determines whether the object has the specified property as its **own** property, as opposed to inheriting it. See [hasOwnProperty on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\n\n## Examples\n\n```rescript\nlet point = {\"x\": 1, \"y\": 2}\n{\"a\": 1}->Object.hasOwnProperty(\"a\") // true\n{\"a\": 1}->Object.hasOwnProperty(\"b\") // false\n{\"a\": 1}->Object.hasOwnProperty(\"toString\") // false\n```"
        ],
        "signature": "let hasOwnProperty: ({..}, string) => bool"
      },
      {
        "id": "Stdlib.Object.seal",
        "kind": "value",
        "name": "seal",
        "docstrings": [
          "`seal` seals an object. Sealing an object prevents extensions and makes existing properties non-configurable. A sealed object has a fixed set of properties. Unlike `freeze`, values of existing properties can still be changed as long as they are writable.\n\n**Note:** `seal` returns the same object that was passed in; it does not create a copy. Any attempt to delete or add properties to a sealed object will fail, either silently or by throwing an error.\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.seal) and [Object.seal on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal)\n\n## Examples\n\n```rescript\nlet point = {\"x\": 1, \"y\": 2}\npoint->Object.set(\"x\", -7) // succeeds\npoint->Object.seal->ignore\n\ntry {\n  point->Object.set(\"z\", 9) // fails\n} catch {\n| JsExn(_) => assert(true)\n| _ => assert(false)\n}\n\npoint->Object.set(\"x\", 13) // succeeds\n```"
        ],
        "signature": "let seal: ({..} as 'a) => 'a"
      },
      {
        "id": "Stdlib.Object.preventExtensions",
        "kind": "value",
        "name": "preventExtensions",
        "docstrings": [
          "`preventExtensions` prevents new properties from being added to the object. It modifies the object (rather than creating a copy) and returns it.\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.preventextensions) and [Object.preventExtensions on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions)\n\n## Examples\n\n```rescript\nlet obj = {\"a\": 1}\nobj->Object.set(\"b\", 2) // succeeds\nobj->Object.preventExtensions->ignore\ntry {\n  obj->Object.set(\"c\", 3) // fails\n} catch {\n| JsExn(_) => assert(true)\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let preventExtensions: ({..} as 'a) => 'a"
      },
      {
        "id": "Stdlib.Object.freeze",
        "kind": "value",
        "name": "freeze",
        "docstrings": [
          "`freeze` freezes an object. Freezing an object makes existing properties non-writable and prevents extensions. Once an object is frozen, new properties cannot be be added, existing properties cannot be removed, and their values cannot be changed.\n\n**Note:** `freeze` returns the same object that was passed in; it does not create a frozen copy. Any attempt to change a frozen object will fail, either silently or by throwing an exception.\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isfrozen) and [Object.isFrozen on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen).\n\n## Examples\n\n```rescript\nlet obj = {\"a\": 1}\nobj->Object.set(\"a\", 2) // succeeds\nobj->Object.freeze->ignore\n\ntry {\n  obj->Object.set(\"a\", 3) // fails\n} catch {\n| JsExn(_) => assert(true)\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let freeze: ({..} as 'a) => 'a"
      },
      {
        "id": "Stdlib.Object.isSealed",
        "kind": "value",
        "name": "isSealed",
        "docstrings": [
          "`isSealed` determines if an object is sealed. A sealed object has a fixed set of properties.\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.issealed) and [Object.isSealed on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed)\n\n## Examples\n\n```rescript\nlet point = {\"x\": 1, \"y\": 3}->Object.seal\nlet pointIsSealed = point->Object.isSealed // true\nlet fruit = {\"name\": \"Apple\"}\nlet fruitIsSealed = fruit->Object.isSealed // false\n```"
        ],
        "signature": "let isSealed: 'a => bool"
      },
      {
        "id": "Stdlib.Object.isFrozen",
        "kind": "value",
        "name": "isFrozen",
        "docstrings": [
          "`isFrozen` determines if an object is frozen. An object is frozen if an only if it is not extensible, all its properties are non-configurable, and all its data properties are non-writable.\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isfrozen) and [Object.isFrozen on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen).\n\n## Examples\n\n```rescript\nlet point = {\"x\": 1, \"y\": 3}->Object.freeze\nlet pointIsFrozen = point->Object.isFrozen // true\nlet fruit = {\"name\": \"Apple\"}\nlet fruitIsFrozen = fruit->Object.isFrozen // false\n```"
        ],
        "signature": "let isFrozen: 'a => bool"
      },
      {
        "id": "Stdlib.Object.isExtensible",
        "kind": "value",
        "name": "isExtensible",
        "docstrings": [
          "`isExtensible` determines if an object is extensible (whether it can have new properties added to it).\n\nSee [ECMAScript Language Specification](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-object.isextensible) and [Object.isExtensible on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible)\n\n## Examples\n\n```rescript\nlet obj = {\"a\": 1}\nobj->Object.isExtensible // true\nobj->Object.preventExtensions->ignore\nobj->Object.isExtensible // false\n```"
        ],
        "signature": "let isExtensible: 'a => bool"
      },
      {
        "id": "Stdlib.Object.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(object)` ignores the provided object and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: {..} => unit"
      }
    ]
  },
  "stdlib/nullable": {
    "id": "Stdlib.Nullable",
    "name": "Nullable",
    "docstrings": [
      "Functions for handling nullable values.\n\nPrimarily useful when interoping with JavaScript when you don't know whether you'll get a value, `null` or `undefined`."
    ],
    "items": [
      {
        "id": "Stdlib.Nullable.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "Type representing a nullable value.\nA nullable value can be the value `'a`, `null` or `undefined`."
        ],
        "signature": "@unboxed\ntype t<'a> = nullable<'a> =\n  | Value('a)\n  | @as(null) Null\n  | @as(undefined) Undefined"
      },
      {
        "id": "Stdlib.Nullable.null",
        "kind": "value",
        "name": "null",
        "docstrings": [
          "The value `null`.\n\nSee [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) on MDN.\n\n## Examples\n```rescript\nConsole.log(Nullable.null) // Logs `null` to the console.\n```"
        ],
        "signature": "let null: t<'a>"
      },
      {
        "id": "Stdlib.Nullable.undefined",
        "kind": "value",
        "name": "undefined",
        "docstrings": [
          "The value `undefined`.\n\nSee [`undefined`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/undefined) on MDN.\n\n## Examples\n```rescript\nConsole.log(undefined) // Logs `undefined` to the console.\n```"
        ],
        "signature": "let undefined: t<'a>"
      },
      {
        "id": "Stdlib.Nullable.isNullable",
        "kind": "value",
        "name": "isNullable",
        "docstrings": [
          "`isNullable(a)` returns `true` if `a` is null or undefined, `false` otherwise.\n\n## Examples\n\n```rescript\nlet myStr = \"Hello\"\nlet asNullable = myStr->Nullable.make\n\n// Can't do the below because we're now forced to check for nullability\n// myStr == asNullable\n\n// Check if asNullable is not null or undefined\nswitch asNullable->Nullable.isNullable {\n| true => assert(false)\n| false => assert(true)\n}\n```"
        ],
        "signature": "let isNullable: t<'a> => bool"
      },
      {
        "id": "Stdlib.Nullable.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new nullable value from the provided value.\nThis means the compiler will enforce null checks for the new value.\n\n## Examples\n```rescript\nlet myStr = \"Hello\"\nlet asNullable = myStr->Nullable.make\n\n// Can't do the below because we're now forced to check for nullability\n// myStr == asNullable\n\n// Need to do this\nswitch asNullable->Nullable.toOption {\n| Some(value) if value == myStr => Console.log(\"Yay, values matched!\")\n| _ => Console.log(\"Values did not match.\")\n}\n```"
        ],
        "signature": "let make: 'a => t<'a>"
      },
      {
        "id": "Stdlib.Nullable.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [],
        "signature": "let equal: (t<'a>, t<'b>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.Nullable.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [],
        "signature": "let compare: (t<'a>, t<'b>, ('a, 'b) => Ordering.t) => Ordering.t"
      },
      {
        "id": "Stdlib.Nullable.toOption",
        "kind": "value",
        "name": "toOption",
        "docstrings": [
          "Converts a nullable value into an option, so it can be pattern matched on.\nWill convert both `null` and `undefined` to `None`, and a present value to `Some(value)`.\n\n## Examples\n```rescript\nlet nullableString = Nullable.make(\"Hello\")\n\nswitch nullableString->Nullable.toOption {\n| Some(str) => Console.log2(\"Got string:\", str)\n| None => Console.log(\"Didn't have a value.\")\n}\n```"
        ],
        "signature": "let toOption: t<'a> => option<'a>"
      },
      {
        "id": "Stdlib.Nullable.fromOption",
        "kind": "value",
        "name": "fromOption",
        "docstrings": [
          "Turns an `option` into a `Nullable.t`.\n\n## Examples\n```rescript\nlet optString = Some(\"Hello\")\nlet asNullable = optString->Nullable.fromOption // Nullable.t<string>\n```"
        ],
        "signature": "let fromOption: option<'a> => t<'a>"
      },
      {
        "id": "Stdlib.Nullable.getOr",
        "kind": "value",
        "name": "getOr",
        "docstrings": [
          "`getOr(value, default)` returns `value` if not `null` or `undefined`,\notherwise return `default`.\n\n## Examples\n\n```rescript\nNullable.getOr(Nullable.null, \"Banana\") // Banana\nNullable.getOr(Nullable.make(\"Apple\"), \"Banana\") // Apple\n\nlet greet = (firstName: option<string>) => \"Greetings \" ++ firstName->Option.getOr(\"Anonymous\")\n\nNullable.make(\"Jane\")->Nullable.toOption->greet // \"Greetings Jane\"\nNullable.null->Nullable.toOption->greet // \"Greetings Anonymous\"\n```"
        ],
        "signature": "let getOr: (t<'a>, 'a) => 'a"
      },
      {
        "id": "Stdlib.Nullable.getWithDefault",
        "kind": "value",
        "name": "getWithDefault",
        "docstrings": [],
        "signature": "let getWithDefault: (t<'a>, 'a) => 'a",
        "deprecated": "Use getOr instead"
      },
      {
        "id": "Stdlib.Nullable.getExn",
        "kind": "value",
        "name": "getExn",
        "docstrings": [
          "`getExn(value)` raises an exception if `null` or `undefined`, otherwise returns the value.\n\n```rescript\nswitch Nullable.getExn(%raw(\"'Hello'\")) {\n| exception Invalid_argument(_) => assert(false)\n| value => value == \"Hello\"\n}\n\nswitch Nullable.getExn(%raw(\"null\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n\nswitch Nullable.getExn(%raw(\"undefined\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises `Invalid_argument` if `value` is `null` or `undefined`"
        ],
        "signature": "let getExn: t<'a> => 'a",
        "deprecated": "Use `getOrThrow` instead"
      },
      {
        "id": "Stdlib.Nullable.getOrThrow",
        "kind": "value",
        "name": "getOrThrow",
        "docstrings": [
          "`getOrThrow(value)` raises an exception if `null` or `undefined`, otherwise returns the value.\n\n```rescript\nswitch Nullable.getOrThrow(%raw(\"'Hello'\")) {\n| exception Invalid_argument(_) => assert(false)\n| value => value == \"Hello\"\n}\n\nswitch Nullable.getOrThrow(%raw(\"null\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n\nswitch Nullable.getOrThrow(%raw(\"undefined\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises `Invalid_argument` if `value` is `null` or `undefined`"
        ],
        "signature": "let getOrThrow: t<'a> => 'a"
      },
      {
        "id": "Stdlib.Nullable.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(value)` returns `value`.\n\n## Examples\n\n```rescript\nNullable.getUnsafe(Nullable.make(3)) == 3\nNullable.getUnsafe(Nullable.null) // Raises an error\n```\n\n## Important\n\n- This is an unsafe operation, it assumes `value` is not `null` or `undefined`."
        ],
        "signature": "let getUnsafe: t<'a> => 'a"
      },
      {
        "id": "Stdlib.Nullable.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(value, f)` call `f` on `value`. if `value` is not `null` or `undefined`,\nthen if calls `f`, otherwise returns `unit`.\n\n## Examples\n\n```rescript\nNullable.forEach(Nullable.make(\"thing\"), x => Console.log(x)) // logs \"thing\"\nNullable.forEach(Nullable.null, x => Console.log(x)) // returns ()\nNullable.forEach(undefined, x => Console.log(x)) // returns ()\n```"
        ],
        "signature": "let forEach: (t<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Nullable.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(value, f)` returns `f(value)` if `value` is not `null` or `undefined`,\notherwise returns `value` unchanged.\n\n## Examples\n\n```rescript\nNullable.map(Nullable.make(3), x => x * x) // Nullable.make(9)\nNullable.map(undefined, x => x * x) // undefined\n```"
        ],
        "signature": "let map: (t<'a>, 'a => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.Nullable.mapOr",
        "kind": "value",
        "name": "mapOr",
        "docstrings": [
          "`mapOr(value, default, f)` returns `f(value)` if `value` is not `null`\nor `undefined`, otherwise returns `default`.\n\n## Examples\n\n```rescript\nlet someValue = Nullable.make(3)\nsomeValue->Nullable.mapOr(0, x => x + 5) // 8\n\nlet noneValue = Nullable.null\nnoneValue->Nullable.mapOr(0, x => x + 5) // 0\n```"
        ],
        "signature": "let mapOr: (t<'a>, 'b, 'a => 'b) => 'b"
      },
      {
        "id": "Stdlib.Nullable.mapWithDefault",
        "kind": "value",
        "name": "mapWithDefault",
        "docstrings": [],
        "signature": "let mapWithDefault: (t<'a>, 'b, 'a => 'b) => 'b",
        "deprecated": "Use mapOr instead"
      },
      {
        "id": "Stdlib.Nullable.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(value, f)` returns `f(value)` if `value` is not `null` or `undefined`,\notherwise returns `value` unchanged.\n\n## Examples\n\n```rescript\nlet addIfAboveOne = value =>\n  if value > 1 {\n    Nullable.make(value + 1)\n  } else {\n    Nullable.null\n  }\n\nNullable.flatMap(Nullable.make(2), addIfAboveOne) // Nullable.make(3)\nNullable.flatMap(Nullable.make(-4), addIfAboveOne) // undefined\nNullable.flatMap(Nullable.null, addIfAboveOne) // undefined\n```"
        ],
        "signature": "let flatMap: (t<'a>, 'a => t<'b>) => t<'b>"
      },
      {
        "id": "Stdlib.Nullable.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(nullable)` ignores the provided nullable and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/null": {
    "id": "Stdlib.Null",
    "name": "Null",
    "docstrings": [
      "Functions for handling values that could be `null`.\n\nIf you also need to cover `undefined`, check out `Nullable` instead."
    ],
    "items": [
      {
        "id": "Stdlib.Null.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "A type representing a value that can be either `'a` or `null`."
        ],
        "signature": "@unboxed\ntype t<'a> = null<'a> =\n  | Value('a)\n  | @as(null) Null"
      },
      {
        "id": "Stdlib.Null.asNullable",
        "kind": "value",
        "name": "asNullable",
        "docstrings": [
          "Converts a `Null.t` into a `Nullable.t`.\n\n## Examples\n```rescript\nlet nullValue = Null.make(\"Hello\")\nlet asNullable = nullValue->Null.asNullable // Nullable.t<string>\n```"
        ],
        "signature": "let asNullable: t<'a> => Nullable.t<'a>"
      },
      {
        "id": "Stdlib.Null.null",
        "kind": "value",
        "name": "null",
        "docstrings": [
          "The value `null`.\n\nSee [`null`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null) on MDN.\n\n## Examples\n```rescript\nConsole.log(null) // Logs `null` to the console.\n```"
        ],
        "signature": "let null: t<'a>"
      },
      {
        "id": "Stdlib.Null.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "Creates a new `Null.t` from the provided value.\nThis means the compiler will enforce null checks for the new value.\n\n## Examples\n```rescript\nlet myStr = \"Hello\"\nlet asNullValue = myStr->Null.make // The compiler now thinks this can be `string` or `null`.\n```"
        ],
        "signature": "let make: 'a => t<'a>"
      },
      {
        "id": "Stdlib.Null.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(a, b, eq)` checks if `a` and `b` are equal.\nIf both are `Null.Value`, it will use function `eq` to check if the values are equal.\n\n## Examples\n```rescript\nlet a = Null.Value(1)\nlet b = Null.null\nlet c = Null.Value(2)\n\nNull.equal(a, b, Int.equal) == false\nNull.equal(a, c, Int.equal) == false\nNull.equal(Null.null, Null.null, Int.equal) == true\n```"
        ],
        "signature": "let equal: (t<'a>, t<'b>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.Null.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(a, b, cmp)` compares `a` and `b`.\nIf both are `Null.Value`, it will use function `cmp` to compare the values.\n\n## Examples\n```rescript\nlet a = Null.Value(1)\nlet b = Null.null\nlet c = Null.Value(2)\n\n// A value is greater than null\nNull.compare(a, b, Int.compare) == Ordering.greater\n// A value is less than null\nNull.compare(b, a, Int.compare) == Ordering.less\n// A null is equal to null\nNull.compare(Null.null, Null.null, Int.compare) == Ordering.equal\n// The compare function is used if both are `Null.Value`\nNull.compare(a, c, Int.compare) == Ordering.less\n```"
        ],
        "signature": "let compare: (t<'a>, t<'b>, ('a, 'b) => Ordering.t) => Ordering.t"
      },
      {
        "id": "Stdlib.Null.toOption",
        "kind": "value",
        "name": "toOption",
        "docstrings": [
          "Converts a nullable value into an option, so it can be pattern matched on.\nWill convert `null` to `None`, and a present value to `Some(value)`.\n\n## Examples\n```rescript\nlet nullStr = Null.make(\"Hello\")\n\nswitch nullStr->Null.toOption {\n| Some(str) => Console.log2(\"Got string:\", str)\n| None => Console.log(\"Didn't have a value.\")\n}\n```"
        ],
        "signature": "let toOption: t<'a> => option<'a>"
      },
      {
        "id": "Stdlib.Null.fromOption",
        "kind": "value",
        "name": "fromOption",
        "docstrings": [
          "Turns an `option` into a `Null.t`. `None` will be converted to `null`.\n\n## Examples\n```rescript\nlet optString: option<string> = None\nlet asNull = optString->Null.fromOption // Null.t<string>\nConsole.log(asNull == Null.null) // Logs `true` to the console.\n```"
        ],
        "signature": "let fromOption: option<'a> => t<'a>"
      },
      {
        "id": "Stdlib.Null.getOr",
        "kind": "value",
        "name": "getOr",
        "docstrings": [
          "`getOr(value, default)` returns `value` if not `null`, otherwise return\n`default`.\n\n## Examples\n\n```rescript\nNull.getOr(Null.null, \"Banana\") // Banana\nNull.getOr(Null.make(\"Apple\"), \"Banana\") // Apple\n\nlet greet = (firstName: option<string>) => \"Greetings \" ++ firstName->Option.getOr(\"Anonymous\")\n\nNull.make(\"Jane\")->Null.toOption->greet // \"Greetings Jane\"\nNull.null->Null.toOption->greet // \"Greetings Anonymous\"\n```"
        ],
        "signature": "let getOr: (t<'a>, 'a) => 'a"
      },
      {
        "id": "Stdlib.Null.getWithDefault",
        "kind": "value",
        "name": "getWithDefault",
        "docstrings": [],
        "signature": "let getWithDefault: (t<'a>, 'a) => 'a",
        "deprecated": "Use getOr instead"
      },
      {
        "id": "Stdlib.Null.getExn",
        "kind": "value",
        "name": "getExn",
        "docstrings": [
          "`getExn(value)` raises an exception if `null`, otherwise returns the value.\n\n```rescript\nNull.getExn(Null.make(3)) == 3\n\nswitch Null.getExn(%raw(\"'ReScript'\")) {\n| exception Invalid_argument(_) => assert(false)\n| value => value == \"ReScript\"\n}\n\nswitch Null.getExn(%raw(\"null\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises `Invalid_argument` if `value` is `null`"
        ],
        "signature": "let getExn: t<'a> => 'a",
        "deprecated": "Use `getOrThrow` instead"
      },
      {
        "id": "Stdlib.Null.getOrThrow",
        "kind": "value",
        "name": "getOrThrow",
        "docstrings": [
          "`getOrThrow(value)` raises an exception if `null`, otherwise returns the value.\n\n```rescript\nNull.getOrThrow(Null.make(3)) == 3\n\nswitch Null.getOrThrow(%raw(\"'ReScript'\")) {\n| exception Invalid_argument(_) => assert(false)\n| value => value == \"ReScript\"\n}\n\nswitch Null.getOrThrow(%raw(\"null\")) {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises `Invalid_argument` if `value` is `null`"
        ],
        "signature": "let getOrThrow: t<'a> => 'a"
      },
      {
        "id": "Stdlib.Null.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(value)` returns `value`.\n\n## Examples\n\n```rescript\nNull.getUnsafe(Null.make(3)) == 3\nNull.getUnsafe(Null.null) // Raises an error\n```\n\n## Important\n\n- This is an unsafe operation, it assumes `value` is not `null`."
        ],
        "signature": "let getUnsafe: t<'a> => 'a"
      },
      {
        "id": "Stdlib.Null.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(value, f)` call `f` on `value`. if `value` is not `null`, then if calls\n`f`, otherwise returns `unit`.\n\n## Examples\n\n```rescript\nNull.forEach(Null.make(\"thing\"), x => Console.log(x)) // logs \"thing\"\nNull.forEach(Null.null, x => Console.log(x)) // logs nothing\n```"
        ],
        "signature": "let forEach: (t<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Null.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(value, f)` returns `f(value)` if `value` is not `null`, otherwise returns\n`value` unchanged.\n\n## Examples\n\n```rescript\nNull.map(Null.make(3), x => x * x) // Null.make(9)\nNull.map(Null.null, x => x * x) // null\n```"
        ],
        "signature": "let map: (t<'a>, 'a => 'b) => t<'b>"
      },
      {
        "id": "Stdlib.Null.mapOr",
        "kind": "value",
        "name": "mapOr",
        "docstrings": [
          "`mapOr(value, default, f)` returns `f(value)` if `value` is not `null`,\notherwise returns `default`.\n\n## Examples\n\n```rescript\nlet someValue = Null.make(3)\nsomeValue->Null.mapOr(0, x => x + 5) // 8\n\nlet noneValue = Null.null\nnoneValue->Null.mapOr(0, x => x + 5) // 0\n```"
        ],
        "signature": "let mapOr: (t<'a>, 'b, 'a => 'b) => 'b"
      },
      {
        "id": "Stdlib.Null.mapWithDefault",
        "kind": "value",
        "name": "mapWithDefault",
        "docstrings": [],
        "signature": "let mapWithDefault: (t<'a>, 'b, 'a => 'b) => 'b",
        "deprecated": "Use mapOr instead"
      },
      {
        "id": "Stdlib.Null.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(value, f)` returns `f(value)` if `value` is not `null`, otherwise\nreturns `value` unchanged.\n\n## Examples\n\n```rescript\nlet addIfAboveOne = value =>\n  if value > 1 {\n    Null.make(value + 1)\n  } else {\n    Null.null\n  }\n\nNull.flatMap(Null.make(2), addIfAboveOne) // Null.make(3)\nNull.flatMap(Null.make(-4), addIfAboveOne) // null\nNull.flatMap(Null.null, addIfAboveOne) // null\n```"
        ],
        "signature": "let flatMap: (t<'a>, 'a => t<'b>) => t<'b>"
      },
      {
        "id": "Stdlib.Null.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(null)` ignores the provided null and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t<'a> => unit"
      }
    ]
  },
  "stdlib/math": {
    "id": "Stdlib.Math",
    "name": "Math",
    "docstrings": [
      "Functions for interacting with JavaScript Math.\nSee: [`Math`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math)."
    ],
    "items": [
      {
        "id": "Stdlib.Math.abs",
        "kind": "value",
        "name": "abs",
        "docstrings": [
          "`abs(v)` returns absolute value of `v`.\nSee [`Math.abs`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs) on MDN.\n\n## Examples\n\n```rescript\nMath.abs(-2.0) == 2.0\nMath.abs(3.0) == 3.0\n```"
        ],
        "signature": "let abs: float => float"
      },
      {
        "id": "Stdlib.Math.acos",
        "kind": "value",
        "name": "acos",
        "docstrings": [
          "`acos(v)` returns arccosine (in radians) of argument `v`, returns `NaN` if the\nargument is outside the range \\[-1.0, 1.0\\].\nSee [`Math.acos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos) on MDN.\n\n## Examples\n\n```rescript\nMath.acos(-1.0) == 3.141592653589793\nMath.acos(-3.0)->Float.isNaN == true\n```"
        ],
        "signature": "let acos: float => float"
      },
      {
        "id": "Stdlib.Math.acosh",
        "kind": "value",
        "name": "acosh",
        "docstrings": [
          "`acosh(v)` returns the inverse hyperbolic arccosine (in radians) of argument `v`,\nreturns `NaN` if the argument is less than `1.0`.\nSee [`Math.acosh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh) on MDN.\n\n## Examples\n\n```rescript\nMath.acosh(1.0) == 0.0\nMath.acosh(0.5)->Float.isNaN == true\n```"
        ],
        "signature": "let acosh: float => float"
      },
      {
        "id": "Stdlib.Math.asin",
        "kind": "value",
        "name": "asin",
        "docstrings": [
          "`asin(v)` returns the inverse sine (in radians) of argument `v`, returns `NaN`\nif the argument `v` is outside the range \\[-1.0, 1.0\\].\nSee [`Math.asin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin) on MDN.\n\n## Examples\n\n```rescript\nMath.asin(-1.0) == -1.5707963267948966\nMath.asin(-2.0)->Float.isNaN == true\n```"
        ],
        "signature": "let asin: float => float"
      },
      {
        "id": "Stdlib.Math.asinh",
        "kind": "value",
        "name": "asinh",
        "docstrings": [
          "`asinh(v)` returns the inverse hyperbolic sine of argument `v`.\nSee [`Math.asinh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh) on MDN.\n\n## Examples\n\n```rescript\nMath.asinh(-1.0) == -0.881373587019543\nMath.asinh(-0.0) == -0.0\n```"
        ],
        "signature": "let asinh: float => float"
      },
      {
        "id": "Stdlib.Math.atan",
        "kind": "value",
        "name": "atan",
        "docstrings": [
          "`atan(v)` returns the inverse tangent (in radians) of argument `v`.\nSee [`Math.atan`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan) on MDN.\n\n## Examples\n\n```rescript\nMath.atan(-0.0) == -0.0\nMath.atan(0.0) == 0.0\nMath.atan(1.0) == 0.7853981633974483\n```"
        ],
        "signature": "let atan: float => float"
      },
      {
        "id": "Stdlib.Math.atanh",
        "kind": "value",
        "name": "atanh",
        "docstrings": [
          "`atanh(v)` returns the invert hyperbolic tangent of argument `v`. Returns `NaN`\nif the argument `v` is is outside the range \\[-1.0, 1.0\\] and `Infinity` if `v`\nis `-1.0` or `1.0`.\nSee [`Math.atanh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh) on MDN.\n\n## Examples\n\n```rescript\nMath.atanh(-2.0)->Float.isNaN == true\nMath.atanh(-1.0)->Float.isFinite == false\nMath.atanh(-0.0) == -0.0\nMath.atanh(0.0) == 0.0\nMath.atanh(0.5) == 0.5493061443340548\n```"
        ],
        "signature": "let atanh: float => float"
      },
      {
        "id": "Stdlib.Math.atan2",
        "kind": "value",
        "name": "atan2",
        "docstrings": [
          "`atan2(~y, ~x)` returns the angle (in radians) of the quotient `y /. x`. It is\nalso the angle between the *x*\\-axis and point (*x*, *y*).\nSee [`Math.atan2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2) on MDN.\n\n## Examples\n\n```rescript\nMath.atan2(~y=0.0, ~x=10.0) == 0.0\nMath.atan2(~x=5.0, ~y=5.0) == Math.Constants.pi /. 4.0\nMath.atan2(~x=90.0, ~y=15.0) == 0.16514867741462683\nMath.atan2(~x=15.0, ~y=90.0) == 1.4056476493802699\n```"
        ],
        "signature": "let atan2: (~y: float, ~x: float) => float"
      },
      {
        "id": "Stdlib.Math.cbrt",
        "kind": "value",
        "name": "cbrt",
        "docstrings": [
          "`cbrt(v)` returns the cube root of argument `v`.\nSee [`Math.cbrt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt) on MDN.\n\n## Examples\n\n```rescript\nMath.cbrt(-1.0) == -1.0\nMath.cbrt(-0.0) == -0.0\nMath.cbrt(0.0) == 0.0\n```"
        ],
        "signature": "let cbrt: float => float"
      },
      {
        "id": "Stdlib.Math.ceil",
        "kind": "value",
        "name": "ceil",
        "docstrings": [
          "`ceil(v)` returns the smallest integral value greater than or equal to the\nargument `v`. The result is a `float` and is not restricted to the `int` data\ntype range.\nSee [`Math.ceil`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil) on MDN.\n\n## Examples\n\n```rescript\nMath.ceil(3.1) == 4.0\nMath.ceil(3.0) == 3.0\nMath.ceil(-3.1) == -3.0\nMath.ceil(2_150_000_000.3) == 2_150_000_001.0\n```"
        ],
        "signature": "let ceil: float => float"
      },
      {
        "id": "Stdlib.Math.cos",
        "kind": "value",
        "name": "cos",
        "docstrings": [
          "`cos(v)` returns the cosine of argument `v`, which must be specified in radians.\nSee [`Math.cos`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos) on MDN.\n\n## Examples\n\n```rescript\nMath.cos(-0.0) == 1.0\nMath.cos(0.0) == 1.0\nMath.cos(1.0) == 0.5403023058681398\n```"
        ],
        "signature": "let cos: float => float"
      },
      {
        "id": "Stdlib.Math.cosh",
        "kind": "value",
        "name": "cosh",
        "docstrings": [
          "`cosh(v)` returns the hyperbolic cosine of argument `v`, which must be specified\nin radians.\nSee [`Math.cosh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh) on MDN.\n\n## Examples\n\n```rescript\nMath.cosh(-1.0) == 1.5430806348152437\nMath.cosh(-0.0) == 1.0\nMath.cosh(0.0) == 1.0\n```"
        ],
        "signature": "let cosh: float => float"
      },
      {
        "id": "Stdlib.Math.exp",
        "kind": "value",
        "name": "exp",
        "docstrings": [
          "`exp(v)` returns natural exponentional, returns *e* (the base of natural logarithms)\nto the power of the given argument `v`.\nSee [`Math.exp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp) on MDN.\n\n## Examples\n\n```rescript\nMath.exp(-1.0) == 0.36787944117144233\nMath.exp(0.0) == 1.0\n```"
        ],
        "signature": "let exp: float => float"
      },
      {
        "id": "Stdlib.Math.expm1",
        "kind": "value",
        "name": "expm1",
        "docstrings": [
          "`expm1(v)` returns *e* (the base of natural logarithms) to the power of the given\nargument `v` minus 1.\nSee [`Math.expm1`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1) on MDN.\n\n## Examples\n\n```rescript\nMath.expm1(-1.0) == -0.6321205588285577\nMath.expm1(-0.0) == -0.0\n```"
        ],
        "signature": "let expm1: float => float"
      },
      {
        "id": "Stdlib.Math.floor",
        "kind": "value",
        "name": "floor",
        "docstrings": [
          "`floor(v)` returns the largest integral value less than or equal to the argument\n`v`. The result is a `float` and is not restricted to the `int` data type range.\nSee [`Math.floor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor) on MDN.\n\n## Examples\n\n```rescript\nMath.floor(-45.95) == -46.0\nMath.floor(-45.05) == -46.0\nMath.floor(-0.0) == -0.0\n```"
        ],
        "signature": "let floor: float => float"
      },
      {
        "id": "Stdlib.Math.fround",
        "kind": "value",
        "name": "fround",
        "docstrings": [
          "`fround(v)` returns the nearest single precision float.\nSee [`Math.fround`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround) on MDN.\n\n## Examples\n\n```rescript\nMath.fround(5.5) == 5.5\nMath.fround(5.05) == 5.050000190734863\n```"
        ],
        "signature": "let fround: float => float"
      },
      {
        "id": "Stdlib.Math.hypot",
        "kind": "value",
        "name": "hypot",
        "docstrings": [
          "`hypot(a, b)` returns the square root of the sum of squares of its two arguments\n(the Pythagorean formula).\nSee [`Math.hypot`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot) on MDN.\n\n## Examples\n\n```rescript\nMath.hypot(3.0, 4.0) == 5.0\nMath.hypot(3.0, 5.0) == 5.8309518948453\n```"
        ],
        "signature": "let hypot: (float, float) => float"
      },
      {
        "id": "Stdlib.Math.hypotMany",
        "kind": "value",
        "name": "hypotMany",
        "docstrings": [
          "`hypotMany(arr)` returns the square root of the sum of squares of the numbers in\nthe array argument (generalized Pythagorean equation). Using an array allows you\nto have more than two items. If `arr` is an empty array then returns `0.0`.\nSee [`Math.hypot`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot) on MDN.\n\n## Examples\n\n```rescript\nMath.hypotMany([3.0, 4.0, 5.0]) == 7.0710678118654755\nMath.hypotMany([]) == 0.0\n```"
        ],
        "signature": "let hypotMany: array<float> => float"
      },
      {
        "id": "Stdlib.Math.log",
        "kind": "value",
        "name": "log",
        "docstrings": [
          "`log(v)` returns the natural logarithm of argument `v`, this is the number *x*\nsuch that `e^x` equals the argument. Returns `NaN` for negative arguments and\n`Infinity` for `0.0` or `-0.0`.\nSee [`Math.log`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log) on MDN.\n\n## Examples\n\n```rescript\nMath.log(-1.0)->Float.isNaN == true\nMath.log(-0.0)->Float.isFinite == false\nMath.log(0.0)->Float.isFinite == false\nMath.log(1.0) == 0.0\n```"
        ],
        "signature": "let log: float => float"
      },
      {
        "id": "Stdlib.Math.log1p",
        "kind": "value",
        "name": "log1p",
        "docstrings": [
          "`log1p(v)` returns the natural logarithm of one plus the argument `v`.\nReturns `NaN` for arguments less than `-1` and `Infinity` if `v` is `-1.0`.\nSee [`Math.log1p`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p) on MDN.\n\n## Examples\n\n```rescript\nMath.log1p(-2.0)->Float.isNaN == true\nMath.log1p(-1.0)->Float.isFinite == false\nMath.log1p(-0.0) == -0.0\n```"
        ],
        "signature": "let log1p: float => float"
      },
      {
        "id": "Stdlib.Math.log10",
        "kind": "value",
        "name": "log10",
        "docstrings": [
          "`log10(v)` returns the base 10 logarithm of argument `v`. Returns `NaN` for\nnegative `v`. If `v` is `-0.0` or `0.0` returns `Infinity`.\nSee [`Math.log10`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10) on MDN.\n\n## Examples\n\n```rescript\nMath.log10(-2.0)->Float.isNaN == true\nMath.log10(-0.0)->Float.isFinite == false\nMath.log10(0.0)->Float.isFinite == false\nMath.log10(1.0) == 0.0\n```"
        ],
        "signature": "let log10: float => float"
      },
      {
        "id": "Stdlib.Math.log2",
        "kind": "value",
        "name": "log2",
        "docstrings": [
          "`log2(v)` returns the base 2 logarithm of argument `v`. Returns `NaN` for\nnegative `v` and `Infinity` if `v` is `-0.0` or `0.0`.\nSee [`Math.log2`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2) on MDN.\n\n## Examples\n\n```rescript\nMath.log2(-2.0)->Float.isNaN == true\nMath.log2(-0.0)->Float.isFinite == false\nMath.log2(0.0)->Float.isFinite == false\nMath.log2(1.0) == 0.0\n```"
        ],
        "signature": "let log2: float => float"
      },
      {
        "id": "Stdlib.Math.min",
        "kind": "value",
        "name": "min",
        "docstrings": [
          "`min(a, b)` returns the minimum of its two float arguments.\nSee [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) on MDN.\n\n## Examples\n\n```rescript\nMath.min(1.0, 2.0) == 1.0\nMath.min(-1.0, -2.0) == -2.0\n```"
        ],
        "signature": "let min: (float, float) => float"
      },
      {
        "id": "Stdlib.Math.minMany",
        "kind": "value",
        "name": "minMany",
        "docstrings": [
          "`minMany(arr)` returns the minimum of the float in the given array `arr`.\nReturns `Infinity` if `arr` is empty.\nSee [`Math.min`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min) on MDN.\n\n## Examples\n\n```rescript\nMath.minMany([1.0, 2.0]) == 1.0\nMath.minMany([-1.0, -2.0]) == -2.0\nMath.minMany([])->Float.isFinite == false\n```"
        ],
        "signature": "let minMany: array<float> => float"
      },
      {
        "id": "Stdlib.Math.max",
        "kind": "value",
        "name": "max",
        "docstrings": [
          "`max(a, b)` returns the maximum of its two float arguments.\nSee [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) on MDN.\n\n## Examples\n\n```rescript\nMath.max(1.0, 2.0) == 2.0\nMath.max(-1.0, -2.0) == -1.0\n```"
        ],
        "signature": "let max: (float, float) => float"
      },
      {
        "id": "Stdlib.Math.maxMany",
        "kind": "value",
        "name": "maxMany",
        "docstrings": [
          "`maxMany(arr)` returns the maximum of the float in the given array `arr`.\nReturns `Infinity` if `arr` is empty.\nSee [`Math.max`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max) on MDN.\n\n## Examples\n\n```rescript\nMath.maxMany([1.0, 2.0]) == 2.0\nMath.maxMany([-1.0, -2.0]) == -1.0\nMath.maxMany([])->Float.isFinite == false\n```"
        ],
        "signature": "let maxMany: array<float> => float"
      },
      {
        "id": "Stdlib.Math.pow",
        "kind": "value",
        "name": "pow",
        "docstrings": [
          "`pow(a, ~exp)` raises the given base `a` to the given exponent `exp`.\nSee [`Math.pow`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow) on MDN.\n\n## Examples\n\n```rescript\nMath.pow(2.0, ~exp=4.0) == 16.0\nMath.pow(3.0, ~exp=4.0) == 81.0\n```"
        ],
        "signature": "let pow: (float, ~exp: float) => float"
      },
      {
        "id": "Stdlib.Math.random",
        "kind": "value",
        "name": "random",
        "docstrings": [
          "`random()` returns a random number in the half-closed interval \\[0,1\\].\nSee [`Math.random`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random) on MDN.\n\n## Examples\n\n```rescript\nMath.random()\n```"
        ],
        "signature": "let random: unit => float"
      },
      {
        "id": "Stdlib.Math.round",
        "kind": "value",
        "name": "round",
        "docstrings": [
          "`round(v)` returns then value of `v` rounded to nearest integral value\n(expressed as a float). If the fractional portion of the argument `v` is greater\nthan `0.5`, the argument `v` is rounded to the float with the next higher\nabsolute value.\nSee [`Math.round`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round) on MDN.\n\n## Examples\n\n```rescript\nMath.round(-20.5) == -20.0\nMath.round(-0.1) == -0.0\nMath.round(0.0) == 0.0\nMath.round(-0.0) == -0.0\n```"
        ],
        "signature": "let round: float => float"
      },
      {
        "id": "Stdlib.Math.sign",
        "kind": "value",
        "name": "sign",
        "docstrings": [
          "`sign(v)` returns the sign of its foat argument: `-1` if negative, `0` if\nzero, `1` if positive.\nSee [`Math.sign`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign) on MDN.\n\n## Examples\n\n```rescript\nMath.sign(3.0) == 1.0\nMath.sign(-3.0) == -1.0\nMath.sign(0.0) == 0.0\n```"
        ],
        "signature": "let sign: float => float"
      },
      {
        "id": "Stdlib.Math.sin",
        "kind": "value",
        "name": "sin",
        "docstrings": [
          "`sin(v)` returns the sine of argument `v`, which must be specified in radians.\nSee [`Math.sin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin) on MDN.\n\n## Examples\n\n```rescript\nMath.sin(-0.0) == -0.0\nMath.sin(0.0) == 0.0\nMath.sin(1.0) == 0.8414709848078965\n```"
        ],
        "signature": "let sin: float => float"
      },
      {
        "id": "Stdlib.Math.sinh",
        "kind": "value",
        "name": "sinh",
        "docstrings": [
          "`sinh(v)` returns then hyperbolic sine of argument `v`, which must be specified\nin radians.\nSee [`Math.sinh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh) on MDN.\n\n## Examples\n\n```rescript\nMath.sinh(-0.0) == -0.0\nMath.sinh(0.0) == 0.0\nMath.sinh(1.0) == 1.1752011936438014\n```"
        ],
        "signature": "let sinh: float => float"
      },
      {
        "id": "Stdlib.Math.sqrt",
        "kind": "value",
        "name": "sqrt",
        "docstrings": [
          "`sqrt(v)` returns the square root of `v`. If `v` is negative returns `NaN`.\nSee [`Math.sqrt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt) on MDN.\n\n## Examples\n\n```rescript\nMath.sqrt(-1.0)->Float.isNaN == true\nMath.sqrt(-0.0) == -0.0\nMath.sqrt(0.0) == 0.0\nMath.sqrt(1.0) == 1.0\nMath.sqrt(9.0) == 3.0\n```"
        ],
        "signature": "let sqrt: float => float"
      },
      {
        "id": "Stdlib.Math.tan",
        "kind": "value",
        "name": "tan",
        "docstrings": [
          "`tan(v)` returns the tangent of argument `v`, which must be specified in\nradians. Returns `NaN` if `v` is positive `Infinity` or negative `Infinity`.\nSee [`Math.tan`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan) on MDN.\n\n## Examples\n\n```rescript\nMath.tan(-0.0) == -0.0\nMath.tan(0.0) == 0.0\nMath.tan(1.0) == 1.5574077246549023\n```"
        ],
        "signature": "let tan: float => float"
      },
      {
        "id": "Stdlib.Math.tanh",
        "kind": "value",
        "name": "tanh",
        "docstrings": [
          "`tanh(v)` returns the hyperbolic tangent of argument `v`, which must be\nspecified in radians.\nSee [`Math.tanh`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh) on MDN.\n\n## Examples\n\n```rescript\nMath.tanh(-0.0) == -0.0\nMath.tanh(0.0) == 0.0\nMath.tanh(1.0) == 0.7615941559557649\n```"
        ],
        "signature": "let tanh: float => float"
      },
      {
        "id": "Stdlib.Math.trunc",
        "kind": "value",
        "name": "trunc",
        "docstrings": [
          "`trunc(v)` truncates the argument `v`, i.e., removes fractional digits.\nSee [`Math.trunc`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc) on MDN.\n\n## Examples\n\n```rescript\nMath.trunc(0.123) == 0.0\nMath.trunc(1.999) == 1.0\nMath.trunc(13.37) == 13.0\nMath.trunc(42.84) == 42.0\n```"
        ],
        "signature": "let trunc: float => float"
      }
    ]
  },
  "stdlib/list": {
    "id": "Stdlib.List",
    "name": "List",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.List.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "Collection functions for manipulating the `list` data structures, a singly-linked list.\n\n**Prefer Array** if you need any of the following:\n\n- Random access of element\n- Better interop with JavaScript\n- Better memory usage & performance."
        ],
        "signature": "type t<'a> = list<'a>"
      },
      {
        "id": "Stdlib.List.length",
        "kind": "value",
        "name": "length",
        "docstrings": [
          "`length(list)` returns the length of `list`.\n\n## Examples\n\n```rescript\nList.length(list{1, 2, 3}) == 3\n```"
        ],
        "signature": "let length: list<'a> => int"
      },
      {
        "id": "Stdlib.List.size",
        "kind": "value",
        "name": "size",
        "docstrings": [
          "`size(list)`. See [`length`](#length)\n\n## Examples\n\n```rescript\nList.size(list{1, 2, 3}) == 3\n```"
        ],
        "signature": "let size: list<'a> => int"
      },
      {
        "id": "Stdlib.List.head",
        "kind": "value",
        "name": "head",
        "docstrings": [
          "`head(list)` returns `Some(value)` where `value` is the first element in the\nlist, or `None` if `list` is an empty list.\n\n## Examples\n\n```rescript\nList.head(list{}) == None\nList.head(list{1, 2, 3}) == Some(1)\n```"
        ],
        "signature": "let head: list<'a> => option<'a>"
      },
      {
        "id": "Stdlib.List.headExn",
        "kind": "value",
        "name": "headExn",
        "docstrings": [
          "`headExn(list)` same as [`head`](#head).\n\n## Examples\n\n```rescript\nList.headExn(list{1, 2, 3}) == 1\n\nswitch List.headExn(list{}) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if list is empty."
        ],
        "signature": "let headExn: list<'a> => 'a",
        "deprecated": "Use `headOrThrow` instead"
      },
      {
        "id": "Stdlib.List.headOrThrow",
        "kind": "value",
        "name": "headOrThrow",
        "docstrings": [
          "`headOrThrow(list)` same as [`head`](#head).\n\n## Examples\n\n```rescript\nList.headOrThrow(list{1, 2, 3}) == 1\n\nswitch List.headOrThrow(list{}) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if list is empty."
        ],
        "signature": "let headOrThrow: list<'a> => 'a"
      },
      {
        "id": "Stdlib.List.tail",
        "kind": "value",
        "name": "tail",
        "docstrings": [
          "`tail(list)` returns `None` if `list` is empty, otherwise it returns `Some(tail)`\nwhere `tail` is everything except the first element of `list`.\n\n## Examples\n\n```rescript\nList.tail(list{1, 2, 3}) == Some(list{2, 3})\n\nList.tail(list{}) == None\n```"
        ],
        "signature": "let tail: list<'a> => option<list<'a>>"
      },
      {
        "id": "Stdlib.List.tailExn",
        "kind": "value",
        "name": "tailExn",
        "docstrings": [
          "`tailExn(list)` same as [`tail`](#tail).\n\n## Examples\n\n```rescript\nList.tailExn(list{1, 2, 3}) == list{2, 3}\n\nswitch List.tailExn(list{}) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if list is empty."
        ],
        "signature": "let tailExn: list<'a> => list<'a>",
        "deprecated": "Use `tailOrThrow` instead"
      },
      {
        "id": "Stdlib.List.tailOrThrow",
        "kind": "value",
        "name": "tailOrThrow",
        "docstrings": [
          "`tailOrThrow(list)` same as [`tail`](#tail).\n\n## Examples\n\n```rescript\nList.tailOrThrow(list{1, 2, 3}) == list{2, 3}\n\nswitch List.tailOrThrow(list{}) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if list is empty."
        ],
        "signature": "let tailOrThrow: list<'a> => list<'a>"
      },
      {
        "id": "Stdlib.List.add",
        "kind": "value",
        "name": "add",
        "docstrings": [
          "`add(list, value)` adds a `value` to the beginning of list `list`.\n\n## Examples\n\n```rescript\nList.add(list{2, 3}, 1) == list{1, 2, 3}\n\nList.add(list{\"World\", \"!\"}, \"Hello\") == list{\"Hello\", \"World\", \"!\"}\n```"
        ],
        "signature": "let add: (list<'a>, 'a) => list<'a>"
      },
      {
        "id": "Stdlib.List.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "`get(list, index)` return the `index` element in `list`, or `None` if `index`\nis larger than the length of list `list`.\n\n## Examples\n\n```rescript\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->List.get(1) == Some(\"B\")\n\nabc->List.get(4) == None\n```"
        ],
        "signature": "let get: (list<'a>, int) => option<'a>"
      },
      {
        "id": "Stdlib.List.getExn",
        "kind": "value",
        "name": "getExn",
        "docstrings": [
          "`getExn(list, index)` same as [`get`](#get).\n\n## Examples\n\n```rescript\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->List.getExn(1) == \"B\"\n\nswitch abc->List.getExn(4) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if `index` is larger than the length of list."
        ],
        "signature": "let getExn: (list<'a>, int) => 'a",
        "deprecated": "Use `getOrThrow` instead"
      },
      {
        "id": "Stdlib.List.getOrThrow",
        "kind": "value",
        "name": "getOrThrow",
        "docstrings": [
          "`getOrThrow(list, index)` same as [`get`](#get).\n\n## Examples\n\n```rescript\nlet abc = list{\"A\", \"B\", \"C\"}\n\nabc->List.getOrThrow(1) == \"B\"\n\nswitch abc->List.getOrThrow(4) {\n| exception Not_found => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises an Error if `index` is larger than the length of list."
        ],
        "signature": "let getOrThrow: (list<'a>, int) => 'a"
      },
      {
        "id": "Stdlib.List.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(length, value)` returns a list of length `length` with each element filled\nwith `value`. Returns an empty list if `value` is negative.\n\n## Examples\n\n```rescript\nList.make(~length=3, 1) == list{1, 1, 1}\n```"
        ],
        "signature": "let make: (~length: int, 'a) => list<'a>"
      },
      {
        "id": "Stdlib.List.fromInitializer",
        "kind": "value",
        "name": "fromInitializer",
        "docstrings": [
          "`fromInitializer(length, f)` return a list of length `length` with element initialized\nwith `f`. Returns an empty list if `length` is negative.\n\n## Examples\n\n```rescript\nList.fromInitializer(~length=5, i => i) == list{0, 1, 2, 3, 4}\n\nList.fromInitializer(~length=5, i => i * i) == list{0, 1, 4, 9, 16}\n```"
        ],
        "signature": "let fromInitializer: (~length: int, int => 'a) => list<'a>"
      },
      {
        "id": "Stdlib.List.shuffle",
        "kind": "value",
        "name": "shuffle",
        "docstrings": [
          "`shuffle(list)` returns a new list in random order.\n\n## Examples\n\n```rescript\nList.shuffle(list{1, 2, 3}) // list{2, 1, 3}\n```"
        ],
        "signature": "let shuffle: list<'a> => list<'a>"
      },
      {
        "id": "Stdlib.List.toShuffled",
        "kind": "value",
        "name": "toShuffled",
        "docstrings": [
          "`toShuffled(list)` returns a new list in random order.\n\n## Examples\n\n```rescript\nList.toShuffled(list{1, 2, 3}) // list{2, 1, 3}\n```"
        ],
        "signature": "let toShuffled: list<'a> => list<'a>",
        "deprecated": "Use `shuffle` instead"
      },
      {
        "id": "Stdlib.List.drop",
        "kind": "value",
        "name": "drop",
        "docstrings": [
          "`drop(list, value)` return a new list, dropping the first `value` element.\nReturns `None` if `list` has fewer than `value` elements.\n\n## Examples\n\n```rescript\nlist{1, 2, 3}->List.drop(2) == Some(list{3})\n\nlist{1, 2, 3}->List.drop(3) == Some(list{})\n\nlist{1, 2, 3}->List.drop(4) == None\n```"
        ],
        "signature": "let drop: (list<'a>, int) => option<list<'a>>"
      },
      {
        "id": "Stdlib.List.take",
        "kind": "value",
        "name": "take",
        "docstrings": [
          "`take(list, value)` returns a list with the first `value` elements from `list`,\nor `None` if `list` has fewer than `value` elements.\n\n## Examples\n\n```rescript\nlist{1, 2, 3}->List.take(1) == Some(list{1})\n\nlist{1, 2, 3}->List.take(2) == Some(list{1, 2})\n\nlist{1, 2, 3}->List.take(4) == None\n```"
        ],
        "signature": "let take: (list<'a>, int) => option<list<'a>>"
      },
      {
        "id": "Stdlib.List.splitAt",
        "kind": "value",
        "name": "splitAt",
        "docstrings": [
          "`splitAt(list, n)` split the list `list` at `n`. Returns `None` when the length\nof `list` is less than `n`.\n\n## Examples\n\n```rescript\nlist{\"Hello\", \"World\"}->List.splitAt(1) == Some((list{\"Hello\"}, list{\"World\"}))\n\nlist{0, 1, 2, 3, 4}->List.splitAt(2) == Some((list{0, 1}, list{2, 3, 4}))\n```"
        ],
        "signature": "let splitAt: (list<'a>, int) => option<(list<'a>, list<'a>)>"
      },
      {
        "id": "Stdlib.List.concat",
        "kind": "value",
        "name": "concat",
        "docstrings": [
          "`concat(list1, list2)` returns the list obtained by adding `list2` after `list1`.\n\n## Examples\n\n```rescript\nList.concat(list{1, 2, 3}, list{4, 5}) == list{1, 2, 3, 4, 5}\n```"
        ],
        "signature": "let concat: (list<'a>, list<'a>) => list<'a>"
      },
      {
        "id": "Stdlib.List.concatMany",
        "kind": "value",
        "name": "concatMany",
        "docstrings": [
          "`concatMany(arr)` returns the list obtained by concatenating all the lists in\narray `arr`, in order.\n\n## Examples\n\n```rescript\nList.concatMany([list{1, 2, 3}, list{}, list{3}]) == list{1, 2, 3, 3}\n```"
        ],
        "signature": "let concatMany: array<list<'a>> => list<'a>"
      },
      {
        "id": "Stdlib.List.reverseConcat",
        "kind": "value",
        "name": "reverseConcat",
        "docstrings": [
          "`reverseConcat(list1, list2)` is equivalent to writing: `concat(reverse(list1, list2)`\n\n## Examples\n\n```rescript\nList.reverseConcat(list{1, 2}, list{3, 4}) == list{2, 1, 3, 4}\n```"
        ],
        "signature": "let reverseConcat: (list<'a>, list<'a>) => list<'a>"
      },
      {
        "id": "Stdlib.List.flat",
        "kind": "value",
        "name": "flat",
        "docstrings": [
          "`flat(list)` return the list obtained by concatenating all the lists in\n`list`, in order.\n\n## Examples\n\n```rescript\nList.flat(list{list{1, 2, 3}, list{}, list{3}}) == list{1, 2, 3, 3}\n```"
        ],
        "signature": "let flat: list<list<'a>> => list<'a>"
      },
      {
        "id": "Stdlib.List.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(list, f)` returns a new list with `f` applied to each element of `list`.\n\n## Examples\n\n```rescript\nlist{1, 2}->List.map(x => x + 1) == list{2, 3}\n```"
        ],
        "signature": "let map: (list<'a>, 'a => 'b) => list<'b>"
      },
      {
        "id": "Stdlib.List.zip",
        "kind": "value",
        "name": "zip",
        "docstrings": [
          "`zip(list1, list2)` returns a list of pairs from the two lists with the length\nof the shorter list.\n\n## Examples\n\n```rescript\nList.zip(list{1, 2}, list{3, 4, 5}) == list{(1, 3), (2, 4)}\n```"
        ],
        "signature": "let zip: (list<'a>, list<'b>) => list<('a, 'b)>"
      },
      {
        "id": "Stdlib.List.zipBy",
        "kind": "value",
        "name": "zipBy",
        "docstrings": [
          "`zipBy(list1, list2, f)`. See [`zip`](#zip)\n\n## Examples\n\n```rescript\nList.zipBy(list{1, 2, 3}, list{4, 5}, (a, b) => 2 * a + b) == list{6, 9}\n```"
        ],
        "signature": "let zipBy: (list<'a>, list<'b>, ('a, 'b) => 'c) => list<'c>"
      },
      {
        "id": "Stdlib.List.mapWithIndex",
        "kind": "value",
        "name": "mapWithIndex",
        "docstrings": [
          "`mapWithIndex(list, f)` applies `f` to each element of `list`. Function `f`\ntakes two arguments: the index starting from 0 and the element from `list`, in\nthat order.\n\n## Examples\n\n```rescript\nlist{1, 2, 3}->List.mapWithIndex((x, index) => index + x) == list{1, 3, 5}\n```"
        ],
        "signature": "let mapWithIndex: (list<'a>, ('a, int) => 'b) => list<'b>"
      },
      {
        "id": "Stdlib.List.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray(arr)` converts the given array `arr` to a list.\n\n## Examples\n\n```rescript\nList.fromArray([1, 2, 3]) == list{1, 2, 3}\n```"
        ],
        "signature": "let fromArray: array<'a> => list<'a>"
      },
      {
        "id": "Stdlib.List.toArray",
        "kind": "value",
        "name": "toArray",
        "docstrings": [
          "`toArray(list)` converts the given list `list` to an array.\n\n## Examples\n\n```rescript\nList.toArray(list{1, 2, 3}) == [1, 2, 3]\n```"
        ],
        "signature": "let toArray: list<'a> => array<'a>"
      },
      {
        "id": "Stdlib.List.reverse",
        "kind": "value",
        "name": "reverse",
        "docstrings": [
          "`reverse(list)` returns a new list whose elements are those of `list` in\nreversed order.\n\n## Examples\n\n```rescript\nList.reverse(list{1, 2, 3}) == list{3, 2, 1}\n```"
        ],
        "signature": "let reverse: list<'a> => list<'a>"
      },
      {
        "id": "Stdlib.List.mapReverse",
        "kind": "value",
        "name": "mapReverse",
        "docstrings": [
          "`mapReverse(list, f)` is equivalent to `map` function.\n\n## Examples\n\n```rescript\nlet f = x => x * x\nlet l = list{3, 4, 5}\n\nlet withMap = List.map(l, f)->List.reverse\nlet withMapReverse = l->List.mapReverse(f)\n\nConsole.log(withMap == withMapReverse) // true\n```"
        ],
        "signature": "let mapReverse: (list<'a>, 'a => 'b) => list<'b>"
      },
      {
        "id": "Stdlib.List.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(list, f)` call `f` on each element of `list` from the beginning to end.\n`f` returns `unit`, so no new array is created. Use `forEach` when you are primarily\nconcerned with repetitively creating side effects.\n\n## Examples\n\n```rescript\nList.forEach(list{\"a\", \"b\", \"c\"}, x => Console.log(\"Item: \" ++ x))\n/*\n  prints:\n  Item: a\n  Item: b\n  Item: c\n*/\n```"
        ],
        "signature": "let forEach: (list<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.List.forEachWithIndex",
        "kind": "value",
        "name": "forEachWithIndex",
        "docstrings": [
          "`forEachWithIndex(list, f, index)` call `f` on each element of `list` from beginning\nto end. Function `f` takes two arguments: the `index` starting from 0 and the\nelement from `list`. `f` returns `unit`.\n\n## Examples\n\n```rescript\nList.forEachWithIndex(list{\"a\", \"b\", \"c\"}, (x, index) => {\n  Console.log(\"Item \" ++ Int.toString(index) ++ \" is \" ++ x)\n})\n/*\n  prints:\n  Item 0 is a\n  Item 1 is b\n  Item 2 is cc\n*/\n```"
        ],
        "signature": "let forEachWithIndex: (list<'a>, ('a, int) => unit) => unit"
      },
      {
        "id": "Stdlib.List.reduce",
        "kind": "value",
        "name": "reduce",
        "docstrings": [
          "`reduce(list, initialValue, f)` applies `f` to each element of `list` from\nbeginning to end. Function `f` has two parameters: the item from the list and\nan \"accumulator\", which starts with a value of `initialValue`. `reduce` returns\nthe final value of the accumulator.\n\n## Examples\n\n```rescript\nlist{1, 2, 3, 4}->List.reduce(0, (a, b) => a + b) == 10\n\n// same as\n\nlist{1, 2, 3, 4}->List.reduce(0, (acc, item) => acc + item) == 10\n```"
        ],
        "signature": "let reduce: (list<'a>, 'b, ('b, 'a) => 'b) => 'b"
      },
      {
        "id": "Stdlib.List.reduceWithIndex",
        "kind": "value",
        "name": "reduceWithIndex",
        "docstrings": [
          "`reduceWithIndex(list, initialValue, f)` applies `f` to each element of `list`\nfrom beginning to end. Function `f` has three parameters: the item from the list\nand an \"accumulator\", which starts with a value of `initialValue` and the index\nof each element. `reduceWithIndex` returns the final value of the accumulator.\n\n## Examples\n\n```rescript\nlist{1, 2, 3, 4}->List.reduceWithIndex(0, (acc, item, index) => acc + item + index) == 16\n```"
        ],
        "signature": "let reduceWithIndex: (list<'a>, 'b, ('b, 'a, int) => 'b) => 'b"
      },
      {
        "id": "Stdlib.List.reduceReverse",
        "kind": "value",
        "name": "reduceReverse",
        "docstrings": [
          "`reduceReverse(list, initialValue, f)` works like `reduce`, except that\nfunction `f` is applied to each item of `list` from the last back to the first.\n\n## Examples\n\n```rescript\nlist{1, 2, 3, 4}->List.reduceReverse(0, (a, b) => a + b) == 10\n\nlist{1, 2, 3, 4}->List.reduceReverse(10, (a, b) => a - b) == 0\n\nlist{1, 2, 3, 4}->List.reduceReverse(list{}, List.add) == list{1, 2, 3, 4}\n```"
        ],
        "signature": "let reduceReverse: (list<'a>, 'b, ('b, 'a) => 'b) => 'b"
      },
      {
        "id": "Stdlib.List.mapReverse2",
        "kind": "value",
        "name": "mapReverse2",
        "docstrings": [
          "`mapReverse2(list1, list2, f)` is equivalent to `List.zipBy(list1, list2, f)->List.reverse`.\n\n## Examples\n\n```rescript\nList.mapReverse2(list{1, 2, 3}, list{1, 2}, (a, b) => a + b) == list{4, 2}\n```"
        ],
        "signature": "let mapReverse2: (list<'a>, list<'b>, ('a, 'b) => 'c) => list<'c>"
      },
      {
        "id": "Stdlib.List.forEach2",
        "kind": "value",
        "name": "forEach2",
        "docstrings": [
          "`forEach2(list1, list2, f)` is similar to `forEach`, but accepts two lists and\nstops at the length of the shorter list.\n\n## Examples\n\n```rescript\nList.forEach2(list{\"Z\", \"Y\"}, list{\"A\", \"B\", \"C\"}, (x, y) => Console.log2(x, y))\n\n/*\n  prints:\n  \"Z\" \"A\"\n  \"Y\" \"B\"\n*/\n```"
        ],
        "signature": "let forEach2: (list<'a>, list<'b>, ('a, 'b) => 'c) => unit"
      },
      {
        "id": "Stdlib.List.reduce2",
        "kind": "value",
        "name": "reduce2",
        "docstrings": [
          "`reduce2(list1, list2, initialValue, f)` applies `f` to each element of `list1`\nand `list2` from beginning to end. Stops with the shorter list. Function `f` has\nthree parameters: an accumulator which starts with a value of `initialValue`, an\nitem from `l1`, and an item from `l2`. `reduce2` returns the final value of the\naccumulator.\n\n## Examples\n\n```rescript\nList.reduce2(list{1, 2, 3}, list{4, 5}, 0, (acc, x, y) => acc + x * x + y) ==\n  0 + (1 * 1 + 4) + (2 * 2 + 5)\n```"
        ],
        "signature": "let reduce2: (list<'b>, list<'c>, 'a, ('a, 'b, 'c) => 'a) => 'a"
      },
      {
        "id": "Stdlib.List.reduceReverse2",
        "kind": "value",
        "name": "reduceReverse2",
        "docstrings": [
          "`reduceReverse2(list1, list2, initialValue, f)` applies `f` to each element of\n`list1` and `list2`from end to beginning. Stops with the shorter list. Function\n`f` has three parameters: an accumulator which starts with a value of\n`initialValue`, an item from `l1`, and an item from `l2`. `reduce2` returns the\nfinal value of the accumulator.\n\n## Examples\n\n```rescript\nList.reduceReverse2(list{1, 2, 3}, list{4, 5}, 0, (acc, x, y) => acc + x * x + y) ==\n  0 + (1 * 1 + 4) + (2 * 2 + 5)\n```"
        ],
        "signature": "let reduceReverse2: (list<'a>, list<'b>, 'c, ('c, 'a, 'b) => 'c) => 'c"
      },
      {
        "id": "Stdlib.List.every",
        "kind": "value",
        "name": "every",
        "docstrings": [
          "`every(list, f)` returns `true` if all elements in `list` satisfy `f`, where `f`\nis a predicate: a function taking an element and returning a bool.\n\n## Examples\n\n```rescript\nlet isBelow10 = value => value < 10\n\nlist{1, 9, 8, 2}->List.every(isBelow10) == true\n\nlist{1, 99, 8, 2}->List.every(isBelow10) == false\n```"
        ],
        "signature": "let every: (list<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.List.some",
        "kind": "value",
        "name": "some",
        "docstrings": [
          "`some(list, f)` returns `true` if at least _one_ of the elements in `list`\nsatisfies `f`, where `f` is a predicate: a function taking an element and\nreturning a bool.\n\n## Examples\n\n```rescript\nlet isAbove100 = value => value > 100\n\nlist{101, 1, 2, 3}->List.some(isAbove100) == true\n\nlist{1, 2, 3, 4}->List.some(isAbove100) == false\n```"
        ],
        "signature": "let some: (list<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.List.every2",
        "kind": "value",
        "name": "every2",
        "docstrings": [
          "`every2(list1, list2, f)` returns `true` if predicate `f` is `true` for all\npairs of elements up to the shorter length (i.e. `min(length(list1), length(list2))`)\n\n## Examples\n\n```rescript\nList.every2(list{1, 2, 3}, list{0, 1}, (a, b) => a > b) == true\n\nList.every2(list{}, list{1}, (a, b) => a > b) == true\n\nList.every2(list{2, 3}, list{1}, (a, b) => a > b) == true\n\nList.every2(list{0, 1}, list{5, 0}, (a, b) => a > b) == false\n```"
        ],
        "signature": "let every2: (list<'a>, list<'b>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.List.some2",
        "kind": "value",
        "name": "some2",
        "docstrings": [
          "`some2(list1, list2, f)` returns `true` if predicate `f` is `true` for any pair\nof elements up to the shorter length (i.e. `min(length(list1), length(list2))`)\n\n## Examples\n\n```rescript\nList.some2(list{1, 2, 3}, list{0, 1}, (a, b) => a > b) == true\n\nList.some2(list{}, list{1}, (a, b) => a > b) == false\n\nList.some2(list{2, 3}, list{1}, (a, b) => a > b) == true\n\nList.some2(list{0, 1}, list{5, 0}, (a, b) => a > b) == true\n```"
        ],
        "signature": "let some2: (list<'a>, list<'b>, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.List.compareLength",
        "kind": "value",
        "name": "compareLength",
        "docstrings": [
          "`compareLength(list1, list2)` compare two lists solely by length. Returns `-1.` if\n`length(list1)` is less than `length(list2)`, `0.` if `length(list1)` equals\n`length(list2)`, and `1.` if `length(list1)` is greater than `length(list2)`.\n\n## Examples\n\n```rescript\nList.compareLength(list{1, 2}, list{3, 4, 5, 6}) == -1.\n\nList.compareLength(list{1, 2, 3}, list{4, 5, 6}) == 0.\n\nList.compareLength(list{1, 2, 3, 4}, list{5, 6}) == 1.\n```"
        ],
        "signature": "let compareLength: (list<'a>, list<'a>) => Ordering.t"
      },
      {
        "id": "Stdlib.List.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(list1, list2, f)` compare elements one by one `f`. `f` returns a negative\nnumber if `list1` is \"less than\" `list2`, zero if `list1` is \"equal to\" `list2`,\na positive number if `list1` is \"greater than\" `list2`.\n\nThe comparison returns the first non-zero result of `f`, or zero if `f` returns\nzero for all `list1` and `list2`.\n\n- If all items have compared equal, but `list1` is exhausted first, return `-1.`. (`list1` is shorter).\n- If all items have compared equal, but `list2` is exhausted first, return `1.` (`list1` is longer).\n\n## Examples\n\n```rescript\nList.compare(list{3}, list{3, 7}, (a, b) => Int.compare(a, b)) == -1.\nList.compare(list{5, 3}, list{5}, (a, b) => Int.compare(a, b)) == 1.\nList.compare(list{1, 3, 5}, list{1, 4, 2}, (a, b) => Int.compare(a, b)) == -1.\nList.compare(list{1, 3, 5}, list{1, 2, 3}, (a, b) => Int.compare(a, b)) == 1.\nList.compare(list{1, 3, 5}, list{1, 3, 5}, (a, b) => Int.compare(a, b)) == 0.\n```\n\n**Please note:** The total ordering of List is different from Array,\nfor Array, we compare the length first and, only if the lengths are equal, elements one by one.\nFor lists, we just compare elements one by one."
        ],
        "signature": "let compare: (list<'a>, list<'a>, ('a, 'a) => Ordering.t) => Ordering.t"
      },
      {
        "id": "Stdlib.List.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(list1, list2, f)` check equality of `list2` and `list2` using `f` for\nequality on elements, where `f` is a function that returns `true` if items `x` and\n`y` meet some criterion for equality, `false` otherwise. equal `false` if length\nof `list1` and `list2` are not the same.\n\n## Examples\n\n```rescript\nList.equal(list{1, 2, 3}, list{1, 2}, (a, b) => a == b) == false\n\nList.equal(list{1, 2}, list{1, 2}, (a, b) => a == b) == true\n\nList.equal(list{1, 2, 3}, list{-1, -2, -3}, (a, b) => abs(a) == abs(b)) == true\n```"
        ],
        "signature": "let equal: (list<'a>, list<'a>, ('a, 'a) => bool) => bool"
      },
      {
        "id": "Stdlib.List.has",
        "kind": "value",
        "name": "has",
        "docstrings": [
          "`has(list, element, f)` returns `true` if the list contains at least one\n`element` for which `f` returns \\`true'.\n\n## Examples\n\n```rescript\nlist{1, 2, 3}->List.has(2, (a, b) => a == b) == true\n\nlist{1, 2, 3}->List.has(4, (a, b) => a == b) == false\n\nlist{-1, -2, -3}->List.has(2, (a, b) => abs(a) == abs(b)) == true\n```"
        ],
        "signature": "let has: (list<'a>, 'b, ('a, 'b) => bool) => bool"
      },
      {
        "id": "Stdlib.List.find",
        "kind": "value",
        "name": "find",
        "docstrings": [
          "`find(list, f)` returns `Some(value)` for the first value in `list` that\nsatisfies the predicate function `f`. Returns `None` if no element satisfies\nthe function.\n\n## Examples\n\n```rescript\nList.find(list{1, 4, 3, 2}, x => x > 3) == Some(4)\n\nList.find(list{1, 4, 3, 2}, x => x > 4) == None\n```"
        ],
        "signature": "let find: (list<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.List.filter",
        "kind": "value",
        "name": "filter",
        "docstrings": [
          "`filter(list, f)` returns a list of all elements in `list` which satisfy the\npredicate function `f`.\n\n## Examples\n\n```rescript\nlet isEven = x => mod(x, 2) == 0\n\nList.filter(list{1, 2, 3, 4}, isEven) == list{2, 4}\n\nList.filter(list{None, Some(2), Some(3), None}, Option.isSome) == list{Some(2), Some(3)}\n```"
        ],
        "signature": "let filter: (list<'a>, 'a => bool) => list<'a>"
      },
      {
        "id": "Stdlib.List.filterWithIndex",
        "kind": "value",
        "name": "filterWithIndex",
        "docstrings": [
          "`filterWithIndex(list, f)` returns a list of all elements in `list` which\nsatisfy the predicate function `f`.\n\n## Examples\n\n```rescript\nlet isEven = x => mod(x, 2) == 0\n\nList.filterWithIndex(list{1, 2, 3, 4}, (_x, index) => isEven(index)) == list{1, 3}\n```"
        ],
        "signature": "let filterWithIndex: (list<'a>, ('a, int) => bool) => list<'a>"
      },
      {
        "id": "Stdlib.List.filterMap",
        "kind": "value",
        "name": "filterMap",
        "docstrings": [
          "`filterMap(list, f)` applies `f` to each element of `list`. If `f` returns\n`Some(value)`, then `value` is _kept_ in the resulting list. If `f` returns\n`None`, the element is _not_ retained in the result.\n\n## Examples\n\n```rescript\nlet isEven = x => mod(x, 2) == 0\n\nlist{1, 2, 3, 4}->List.filterMap(x =>\n  if isEven(x) {\n    Some(x)\n  } else {\n    None\n  }\n) // list{2, 4}\n\nlist{Some(1), Some(2), None}->List.filterMap(x => x) == list{1, 2}\n```"
        ],
        "signature": "let filterMap: (list<'a>, 'a => option<'b>) => list<'b>"
      },
      {
        "id": "Stdlib.List.partition",
        "kind": "value",
        "name": "partition",
        "docstrings": [
          "`partition(list, f)` creates a pair of lists; the first list consists of all\nelements of `list` that satisfy the predicate function `f`, the second list\nconsists of all elements of `list` that _do not_ satisfy `f`.\n\n## Examples\n\n```rescript\n// (elementsThatSatisfies, elementsThatDoesNotSatisfy)\n\nList.partition(list{1, 2, 3, 4}, x => x > 2) == (list{3, 4}, list{1, 2})\n```"
        ],
        "signature": "let partition: (list<'a>, 'a => bool) => (list<'a>, list<'a>)"
      },
      {
        "id": "Stdlib.List.unzip",
        "kind": "value",
        "name": "unzip",
        "docstrings": [
          "`unzip(list)` takes a list of pairs and creates a pair of lists. The first list\ncontains all the first items of the pairs, the second list contains all the\nsecond items.\n\n## Examples\n\n```rescript\nList.unzip(list{(1, 2), (3, 4)}) // (list{1, 3}, list{2, 4})\n\nList.unzip(list{(\"H\", \"W\"), (\"e\", \"o\"), (\"l\", \"r\"), (\"l\", \"l\"), (\"o\", \"d\"), (\" \", \"!\")}) ==\n  (list{\"H\", \"e\", \"l\", \"l\", \"o\", \" \"}, list{\"W\", \"o\", \"r\", \"l\", \"d\", \"!\"})\n```"
        ],
        "signature": "let unzip: list<('a, 'b)> => (list<'a>, list<'b>)"
      },
      {
        "id": "Stdlib.List.getAssoc",
        "kind": "value",
        "name": "getAssoc",
        "docstrings": [
          "`getAssoc(list, k, f)` return the second element of a pair in `list` where\nthe first element equals `k` as per the predicate function `f`, or `None` if\nnot found.\n\n## Examples\n\n```rescript\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->List.getAssoc(3, (a, b) => a == b) // Some(\"c\")\n\nlist{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}->List.getAssoc(15, (k, item) =>\n  k /* 15 */ == item\n) == Some(\"afternoon\")\n/* 9, 5, 22 */\n```"
        ],
        "signature": "let getAssoc: (list<('a, 'c)>, 'b, ('a, 'b) => bool) => option<'c>",
        "deprecated": "Use a `Map` instead"
      },
      {
        "id": "Stdlib.List.hasAssoc",
        "kind": "value",
        "name": "hasAssoc",
        "docstrings": [
          "`hasAssoc(list, k, f)` returns `true` if there is a pair in `list` where the\nfirst element equals `k` as per the predicate function `f`.\n\n## Examples\n\n```rescript\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->List.hasAssoc(1, (a, b) => a == b) // true\n\nlist{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}->List.hasAssoc(25, (k, item) =>\n  k /* 25 */ == item\n) == false\n/* 9, 5, 22 */\n```"
        ],
        "signature": "let hasAssoc: (list<('a, 'c)>, 'b, ('a, 'b) => bool) => bool",
        "deprecated": "Use a `Map` instead"
      },
      {
        "id": "Stdlib.List.removeAssoc",
        "kind": "value",
        "name": "removeAssoc",
        "docstrings": [
          "`removeAssoc(list, k, f)` return a list after removing the first pair whose\nfirst value is `k` per the equality predicate `f`, if not found, return a new\nlist identical to `list`.\n\n## Examples\n\n```rescript\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->List.removeAssoc(1, (a, b) => a == b) // list{(2, \"b\"), (3, \"c\")}\n\nlist{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}->List.removeAssoc(9, (k, item) =>\n  k /* 9 */ == item\n) == list{(15, \"afternoon\"), (22, \"night\")}\n/* 9, 5, 22 */\n```"
        ],
        "signature": "let removeAssoc: (list<('a, 'c)>, 'b, ('a, 'b) => bool) => list<('a, 'c)>",
        "deprecated": "Use a `Map` instead"
      },
      {
        "id": "Stdlib.List.setAssoc",
        "kind": "value",
        "name": "setAssoc",
        "docstrings": [
          "`setAssoc(list, k, v, f)`. If `k` exists in `list` by satisfying the `f`\npredicate, return a new list with the key and value replaced by the new `k` and\n`v`, otherwise, return a new list with the pair `k`, `v` added to the head of\n`list`.\n\n## Examples\n\n```rescript\nlist{(1, \"a\"), (2, \"b\"), (3, \"c\")}->List.setAssoc(2, \"x\", (a, b) => a == b) ==\n  list{(1, \"a\"), (2, \"x\"), (3, \"c\")}\n\nlist{(1, \"a\"), (3, \"c\")}->List.setAssoc(2, \"b\", (a, b) => a == b) ==\n  list{(2, \"b\"), (1, \"a\"), (3, \"c\")}\n\nlist{(9, \"morning\"), (3, \"morning?!\"), (22, \"night\")}->List.setAssoc(15, \"afternoon\", (a, b) =>\n  mod(a, 12) == mod(b, 12)\n) == list{(9, \"morning\"), (15, \"afternoon\"), (22, \"night\")}\n```\n\n**Please note**: In the last example, since: `15 mod 12` equals `3 mod 12`. Both\nthe key _and_ the value are replaced in the list."
        ],
        "signature": "let setAssoc: (list<('a, 'c)>, 'a, 'c, ('a, 'a) => bool) => list<('a, 'c)>",
        "deprecated": "Use a `Map` instead"
      },
      {
        "id": "Stdlib.List.sort",
        "kind": "value",
        "name": "sort",
        "docstrings": [
          "`sort(list, f)` returns a sorted list.\n\n## Examples\n\n```rescript\nList.sort(list{5, 4, 9, 3, 7}, Int.compare) == list{3, 4, 5, 7, 9}\n```"
        ],
        "signature": "let sort: (list<'a>, ('a, 'a) => Ordering.t) => list<'a>"
      },
      {
        "id": "Stdlib.List.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(list)` ignores the provided list and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: list<'a> => unit"
      }
    ]
  },
  "stdlib/lazy": {
    "id": "Stdlib.Lazy",
    "name": "Lazy",
    "docstrings": [
      "This module  provides a type `Lazy.t` and functions to create and\n    manipulate lazy values.  A lazy value is a value that is not\n    computed until it is needed.  This is useful for deferring\n    computations that may be expensive or unnecessary."
    ],
    "items": [
      {
        "id": "Stdlib.Lazy.t",
        "kind": "type",
        "name": "t",
        "docstrings": [
          "The type of a lazy value.  `Lazy.t<'a>` represents a lazy value\n    that will eventually yield a value of type `'a` when accessed.\n    The value is computed only once, and the result is cached for\n    subsequent accesses.  If the computation raises an exception,\n    the same exception is raised again on subsequent accesses."
        ],
        "signature": "type t<+'a>"
      },
      {
        "id": "Stdlib.Lazy.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`Lazy.make(f)` creates a lazy value from `f` which is the\n    computation to be deferred of type `unit => 'a`. \n    The function returns a lazy value of type `Lazy.t<'a>`.  \n    The computation is not executed until the lazy value is accessed.\n\n    ## Examples \n    ```rescript \n    let lazyValue = Lazy.make(() => {\n      // Some expensive computation\n      Console.log(\"Computing...\")\n      42\n    });\n    lazyValue->Lazy.get->assertEqual(42)\n    ```"
        ],
        "signature": "let make: (unit => 'a) => t<'a>"
      },
      {
        "id": "Stdlib.Lazy.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "`Lazy.get(x)` forces the suspension `x` and returns its result.\n    If `x` has already been forced, `Lazy.get(x)` returns the\n    same value again without recomputing it.  If it raised an\n    exception, the same exception is raised again.\n    Raise `Undefined` if the forcing of `x` tries to force `x`  itself\n    recursively.  This is a runtime error."
        ],
        "signature": "let get: t<'a> => 'a"
      },
      {
        "id": "Stdlib.Lazy.isEvaluated",
        "kind": "value",
        "name": "isEvaluated",
        "docstrings": [
          "`Lazy.isEvaluated(x)` returns `true` if the suspension `x` has\n    already been forced and did not raise an exception.  Otherwise, \n    it returns `false`.  This is useful for checking if a lazy value\n    has been computed before accessing it.\n\n    ## Examples\n    ```rescript \n    let lazyValue = Lazy.make(() => {\n      // Some expensive computation\n      Console.log(\"Computing...\")\n      42\n    })\n    Lazy.isEvaluated(lazyValue)->assertEqual(false)\n    lazyValue->Lazy.get->assertEqual(42)\n    lazyValue->Lazy.isEvaluated->assertEqual(true)\n    ```"
        ],
        "signature": "let isEvaluated: t<'a> => bool"
      },
      {
        "id": "Stdlib.Lazy.force",
        "kind": "value",
        "name": "force",
        "docstrings": [
          "`force(x)` forces the suspension `x` and returns its result.\n    If `x` has already been forced, `Lazy.force(x)` returns the\n    same value again without recomputing it.  If it raised an exception,\n    the same exception is raised again.\n    Raise `Undefined` if the forcing of `x` tries to force `x` itself\n    recursively."
        ],
        "signature": "let force: t<'a> => 'a",
        "deprecated": "Use `Lazy.get` instead"
      },
      {
        "id": "Stdlib.Lazy.force_val",
        "kind": "value",
        "name": "force_val",
        "docstrings": [
          "`force_val(x)` forces the suspension `x` and returns its\n    result.  If `x` has already been forced, `force_val(x)`\n    returns the same value again without recomputing it.\n    Raise `Undefined` if the forcing of `x` tries to force `x` itself\n    recursively.\n    If the computation of `x` raises an exception, it is unspecified\n    whether `force_val(x)` raises the same exception or `Undefined`."
        ],
        "signature": "let force_val: t<'a> => 'a",
        "deprecated": "Use `Lazy.get` instead"
      },
      {
        "id": "Stdlib.Lazy.from_fun",
        "kind": "value",
        "name": "from_fun",
        "docstrings": [
          "`Lazy.from_fun(f)` creates a lazy value from `f` which is the\n    computation to be deferred of type `unit => 'a`. \n    The function returns a lazy value of type `Lazy.t<'a>`.  \n    The computation is not executed until the lazy value is accessed."
        ],
        "signature": "let from_fun: (unit => 'a) => t<'a>",
        "deprecated": "Use `Lazy.make` instead"
      },
      {
        "id": "Stdlib.Lazy.from_val",
        "kind": "value",
        "name": "from_val",
        "docstrings": [
          "`from_val(v)` returns an already-forced suspension of `v`.\n    This is for special purposes only."
        ],
        "signature": "let from_val: 'a => t<'a>",
        "deprecated": "Use `Lazy.make` instead"
      },
      {
        "id": "Stdlib.Lazy.is_val",
        "kind": "value",
        "name": "is_val",
        "docstrings": [
          "`is_val(x)` returns `true` if `x has already been forced and\n    did not raise an exception."
        ],
        "signature": "let is_val: t<'a> => bool",
        "deprecated": "Use `Lazy.isEvaluated` instead"
      }
    ]
  },
  "stdlib/json": {
    "id": "Stdlib.JSON",
    "name": "JSON",
    "docstrings": ["Functions for interacting with JSON."],
    "items": [
      {
        "id": "Stdlib.JSON.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["A type representing a JSON object."],
        "signature": "@unboxed\ntype t =\n  | Boolean(bool)\n  | @as(null) Null\n  | String(string)\n  | Number(float)\n  | Object(dict<t>)\n  | Array(array<t>)"
      },
      {
        "id": "Stdlib.JSON.replacer",
        "kind": "type",
        "name": "replacer",
        "docstrings": [],
        "signature": "@unboxed\ntype replacer =\n  | Keys(array<string>)\n  | Replacer((string, t) => t)"
      },
      {
        "id": "Stdlib.JSON.parseOrThrow",
        "kind": "value",
        "name": "parseOrThrow",
        "docstrings": [
          "`parseOrThrow(string, ~reviver=?)`\n\nParses a JSON string or throws a JavaScript exception (SyntaxError), if the string isn't valid.\nThe reviver describes how the value should be transformed. It is a function which receives a key and a value.\nIt returns a JSON type.\n\n## Examples\n```rescript\ntry {\n  let _ = JSON.parseOrThrow(`{\"foo\":\"bar\",\"hello\":\"world\"}`)\n  // { foo: 'bar', hello: 'world' }\n\n  let _ = JSON.parseOrThrow(\"\")\n  // error\n} catch {\n| JsExn(_) => Console.log(\"error\")\n}\n\nlet reviver = (_, value: JSON.t) =>\n  switch value {\n  | String(string) => string->String.toUpperCase->JSON.Encode.string\n  | Number(number) => (number *. 2.0)->JSON.Encode.float\n  | _ => value\n  }\n\nlet jsonString = `{\"hello\":\"world\",\"someNumber\":21}`\n\ntry {\n  JSON.parseOrThrow(jsonString, ~reviver)->Console.log\n  // { hello: 'WORLD', someNumber: 42 }\n\n  JSON.parseOrThrow(\"\", ~reviver)->Console.log\n  // error\n} catch {\n| JsExn(_) => Console.log(\"error\")\n}\n```\n\n## Exceptions\n\n- Raises a SyntaxError (Exn.t) if the string isn't valid JSON."
        ],
        "signature": "let parseOrThrow: (string, ~reviver: (string, t) => t=?) => t"
      },
      {
        "id": "Stdlib.JSON.parseExn",
        "kind": "value",
        "name": "parseExn",
        "docstrings": [
          "`parseExn(string, ~reviver=?)`\n\nParses a JSON string or throws a JavaScript exception (SyntaxError), if the string isn't valid.\nThe reviver describes how the value should be transformed. It is a function which receives a key and a value.\nIt returns a JSON type.\n\n## Examples\n```rescript\ntry {\n  let _ = JSON.parseExn(`{\"foo\":\"bar\",\"hello\":\"world\"}`)\n  // { foo: 'bar', hello: 'world' }\n\n  let _ = JSON.parseExn(\"\")\n  // error\n} catch {\n| JsExn(_) => Console.log(\"error\")\n}\n\nlet reviver = (_, value: JSON.t) =>\n  switch value {\n  | String(string) => string->String.toUpperCase->JSON.Encode.string\n  | Number(number) => (number *. 2.0)->JSON.Encode.float\n  | _ => value\n  }\n\nlet jsonString = `{\"hello\":\"world\",\"someNumber\":21}`\n\ntry {\n  JSON.parseExn(jsonString, ~reviver)->Console.log\n  // { hello: 'WORLD', someNumber: 42 }\n\n  JSON.parseExn(\"\", ~reviver)->Console.log\n  // error\n} catch {\n| JsExn(_) => Console.log(\"error\")\n}\n```\n\n## Exceptions\n\n- Raises a SyntaxError (Exn.t) if the string isn't valid JSON."
        ],
        "signature": "let parseExn: (string, ~reviver: (string, t) => t=?) => t",
        "deprecated": "Use `parseOrThrow` instead"
      },
      {
        "id": "Stdlib.JSON.parseExnWithReviver",
        "kind": "value",
        "name": "parseExnWithReviver",
        "docstrings": [
          "`parseExnWithReviver(string, reviver)`\n\nParses a JSON string or throws a JavaScript exception (SyntaxError), if the string isn't valid.\nThe reviver describes how the value should be transformed. It is a function which receives a key and a value.\nIt returns a JSON type.\n\n## Examples\n```rescript\nlet reviver = (_, value: JSON.t) =>\n  switch value {\n  | String(string) => string->String.toUpperCase->JSON.Encode.string\n  | Number(number) => (number *. 2.0)->JSON.Encode.float\n  | _ => value\n  }\n\nlet jsonString = `{\"hello\":\"world\",\"someNumber\":21}`\n\nJSON.parseExnWithReviver(jsonString, reviver)->Console.log\n// { hello: 'WORLD', someNumber: 42 }\n\ntry {\n  JSON.parseExnWithReviver(\"\", reviver)->Console.log\n  // error\n} catch {\n| JsExn(_) => Console.log(\"error\")\n}\n```\n\n## Exceptions\n\n- Raises a SyntaxError if the string is not a valid JSON."
        ],
        "signature": "let parseExnWithReviver: (string, (string, t) => t) => t",
        "deprecated": "Use `parseOrThrow` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringify",
        "kind": "value",
        "name": "stringify",
        "docstrings": [
          "`stringify(json, ~replacer=?, ~space=?)`\n\nConverts a JSON object to a JSON string.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value,\nor an array of keys which should be included in the output.\nIf you want to stringify any type, use `JSON.stringifyAny` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nJSON.stringify(json)\n// {\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}\n\nJSON.stringify(json, ~space=2)\n// {\n//   \"foo\": \"bar\",\n//   \"hello\": \"world\",\n//   \"someNumber\": 42\n// }\n\nJSON.stringify(json, ~replacer=Keys([\"foo\", \"someNumber\"]))\n// {\"foo\":\"bar\",\"someNumber\":42}\n\nlet replacer = JSON.Replacer(\n  (_, value) => {\n    let decodedValue = value->JSON.Decode.string\n\n    switch decodedValue {\n    | Some(string) => string->String.toUpperCase->JSON.Encode.string\n    | None => value\n    }\n  },\n)\n\nJSON.stringify(json, ~replacer)\n// {\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}\n```"
        ],
        "signature": "let stringify: (t, ~replacer: replacer=?, ~space: int=?) => string"
      },
      {
        "id": "Stdlib.JSON.stringifyWithIndent",
        "kind": "value",
        "name": "stringifyWithIndent",
        "docstrings": [
          "`stringifyWithIndent(json, indentation)`\n\nConverts a JSON object to a JSON string. The output will be indented.\nIf you want to stringify any type, use `JSON.stringifyAnyWithIndent` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nJSON.stringifyWithIndent(json, 2)\n// {\n//   \"foo\": \"bar\",\n//   \"hello\": \"world\",\n//   \"someNumber\": 42\n// }\n```"
        ],
        "signature": "let stringifyWithIndent: (t, int) => string",
        "deprecated": "Use `stringify` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyWithReplacer",
        "kind": "value",
        "name": "stringifyWithReplacer",
        "docstrings": [
          "`stringifyWithReplacer(json, replacer)`\n\nConverts a JSON object to a JSON string.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value.\nIf you want to stringify any type, use `JSON.stringifyAnyWithReplacer` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nlet replacer = (_, value) => {\n  let decodedValue = value->JSON.Decode.string\n\n  switch decodedValue {\n  | Some(string) => string->String.toUpperCase->JSON.Encode.string\n  | None => value\n  }\n}\n\nJSON.stringifyWithReplacer(json, replacer)\n// {\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}\n```"
        ],
        "signature": "let stringifyWithReplacer: (t, (string, t) => t) => string",
        "deprecated": "Use `stringify` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyWithReplacerAndIndent",
        "kind": "value",
        "name": "stringifyWithReplacerAndIndent",
        "docstrings": [
          "`stringifyWithReplacerAndIndent(json, replacer, indentation)`\n\nConverts a JSON object to a JSON string. The output will be indented.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value.\nIf you want to stringify any type, use `JSON.stringifyAnyWithReplacerAndIndent` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nlet replacer = (_, value) => {\n  let decodedValue = value->JSON.Decode.string\n\n  switch decodedValue {\n  | Some(string) => string->String.toUpperCase->JSON.Encode.string\n  | None => value\n  }\n}\n\nJSON.stringifyWithReplacerAndIndent(json, replacer, 2)\n// {\n//   \"foo\": \"BAR\",\n//   \"hello\": \"WORLD\",\n//   \"someNumber\": 42\n// }\n```"
        ],
        "signature": "let stringifyWithReplacerAndIndent: (t, (string, t) => t, int) => string",
        "deprecated": "Use `stringify` with optional parameters instead"
      },
      {
        "id": "Stdlib.JSON.stringifyWithFilter",
        "kind": "value",
        "name": "stringifyWithFilter",
        "docstrings": [
          "`stringifyWithFilter(json, filter)`\n\nConverts a JSON object to a JSON string.\nThe filter is an array of keys, which should be included in the output.\nIf you want to stringify any type, use `JSON.stringifyAnyWithFilter` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nJSON.stringifyWithFilter(json, [\"foo\", \"someNumber\"])\n// {\"foo\":\"bar\",\"someNumber\":42}\n```"
        ],
        "signature": "let stringifyWithFilter: (t, array<string>) => string",
        "deprecated": "Use `stringify` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyWithFilterAndIndent",
        "kind": "value",
        "name": "stringifyWithFilterAndIndent",
        "docstrings": [
          "`stringifyWithFilterAndIndent(json, filter, indentation)`\n\nConverts a JSON object to a JSON string. The output will be indented.\nThe filter is an array of keys, which should be included in the output.\nIf you want to stringify any type, use `JSON.stringifyAnyWithFilterAndIndent` instead.\n\n## Examples\n```rescript\nlet json =\n  Dict.fromArray([\n    (\"foo\", JSON.Encode.string(\"bar\")),\n    (\"hello\", JSON.Encode.string(\"world\")),\n    (\"someNumber\", JSON.Encode.int(42)),\n  ])->JSON.Encode.object\n\nJSON.stringifyWithFilterAndIndent(json, [\"foo\", \"someNumber\"], 2)\n// {\n//   \"foo\": \"bar\",\n//   \"someNumber\": 42\n// }\n```"
        ],
        "signature": "let stringifyWithFilterAndIndent: (t, array<string>, int) => string",
        "deprecated": "Use `stringify` with optional parameters instead"
      },
      {
        "id": "Stdlib.JSON.stringifyAny",
        "kind": "value",
        "name": "stringifyAny",
        "docstrings": [
          "`stringifyAny(any, ~replacer=?, ~space=?)`\n\nConverts any type to a JSON string.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringify` instead.\n\n## Examples\n\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\ndict\n->JSON.stringifyAny\n->Option.getUnsafe == `{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}`\n\ndict\n->JSON.stringifyAny(~space=2)\n->Option.getUnsafe == `{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}`\n\ndict\n->JSON.stringifyAny(~replacer=Keys([\"foo\", \"someNumber\"]))\n->Option.getUnsafe == `{\"foo\":\"bar\",\"someNumber\":42}`\n\nlet replacer = JSON.Replacer(\n  (_, value) => {\n    let decodedValue = value->JSON.Decode.string\n\n    switch decodedValue {\n    | Some(string) => string->String.toUpperCase->JSON.Encode.string\n    | None => value\n    }\n  },\n)\n\ndict\n->JSON.stringifyAny(~replacer)\n->Option.getUnsafe == `{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\n// Raise a exception\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAny: ('a, ~replacer: replacer=?, ~space: int=?) => option<string>"
      },
      {
        "id": "Stdlib.JSON.stringifyAnyWithIndent",
        "kind": "value",
        "name": "stringifyAnyWithIndent",
        "docstrings": [
          "`stringifyAnyWithIndent(any, indentation)`\n\nConverts any type to a JSON string. The output will be indented.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringifyWithIndent` instead.\n\n## Examples\n\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\ndict\n->JSON.stringifyAnyWithIndent(2)\n->Option.getUnsafe == `{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAnyWithIndent: ('a, int) => option<string>",
        "deprecated": "Use `stringifyAny` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyAnyWithReplacer",
        "kind": "value",
        "name": "stringifyAnyWithReplacer",
        "docstrings": [
          "`stringifyAnyWithReplacer(json, replacer)`\n\nConverts any type to a JSON string.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringifyWithReplacer` instead.\n\n## Examples\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\nlet replacer = (_, value) => {\n  let decodedValue = value->JSON.Decode.string\n\n  switch decodedValue {\n  | Some(string) => string->String.toUpperCase->JSON.Encode.string\n  | None => value\n  }\n}\n\ndict\n->JSON.stringifyAnyWithReplacer(replacer)\n->Option.getUnsafe == `{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAnyWithReplacer: ('a, (string, t) => t) => option<string>",
        "deprecated": "Use `stringifyAny` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyAnyWithReplacerAndIndent",
        "kind": "value",
        "name": "stringifyAnyWithReplacerAndIndent",
        "docstrings": [
          "`stringifyAnyWithReplacerAndIndent(json, replacer, indentation)`\n\nConverts any type to a JSON string. The output will be indented.\nThe replacer describes how the value should be transformed. It is a function which receives a key and a value.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringifyWithReplacerAndIndent` instead.\n\n## Examples\n\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\nlet replacer = (_, value) => {\n  let decodedValue = value->JSON.Decode.string\n\n  switch decodedValue {\n  | Some(string) => string->String.toUpperCase->JSON.Encode.string\n  | None => value\n  }\n}\n\ndict\n->JSON.stringifyAnyWithReplacer(replacer)\n->Option.getUnsafe == `{\"foo\":\"BAR\",\"hello\":\"WORLD\",\"someNumber\":42}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAnyWithReplacerAndIndent: ('a, (string, t) => t, int) => option<string>",
        "deprecated": "Use `stringifyAny` with optional parameters instead"
      },
      {
        "id": "Stdlib.JSON.stringifyAnyWithFilter",
        "kind": "value",
        "name": "stringifyAnyWithFilter",
        "docstrings": [
          "`stringifyAnyWithFilter(json, filter)`\n\nConverts any type to a JSON string.\nThe filter is an array of keys, which should be included in the output.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringifyWithFilter` instead.\n\n## Examples\n\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\ndict->JSON.stringifyAnyWithFilter([\"foo\", \"someNumber\"]) == `{\"foo\":\"bar\",\"someNumber\":42}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAnyWithFilter: ('a, array<string>) => string",
        "deprecated": "Use `stringifyAny` with optional parameter instead"
      },
      {
        "id": "Stdlib.JSON.stringifyAnyWithFilterAndIndent",
        "kind": "value",
        "name": "stringifyAnyWithFilterAndIndent",
        "docstrings": [
          "`stringifyAnyWithFilterAndIndent(json, filter, indentation)`\n\nConverts any type to a JSON string. The output will be indented.\nThe filter is an array of keys, which should be included in the output.\nStringifying a function or `undefined` will return `None`.\nIf the value contains circular references or `BigInt`s, the function will throw a JavaScript exception (TypeError).\nIf you want to stringify a JSON object, use `JSON.stringifyWithFilterAndIndent` instead.\n\n## Examples\n\n```rescript\nlet dict = Dict.fromArray([\n  (\"foo\", JSON.Encode.string(\"bar\")),\n  (\"hello\", JSON.Encode.string(\"world\")),\n  (\"someNumber\", JSON.Encode.int(42)),\n])\n\ndict\n->JSON.stringifyAny\n->Option.getUnsafe == `{\"foo\":\"bar\",\"hello\":\"world\",\"someNumber\":42}`\n\ndict\n->JSON.stringifyAny(~space=2)\n->Option.getUnsafe == `{\n  \"foo\": \"bar\",\n  \"hello\": \"world\",\n  \"someNumber\": 42\n}`\n\ndict\n->JSON.stringifyAny(~replacer=Keys([\"foo\", \"someNumber\"]))\n->Option.getUnsafe == `{\"foo\":\"bar\",\"someNumber\":42}`\n\nJSON.stringifyAny(() => \"hello world\") == None\n\nswitch BigInt.fromInt(0)->JSON.stringifyAny {\n| exception _ => assert(true)\n| _ => assert(false)\n}\n```\n\n## Exceptions\n\n- Raises a TypeError if the value contains circular references.\n- Raises a TypeError if the value contains `BigInt`s."
        ],
        "signature": "let stringifyAnyWithFilterAndIndent: ('a, array<string>, int) => string",
        "deprecated": "Use `stringifyAny` with optional parameters instead"
      },
      {
        "id": "Stdlib.JSON.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(json)` ignores the provided json and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/jsexn": {
    "id": "Stdlib.JsExn",
    "name": "JsExn",
    "docstrings": [
      "Provide utilities for dealing with JS exceptions.\n\nJS exceptions can be of any type, even though they *should* be of type `Error` of one of its subclasses.\n\nSee [`throw`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.JsExn.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Represents a JS exception"],
        "signature": "type t = unknown"
      },
      {
        "id": "Stdlib.JsExn.fromException",
        "kind": "value",
        "name": "fromException",
        "docstrings": [],
        "signature": "let fromException: exn => option<t>"
      },
      {
        "id": "Stdlib.JsExn.anyToExnInternal",
        "kind": "value",
        "name": "anyToExnInternal",
        "docstrings": [
          "`anyToExnInternal(obj)` will take any value `obj` and wrap it\nin a JsExn if given value is not an exn already. If\n`obj` is an exn, it will return `obj` without any changes.\n\nThis function is mostly useful for cases where you want to unify a type of a value\nthat potentially is either exn, a JS error, or any other JS value really (e.g. for\na value passed to a Promise.catch callback)\n\n**IMPORTANT**: This is an internal API and may be changed / removed any time in the future."
        ],
        "signature": "let anyToExnInternal: 'a => exn"
      },
      {
        "id": "Stdlib.JsExn.stack",
        "kind": "value",
        "name": "stack",
        "docstrings": [
          "`stack(jsExn)` retrieves the `stack` property of the exception, if it exists. The stack is a list of what functions were called, and what files they are defined in, prior to the error happening.\n\nSee [`Error.prototype.stack`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack) on MDN.\n\n## Example\n```rescript\ntry {JsError.make(\"error\")->JsError.throw} catch {\n| JsExn(e) => Console.log(JsExn.stack(e)) // Logs `stack`\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let stack: t => option<string>"
      },
      {
        "id": "Stdlib.JsExn.message",
        "kind": "value",
        "name": "message",
        "docstrings": [
          "`message(error)` retrieves the `message` property of the error, if it exists.\n\nSee [`Error.prototype.message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message) on MDN.\n\n## Example\n```rescript\ntry {JsError.SyntaxError.throwWithMessage(\"Some message here\")} catch {\n| JsExn(e) => e->JsExn.message->Option.getExn == \"Some message here\"\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let message: t => option<string>"
      },
      {
        "id": "Stdlib.JsExn.name",
        "kind": "value",
        "name": "name",
        "docstrings": [
          "`name(error)` retrieves the `name` property of the error, if it exists.\n\nSee [`Error.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name) on MDN.\n\n## Example\n```rescript\ntry {JsError.SyntaxError.throwWithMessage(\"Some message here\")} catch {\n| JsExn(e) => e->JsExn.name->Option.getExn == \"SyntaxError\"\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let name: t => option<string>"
      },
      {
        "id": "Stdlib.JsExn.fileName",
        "kind": "value",
        "name": "fileName",
        "docstrings": [
          "`fileName(error)` retrieves the `fileName` property of the error, if it exists.\n\nSee [`Error.prototype.fileName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName) on MDN."
        ],
        "signature": "let fileName: t => option<string>"
      },
      {
        "id": "Stdlib.JsExn.throw",
        "kind": "value",
        "name": "throw",
        "docstrings": [
          "Throws the given value, terminating execution unless caught by a surrounding try/catch block.\n\nThis is meant to be used when a JS API is based on throwing values that are not of type `Error` or its subclasses."
        ],
        "signature": "let throw: 'a => 'b"
      },
      {
        "id": "Stdlib.JsExn.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(jsExn)` ignores the provided JS exception and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/jserror": {
    "id": "Stdlib.JsError",
    "name": "JsError",
    "docstrings": [
      "Functions for working with JavaScript errors.\n\nSee [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.JsError.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Represents a JavaScript error."],
        "signature": "type t"
      },
      {
        "id": "Stdlib.JsError.stack",
        "kind": "value",
        "name": "stack",
        "docstrings": [
          "`stack(error)` retrieves the `stack` property of the error, if it exists. The stack is a list of what functions were called, and what files they are defined in, prior to the error happening.\n\nSee [`Error.prototype.stack`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack) on MDN.\n\n## Example\n```rescript\nlet error = JsError.make(\"error\")\nConsole.log(error->JsError.stack) // Logs `stack` if it exists on `someError`\n```"
        ],
        "signature": "let stack: t => option<string>"
      },
      {
        "id": "Stdlib.JsError.message",
        "kind": "value",
        "name": "message",
        "docstrings": [
          "`message(error)` retrieves the `message` property of the error.\n\nSee [`Error.prototype.message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message) on MDN.\n\n## Example\n```rescript\nlet error = JsError.SyntaxError.make(\"Some message here\")\nerror->JsError.message == \"Some message here\"\n```"
        ],
        "signature": "let message: t => string"
      },
      {
        "id": "Stdlib.JsError.name",
        "kind": "value",
        "name": "name",
        "docstrings": [
          "`name(error)` retrieves the `name` property of the error.\n\nSee [`Error.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name) on MDN.\n\n## Example\n```rescript\nlet error = JsError.SyntaxError.make(\"Some message here\")\nerror->JsError.name == \"SyntaxError\"\n```"
        ],
        "signature": "let name: t => string"
      },
      {
        "id": "Stdlib.JsError.fileName",
        "kind": "value",
        "name": "fileName",
        "docstrings": [
          "`fileName(error)` retrieves the `fileName` property of the error, if it exists.\n\nSee [`Error.prototype.fileName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName) on MDN."
        ],
        "signature": "let fileName: t => option<string>"
      },
      {
        "id": "Stdlib.JsError.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(message)` creates a new error, setting its `message` to the provided value.\n\nSee [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) on MDN.\n\n## Example\n```rescript\nlet error = JsError.make(\"Some message here\")\nerror->JsError.message == \"Some message here\"\nerror->JsError.name == \"Error\"\n```"
        ],
        "signature": "let make: string => t"
      },
      {
        "id": "Stdlib.JsError.throw",
        "kind": "value",
        "name": "throw",
        "docstrings": [
          "Throws the given error, terminating execution unless caught by a surrounding try/catch block.\n\n## Examples\n\n```rescript\nlet error = JsError.make(\"Everything is upside down.\")\n\nif 5 > 10 {\n  JsError.throw(error)\n} else {\n  Console.log(\"Phew, sanity still rules.\")\n}\n```"
        ],
        "signature": "let throw: t => 'a"
      },
      {
        "id": "Stdlib.JsError.throwWithMessage",
        "kind": "value",
        "name": "throwWithMessage",
        "docstrings": [
          "Creates a new `Error` with the provided `message` and throws it.\n\n`JsError.throwWithMessage(\"message\")` is equivalent to `JsError.make(\"message\")->JsError.throw`."
        ],
        "signature": "let throwWithMessage: string => 'a"
      },
      {
        "id": "Stdlib.JsError.panic",
        "kind": "value",
        "name": "panic",
        "docstrings": [
          "Throws a panic exception with the given message.\n\nA panic exception is a native JavaScript exception that is not intended to be caught and\nhandled. Compared to a ReScript exception this will give a better stack trace and\ndebugging experience.\n\n## Examples\n\n```rescript\ntry {\n  JsError.panic(\"Uh oh. This was unexpected!\")\n} catch {\n| JsExn(obj) =>\n  switch JsExn.message(obj) {\n  | Some(m) => assert(m == \"Panic! Uh oh. This was unexpected!\")\n  | None => assert(false)\n  }\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let panic: string => 'a"
      },
      {
        "id": "Stdlib.JsError.toJsExn",
        "kind": "value",
        "name": "toJsExn",
        "docstrings": [
          "Casts a `JsError.t` to a `JsExn.t`. \n\nThis is useful when you want to compare a JS exception and a JS error."
        ],
        "signature": "let toJsExn: t => JsExn.t"
      },
      {
        "id": "Stdlib.JsError.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(error)` ignores the provided error and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/intl": {
    "id": "Stdlib.Intl",
    "name": "Intl",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.Intl.getCanonicalLocalesExn",
        "kind": "value",
        "name": "getCanonicalLocalesExn",
        "docstrings": ["@throws RangeError"],
        "signature": "let getCanonicalLocalesExn: string => array<string>"
      },
      {
        "id": "Stdlib.Intl.getCanonicalLocalesManyExn",
        "kind": "value",
        "name": "getCanonicalLocalesManyExn",
        "docstrings": ["@throws RangeError"],
        "signature": "let getCanonicalLocalesManyExn: array<string> => array<string>"
      },
      {
        "id": "Stdlib.Intl.supportedValuesOfExn",
        "kind": "value",
        "name": "supportedValuesOfExn",
        "docstrings": ["@throws RangeError"],
        "signature": "let supportedValuesOfExn: string => array<string>"
      }
    ]
  },
  "stdlib/int": {
    "id": "Stdlib.Int",
    "name": "Int",
    "docstrings": [
      "Functions for interacting with JavaScript Number.\nSee: [`Number`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number)."
    ],
    "items": [
      {
        "id": "Stdlib.Int.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an int."],
        "signature": "type t = int"
      },
      {
        "id": "Stdlib.Int.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [],
        "signature": "let equal: (int, int) => bool"
      },
      {
        "id": "Stdlib.Int.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [],
        "signature": "let compare: (int, int) => Ordering.t"
      },
      {
        "id": "Stdlib.Int.toExponential",
        "kind": "value",
        "name": "toExponential",
        "docstrings": [
          "`toExponential(n, ~digits=?)` return a `string` representing the given value in\nexponential notation. `digits` specifies how many digits should appear after\nthe decimal point. See [`Number.toExponential`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\n\n## Examples\n\n```rescript\nInt.toExponential(1000) // \"1e+3\"\nInt.toExponential(-1000) // \"-1e+3\"\nInt.toExponential(77, ~digits=2) // \"7.70e+1\"\nInt.toExponential(5678, ~digits=2) // \"5.68e+3\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` less than 0 or greater than 10."
        ],
        "signature": "let toExponential: (int, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Int.toExponentialWithPrecision",
        "kind": "value",
        "name": "toExponentialWithPrecision",
        "docstrings": [
          "`toExponential(n, ~digits)` return a `string` representing the given value in\nexponential notation. `digits` specifies how many digits should appear after\nthe decimal point. See [`Number.toExponential`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential)\non MDN.\n\n## Examples\n\n```rescript\nInt.toExponentialWithPrecision(77, ~digits=2) // \"7.70e+1\"\nInt.toExponentialWithPrecision(5678, ~digits=2) // \"5.68e+3\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` less than 0 or greater than 10."
        ],
        "signature": "let toExponentialWithPrecision: (int, ~digits: int) => string",
        "deprecated": "Use `toExponential` instead"
      },
      {
        "id": "Stdlib.Int.toFixed",
        "kind": "value",
        "name": "toFixed",
        "docstrings": [
          "`toFixed(n, ~digits=?)` return a `string` representing the given\nvalue using fixed-point notation. `digits` specifies how many digits should\nappear after the decimal point. See [`Number.toFixed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\non MDN.\n\n## Examples\n\n```rescript\nInt.toFixed(123456) // \"123456.00\"\nInt.toFixed(10) // \"10.00\"\nInt.toFixed(300, ~digits=4) // \"300.0000\"\nInt.toFixed(300, ~digits=1) // \"300.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is less than 0 or larger than 100."
        ],
        "signature": "let toFixed: (int, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Int.toFixedWithPrecision",
        "kind": "value",
        "name": "toFixedWithPrecision",
        "docstrings": [
          "`toFixedWithPrecision(n, ~digits)` return a `string` representing the given\nvalue using fixed-point notation. `digits` specifies how many digits should\nappear after the decimal point. See [`Number.toFixed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)\non MDN.\n\n## Examples\n\n```rescript\nInt.toFixedWithPrecision(300, ~digits=4) // \"300.0000\"\nInt.toFixedWithPrecision(300, ~digits=1) // \"300.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is less than 0 or larger than 100."
        ],
        "signature": "let toFixedWithPrecision: (int, ~digits: int) => string",
        "deprecated": "Use `toFixed` instead"
      },
      {
        "id": "Stdlib.Int.toPrecision",
        "kind": "value",
        "name": "toPrecision",
        "docstrings": [
          "`toPrecision(n, ~digits=?)` return a `string` representing the giver value with\nprecision. `digits` specifies the number of significant digits. See [`Number.toPrecision`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) on MDN.\n\n## Examples\n\n```rescript\nInt.toPrecision(100) // \"100\"\nInt.toPrecision(1) // \"1\"\nInt.toPrecision(100, ~digits=2) // \"1.0e+2\"\nInt.toPrecision(1, ~digits=2) // \"1.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is not between 1 and 100 (inclusive).\n  Implementations are allowed to support larger and smaller values as well.\n  ECMA-262 only requires a precision of up to 21 significant digits."
        ],
        "signature": "let toPrecision: (int, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Int.toPrecisionWithPrecision",
        "kind": "value",
        "name": "toPrecisionWithPrecision",
        "docstrings": [
          "`toPrecisionWithPrecision(n, ~digits)` return a `string` representing the giver value with\nprecision. `digits` specifies the number of significant digits. See [`Number.toPrecision`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) on MDN.\n\n## Examples\n\n```rescript\nInt.toPrecisionWithPrecision(100, ~digits=2) // \"1.0e+2\"\nInt.toPrecisionWithPrecision(1, ~digits=2) // \"1.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is not between 1 and 100 (inclusive).\n  Implementations are allowed to support larger and smaller values as well.\n  ECMA-262 only requires a precision of up to 21 significant digits."
        ],
        "signature": "let toPrecisionWithPrecision: (int, ~digits: int) => string",
        "deprecated": "Use `toPrecision` instead"
      },
      {
        "id": "Stdlib.Int.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "`toString(n, ~radix=?)` return a `string` representing the given value.\n`~radix` specifies the radix base to use for the formatted number.\nSee [`Number.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\non MDN.\n\n## Examples\n\n```rescript\nInt.toString(1000) // \"1000\"\nInt.toString(-1000) // \"-1000\"\nInt.toString(6, ~radix=2) // \"110\"\nInt.toString(373592855, ~radix=16) // \"16449317\"\nInt.toString(123456, ~radix=36) // \"2n9c\"\n```\n\n## Exceptions\n\n`RangeError`: if `radix` is less than 2 or greater than 36."
        ],
        "signature": "let toString: (int, ~radix: int=?) => string"
      },
      {
        "id": "Stdlib.Int.toStringWithRadix",
        "kind": "value",
        "name": "toStringWithRadix",
        "docstrings": [
          "`toStringWithRadix(n, ~radix)` return a `string` representing the given value.\n`~radix` specifies the radix base to use for the formatted number.\nSee [`Number.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString)\non MDN.\n\n## Examples\n\n```rescript\nInt.toStringWithRadix(6, ~radix=2) // \"110\"\nInt.toStringWithRadix(373592855, ~radix=16) // \"16449317\"\nInt.toStringWithRadix(123456, ~radix=36) // \"2n9c\"\n```\n\n## Exceptions\n\n`RangeError`: if `radix` is less than 2 or greater than 36."
        ],
        "signature": "let toStringWithRadix: (int, ~radix: int) => string",
        "deprecated": "Use `toString` instead"
      },
      {
        "id": "Stdlib.Int.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [
          "`toLocaleString(n)` return a `string` with language-sensitive representing the\ngiven value. See [`Number.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) on MDN.\n\n## Examples\n\n```rescript\n// If the application uses English as the default language\nInt.toLocaleString(1000) // \"1,000\"\n\n// If the application uses Portuguese Brazil as the default language\nInt.toLocaleString(1000) // \"1.000\"\n```"
        ],
        "signature": "let toLocaleString: int => string"
      },
      {
        "id": "Stdlib.Int.toFloat",
        "kind": "value",
        "name": "toFloat",
        "docstrings": [
          "`toFloat(n)` return a `float` representing the given value.\n\n## Examples\n\n```rescript\nInt.toFloat(100) == 100.0\nInt.toFloat(2) == 2.0\n```"
        ],
        "signature": "let toFloat: int => float"
      },
      {
        "id": "Stdlib.Int.fromFloat",
        "kind": "value",
        "name": "fromFloat",
        "docstrings": [
          "`fromFloat(n)` return an `int` representing the given value. The conversion is\ndone by truncating the decimal part.\n\n## Examples\n\n```rescript\nInt.fromFloat(2.0) == 2\nInt.fromFloat(1.999) == 1\nInt.fromFloat(1.5) == 1\nInt.fromFloat(0.9999) == 0\n```"
        ],
        "signature": "let fromFloat: float => int"
      },
      {
        "id": "Stdlib.Int.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "`fromString(str, ~radix=?)` return an `option<int>` representing the given value\n`str`. `~radix` specifies the radix base to use for the formatted number.\n\n## Examples\n\n```rescript\nInt.fromString(\"0\") == Some(0)\nInt.fromString(\"NaN\") == None\nInt.fromString(\"6\", ~radix=2) == None\n```"
        ],
        "signature": "let fromString: (string, ~radix: int=?) => option<int>"
      },
      {
        "id": "Stdlib.Int.mod",
        "kind": "value",
        "name": "mod",
        "docstrings": [
          "`mod(n1, n2)` calculates the modulo (remainder after division) of two integers.\n\n## Examples\n\n```rescript\nInt.mod(7, 4) == 3\n```"
        ],
        "signature": "let mod: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.rangeOptions",
        "kind": "type",
        "name": "rangeOptions",
        "docstrings": ["The options for `range`."],
        "signature": "type rangeOptions = {step?: int, inclusive?: bool}"
      },
      {
        "id": "Stdlib.Int.range",
        "kind": "value",
        "name": "range",
        "docstrings": [
          "`range(start, end, ~options=?)` returns an int array of the sequence of integers in the\nrange `[start, end)`. That is, including `start` but excluding `end`.\n\nIf `step` is not set and `start < end`, the sequence will be increasing in steps of 1.\n\nIf `step` is not set and `start > end`, the sequence will be decreasing in steps of -1.\n\nIf `step` is set, the sequence will increase or decrease by that amount for each\nstep. If `start < end` and `step` is negative, or vice versa, an empty array is\nreturned since the sequence would otherwise never reach or exceed the end value\nand hence be infinite. If `step` is `0` and `start !=` end, a `RangeError` is\nraised as the sequence would never reach or exceed the end value and hence be\ninfinite.\n\nIf `inclusive` is set to `true`, the sequence will include `end` if `step` is\nset such that the sequence includes it.\n\n## Examples\n\n```rescript\nInt.range(3, 6) == [3, 4, 5]\nInt.range(-3, -1) == [-3, -2]\nInt.range(3, 1) == [3, 2]\nInt.range(3, 7, ~options={step: 2}) == [3, 5]\nInt.range(3, 7, ~options={step: 2, inclusive: true}) == [3, 5, 7]\nInt.range(3, 6, ~options={step: -2}) // RangeError\n```\n\n## Exceptions\n\n- Raises `RangeError` if `step == 0 && start != end`."
        ],
        "signature": "let range: (int, int, ~options: rangeOptions=?) => array<int>"
      },
      {
        "id": "Stdlib.Int.rangeWithOptions",
        "kind": "value",
        "name": "rangeWithOptions",
        "docstrings": [
          "`rangeWithOptions(start, end, options)` is like `range`, but with `step` and\n`inclusive` options configurable.\n\nIf `step` is set, the sequence will increase or decrease by that amount for each\nstep. If `start < end` and `step` is negative, or vice versa, an empty array is\nreturned since the sequence would otherwise never reach or exceed the end value\nand hence be infinite. If `step` is `0` and `start !=` end, a `RangeError` is\nraised as the sequence would never reach or exceed the end value and hence be\ninfinite.\n\nIf `inclusive` is set to `true`, the sequence will include `end` if `step` is\nset such that the sequence includes it.\n\n## Examples\n\n```rescript\nInt.rangeWithOptions(3, 7, {step: 2}) == [3, 5]\nInt.rangeWithOptions(3, 7, {step: 2, inclusive: true}) == [3, 5, 7]\nInt.rangeWithOptions(3, 6, {step: -2}) // RangeError\n```\n\n## Exceptions\n\n- Raises `RangeError` if `step == 0 && start != end`."
        ],
        "signature": "let rangeWithOptions: (int, int, rangeOptions) => array<int>",
        "deprecated": "Use `range` instead"
      },
      {
        "id": "Stdlib.Int.clamp",
        "kind": "value",
        "name": "clamp",
        "docstrings": [
          "`clamp(~min=?, ~max=?, value)` returns `value`, optionally bounded by `min` and `max`.\n\nif `max` \\< `min` returns `min`.\n\n## Examples\n\n```rescript\nInt.clamp(42) == 42\nInt.clamp(42, ~min=50) == 50\nInt.clamp(42, ~max=40) == 40\nInt.clamp(42, ~min=50, ~max=40) == 50\n```"
        ],
        "signature": "let clamp: (~min: int=?, ~max: int=?, int) => int"
      },
      {
        "id": "Stdlib.Int.bitwiseAnd",
        "kind": "value",
        "name": "bitwiseAnd",
        "docstrings": [
          "`bitwiseAnd(n1, n2)` calculates the bitwise AND of two integers.\n\n## Examples\n\n```rescript\nInt.bitwiseAnd(7, 4) == 4\n```"
        ],
        "signature": "let bitwiseAnd: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.bitwiseOr",
        "kind": "value",
        "name": "bitwiseOr",
        "docstrings": [
          "`bitwiseOr(n1, n2)` calculates the bitwise OR of two integers.\n\n## Examples\n\n```rescript\nInt.bitwiseOr(7, 4) == 7\n```"
        ],
        "signature": "let bitwiseOr: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.bitwiseXor",
        "kind": "value",
        "name": "bitwiseXor",
        "docstrings": [
          "`bigwiseXor(n1, n2)` calculates the bitwise XOR of two integers.\n\n## Examples\n\n```rescript\nInt.bitwiseXor(7, 4) == 3\n```"
        ],
        "signature": "let bitwiseXor: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.bitwiseNot",
        "kind": "value",
        "name": "bitwiseNot",
        "docstrings": [
          "`bitwiseNot(n)` calculates the bitwise NOT of an integer.\n\n## Examples\n\n```rescript\nInt.bitwiseNot(2) == -3\n```"
        ],
        "signature": "let bitwiseNot: int => int"
      },
      {
        "id": "Stdlib.Int.shiftLeft",
        "kind": "value",
        "name": "shiftLeft",
        "docstrings": [
          "`shiftLeft(n, length)` calculates the shifted value of an integer `n` by `length` bits to the left.\n\n## Examples\n\n```rescript\nInt.shiftLeft(4, 1) == 8\n```"
        ],
        "signature": "let shiftLeft: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.shiftRight",
        "kind": "value",
        "name": "shiftRight",
        "docstrings": [
          "`shiftRight(n, length)` calculates the shifted value of an integer `n` by `length` bits to the right.\n\nAlso known as \"arithmetic right shift\" operation.\n\n## Examples\n\n```rescript\nInt.shiftRight(8, 1) == 4\n```"
        ],
        "signature": "let shiftRight: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.shiftRightUnsigned",
        "kind": "value",
        "name": "shiftRightUnsigned",
        "docstrings": [
          "`shiftRightUnsigned(n, length)` calculates the shifted value of an integer `n` by `length` bits to the right.\nExcess bits shifted off to the right are discarded, and zero bits are shifted in from the left.\n\nAlso known as \"zero-filling right shift\" operation.\n\n## Examples\n\n```rescript\nInt.shiftRightUnsigned(4, 1) == 2\n```"
        ],
        "signature": "let shiftRightUnsigned: (int, int) => int"
      },
      {
        "id": "Stdlib.Int.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(int)` ignores the provided int and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: int => unit"
      }
    ]
  },
  "stdlib/float": {
    "id": "Stdlib.Float",
    "name": "Float",
    "docstrings": ["Functions for interacting with float."],
    "items": [
      {
        "id": "Stdlib.Float.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a float."],
        "signature": "type t = float"
      },
      {
        "id": "Stdlib.Float.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "Checks if two floating point numbers are equal.\n\n## Examples\n```rescript\nFloat.equal(1.0, 1.0) == true\nFloat.equal(1.0, 2.0) == false\n```"
        ],
        "signature": "let equal: (float, float) => bool"
      },
      {
        "id": "Stdlib.Float.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "Compares two floating point numbers, returns an `Ordering.t` value.\n\n## Examples\n```rescript\nFloat.compare(1.0, 1.0) == Ordering.equal\nFloat.compare(1.0, 2.0) == Ordering.less\nFloat.compare(2.0, 1.0) == Ordering.greater\n```"
        ],
        "signature": "let compare: (float, float) => Ordering.t"
      },
      {
        "id": "Stdlib.Float.isNaN",
        "kind": "value",
        "name": "isNaN",
        "docstrings": [
          "`isNaN(v)` tests if the given `v` is `NaN`.\nSee [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN) on MDN.\n\n## Examples\n\n```rescript\nFloat.isNaN(3.0) // false\nFloat.isNaN(Float.Constants.nan) // true\n```"
        ],
        "signature": "let isNaN: float => bool"
      },
      {
        "id": "Stdlib.Float.isFinite",
        "kind": "value",
        "name": "isFinite",
        "docstrings": [
          "`isFinite(v)` tests if the given `v` is finite.\nSee [`isFinite`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite) on MDN.\n\n## Examples\n\n```rescript\nFloat.isFinite(1.0) == true\nFloat.isFinite(Float.Constants.nan) == false\nFloat.isFinite(Float.Constants.positiveInfinity) == false\n```"
        ],
        "signature": "let isFinite: float => bool"
      },
      {
        "id": "Stdlib.Float.parseFloat",
        "kind": "value",
        "name": "parseFloat",
        "docstrings": [
          "`parseFloat(v)` parse the given `v` and returns a float. Leading whitespace in\n`v` is ignored. Returns `NaN` if `v` can't be parsed. Use \\[`fromString`\\] to\nensure it returns a valid float and not `NaN`.\nSee [`parseFloat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat) on MDN.\n\n## Examples\n\n```rescript\nFloat.parseFloat(\"1.0\") == 1.0\nFloat.parseFloat(\"  3.14   \") == 3.14\nFloat.parseFloat(\"3.0\") == 3.0\nFloat.parseFloat(\"3.14some non-digit characters\") == 3.14\nFloat.parseFloat(\"error\")->Float.isNaN == true\n```"
        ],
        "signature": "let parseFloat: string => float"
      },
      {
        "id": "Stdlib.Float.parseInt",
        "kind": "value",
        "name": "parseInt",
        "docstrings": [
          "`parseInt(v, ~radix=?)` parse the given `v` and returns a float. Leading\nwhitespace in this argument `v`is ignored. `radix` specifies the radix base to\nuse for the formatted number. The value must be in the range \\[2, 36\\] (inclusive).\nReturns `NaN` if `v` can't be parsed and `radix` is smaller than 2 or bigger\nthan 36.\nSee [`parseInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) on MDN.\n\n## Examples\n\n```rescript\nFloat.parseInt(\"1.0\") == 1.0\nFloat.parseInt(\"  3.14   \") == 3.0\nFloat.parseInt(3) == 3.0\nFloat.parseInt(\"3.14some non-digit characters\") == 3.0\nFloat.parseInt(\"error\")->Float.isNaN == true\nFloat.parseInt(\"10.0\", ~radix=2) == 2.0\nFloat.parseInt(\"15 * 3\", ~radix=10) == 15.0\nFloat.parseInt(\"12\", ~radix=13) == 15.0\nFloat.parseInt(\"17\", ~radix=40)->Float.isNaN == true\n```"
        ],
        "signature": "let parseInt: ('a, ~radix: int=?) => float"
      },
      {
        "id": "Stdlib.Float.parseIntWithRadix",
        "kind": "value",
        "name": "parseIntWithRadix",
        "docstrings": [
          "`parseIntWithRadix(v, ~radix)` parse the given `v` and returns a float. Leading\nwhitespace in this argument `v`is ignored. `radix` specifies the radix base to\nuse for the formatted number. The value must be in the range \\[2, 36\\] (inclusive).\nReturns `NaN` if `v` can't be parsed and `radix` is smaller than 2 or bigger\nthan 36.\nSee [`parseInt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt) on MDN.\n\n## Examples\n\n```rescript\nFloat.parseIntWithRadix(\"10.0\", ~radix=2) == 2.0\nFloat.parseIntWithRadix(\"15 * 3\", ~radix=10) == 15.0\nFloat.parseIntWithRadix(\"12\", ~radix=13) == 15.0\nFloat.parseIntWithRadix(\"17\", ~radix=40)->Float.isNaN == true\n```"
        ],
        "signature": "let parseIntWithRadix: ('a, ~radix: int) => float",
        "deprecated": "Use `parseInt` instead"
      },
      {
        "id": "Stdlib.Float.toExponential",
        "kind": "value",
        "name": "toExponential",
        "docstrings": [
          "`toExponential(v, ~digits=?)` return a `string` representing the given value in\nexponential notation. `digits` specifies how many digits should appear after\nthe decimal point.\nSee [`Number.toExponential`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) on MDN.\n\n## Examples\n\n```rescript\nFloat.toExponential(1000.0) == \"1e+3\"\nFloat.toExponential(-1000.0) == \"-1e+3\"\nFloat.toExponential(77.0, ~digits=2) == \"7.70e+1\"\nFloat.toExponential(5678.0, ~digits=2) == \"5.68e+3\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` less than 0 or greater than 10."
        ],
        "signature": "let toExponential: (float, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Float.toExponentialWithPrecision",
        "kind": "value",
        "name": "toExponentialWithPrecision",
        "docstrings": [
          "`toExponential(v, ~digits)` return a `string` representing the given value in\nexponential notation. `digits` specifies how many digits should appear after\nthe decimal point.\nSee [`Number.toExponential`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential) on MDN.\n\n## Examples\n\n```rescript\nFloat.toExponentialWithPrecision(77.0, ~digits=2) == \"7.70e+1\"\nFloat.toExponentialWithPrecision(5678.0, ~digits=2) == \"5.68e+3\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` less than 0 or greater than 10."
        ],
        "signature": "let toExponentialWithPrecision: (float, ~digits: int) => string",
        "deprecated": "Use `toExponential` instead"
      },
      {
        "id": "Stdlib.Float.toFixed",
        "kind": "value",
        "name": "toFixed",
        "docstrings": [
          "`toFixed(v, ~digits=?)` return a `string` representing the given\nvalue using fixed-point notation. `digits` specifies how many digits should\nappear after the decimal point.\nSee [`Number.toFixed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) on MDN.\n\n## Examples\n\n```rescript\nFloat.toFixed(123456.0) == \"123456\"\nFloat.toFixed(10.0) == \"10\"\nFloat.toFixed(300.0, ~digits=4) == \"300.0000\"\nFloat.toFixed(300.0, ~digits=1) == \"300.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is less than 0 or larger than 100."
        ],
        "signature": "let toFixed: (float, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Float.toFixedWithPrecision",
        "kind": "value",
        "name": "toFixedWithPrecision",
        "docstrings": [
          "`toFixedWithPrecision(v, ~digits)` return a `string` representing the given\nvalue using fixed-point notation. `digits` specifies how many digits should\nappear after the decimal point.\nSee [`Number.toFixed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) on MDN.\n\n## Examples\n\n```rescript\nFloat.toFixedWithPrecision(300.0, ~digits=4) == \"300.0000\"\nFloat.toFixedWithPrecision(300.0, ~digits=1) == \"300.0\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is less than 0 or larger than 100."
        ],
        "signature": "let toFixedWithPrecision: (float, ~digits: int) => string",
        "deprecated": "Use `toFixed` instead"
      },
      {
        "id": "Stdlib.Float.toPrecision",
        "kind": "value",
        "name": "toPrecision",
        "docstrings": [
          "`toPrecision(v, ~digits=?)` return a `string` representing the giver value with\nprecision. `digits` specifies the number of significant digits.\nSee [`Number.toPrecision`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) on MDN.\n\n## Examples\n\n```rescript\nFloat.toPrecision(100.0) == \"100\"\nFloat.toPrecision(1.0) == \"1\"\nFloat.toPrecision(100.0, ~digits=2) == \"1.0e+2\"\nFloat.toPrecision(1.0, ~digits=1) == \"1\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is not between 1 and 100 (inclusive).\n  Implementations are allowed to support larger and smaller values as well.\n  ECMA-262 only requires a precision of up to 21 significant digits."
        ],
        "signature": "let toPrecision: (float, ~digits: int=?) => string"
      },
      {
        "id": "Stdlib.Float.toPrecisionWithPrecision",
        "kind": "value",
        "name": "toPrecisionWithPrecision",
        "docstrings": [
          "`toPrecisionWithPrecision(v, ~digits)` return a `string` representing the giver value with\nprecision. `digits` specifies the number of significant digits.\nSee [`Number.toPrecision`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision) on MDN.\n\n## Examples\n\n```rescript\nFloat.toPrecisionWithPrecision(100.0, ~digits=2) == \"1.0e+2\"\nFloat.toPrecisionWithPrecision(1.0, ~digits=1) == \"1\"\n```\n\n## Exceptions\n\n- `RangeError`: If `digits` is not between 1 and 100 (inclusive).\n  Implementations are allowed to support larger and smaller values as well.\n  ECMA-262 only requires a precision of up to 21 significant digits."
        ],
        "signature": "let toPrecisionWithPrecision: (float, ~digits: int) => string",
        "deprecated": "Use `toPrecision` instead"
      },
      {
        "id": "Stdlib.Float.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "`toString(v)` return a `string` representing the given value.\nSee [`Number.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) on MDN.\n\n## Examples\n\n```rescript\nFloat.toString(1000.0) == \"1000\"\nFloat.toString(-1000.0) == \"-1000\"\n```"
        ],
        "signature": "let toString: (float, ~radix: int=?) => string"
      },
      {
        "id": "Stdlib.Float.toStringWithRadix",
        "kind": "value",
        "name": "toStringWithRadix",
        "docstrings": [
          "`toStringWithRadix(v, ~radix)` return a `string` representing the given value.\n`~radix` specifies the radix base to use for the formatted number.\nSee [`Number.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) on MDN.\n\n## Examples\n\n```rescript\nFloat.toStringWithRadix(6.0, ~radix=2) == \"110\"\nFloat.toStringWithRadix(3735928559.0, ~radix=16) == \"deadbeef\"\nFloat.toStringWithRadix(123456.0, ~radix=36) == \"2n9c\"\n```\n\n## Exceptions\n\n`RangeError`: if `radix` is less than 2 or greater than 36."
        ],
        "signature": "let toStringWithRadix: (float, ~radix: int) => string",
        "deprecated": "Use `toString` with `~radix` instead"
      },
      {
        "id": "Stdlib.Float.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [
          "`toLocaleString(v)` return a `string` with language-sensitive representing the\ngiven value.\nSee [`Number.toLocaleString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString) on MDN.\n\n## Examples\n\n```rescript\n// If the application uses English as the default language\nFloat.toLocaleString(1000.0) // \"1,000\"\n\n// If the application uses Portuguese Brazil as the default language\nFloat.toLocaleString(1000.0) // \"1.000\"\n```"
        ],
        "signature": "let toLocaleString: float => string"
      },
      {
        "id": "Stdlib.Float.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "`fromString(str)` return an `option<int>` representing the given value `str`.\n\n## Examples\n\n```rescript\nFloat.fromString(\"0\") == Some(0.0)\nFloat.fromString(\"NaN\") == None\nFloat.fromString(\"6\") == Some(6.0)\n```"
        ],
        "signature": "let fromString: string => option<float>"
      },
      {
        "id": "Stdlib.Float.toInt",
        "kind": "value",
        "name": "toInt",
        "docstrings": [
          "`toInt(v)` returns an int to given float `v`.\n\n## Examples\n\n```rescript\nFloat.toInt(2.0) == 2\nFloat.toInt(1.0) == 1\nFloat.toInt(1.1) == 1\nFloat.toInt(1.6) == 1\n```"
        ],
        "signature": "let toInt: float => int"
      },
      {
        "id": "Stdlib.Float.fromInt",
        "kind": "value",
        "name": "fromInt",
        "docstrings": [
          "`fromInt(v)` returns a float to given int `v`.\n\n## Examples\n\n```rescript\nFloat.fromInt(2) == 2.0\nFloat.fromInt(1) == 1.0\n```"
        ],
        "signature": "let fromInt: int => float"
      },
      {
        "id": "Stdlib.Float.mod",
        "kind": "value",
        "name": "mod",
        "docstrings": [
          "`mod(n1, n2)` calculates the modulo (remainder after division) of two floats.\n\n## Examples\n\n```rescript\nFloat.mod(7.0, 4.0) == 3.0\n```"
        ],
        "signature": "let mod: (float, float) => float"
      },
      {
        "id": "Stdlib.Float.clamp",
        "kind": "value",
        "name": "clamp",
        "docstrings": [
          "`clamp(~min=?, ~max=?, value)` returns `value`, optionally bounded by `min` and `max`.\n\nif `max` \\< `min` returns `min`.\n\n## Examples\n\n```rescript\nFloat.clamp(4.2) == 4.2\nFloat.clamp(4.2, ~min=4.3) == 4.3\nFloat.clamp(4.2, ~max=4.1) == 4.1\nFloat.clamp(4.2, ~min=4.3, ~max=4.1) == 4.3\n```"
        ],
        "signature": "let clamp: (~min: float=?, ~max: float=?, float) => float"
      },
      {
        "id": "Stdlib.Float.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(float)` ignores the provided float and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: float => unit"
      }
    ]
  },
  "stdlib/error": {
    "id": "Stdlib.Error",
    "name": "Error",
    "docstrings": [
      "Functions for working with JavaScript exceptions.\n\nSee [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) on MDN."
    ],
    "items": [
      {
        "id": "Stdlib.Error.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Represents a JavaScript exception."],
        "signature": "type t = Exn.t",
        "deprecated": "Use `JsError.t` instead"
      },
      {
        "id": "Stdlib.Error.fromException",
        "kind": "value",
        "name": "fromException",
        "docstrings": [],
        "signature": "let fromException: exn => option<t>",
        "deprecated": "Use `JsExn.fromException` instead"
      },
      {
        "id": "Stdlib.Error.toException",
        "kind": "value",
        "name": "toException",
        "docstrings": [
          "Turns an `Error.t` into an `exn`.\n\n## Examples\n```rescript\nlet error = Error.make(\"Something went wrong.\")\n\nlet asExn = error->Error.toException // `asExn` is now type `exn`\n```"
        ],
        "signature": "let toException: t => exn",
        "deprecated": "Use functions from `JsExn` instead"
      },
      {
        "id": "Stdlib.Error.stack",
        "kind": "value",
        "name": "stack",
        "docstrings": [
          "`stack(error)` retrieves the `stack` property of the error, if it exists. The stack is a list of what functions were called, and what files they are defined in, prior to the error happening.\n\nSee [`Error.prototype.stack`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Stack) on MDN.\n\n## Example\n```rescript\nlet error = Error.make(\"error\")\nConsole.log(error->Error.stack) // Logs `stack` if it exists on `someError`\n```"
        ],
        "signature": "let stack: t => option<string>",
        "deprecated": "Use `JsError.stack` instead"
      },
      {
        "id": "Stdlib.Error.message",
        "kind": "value",
        "name": "message",
        "docstrings": [
          "`message(error)` retrieves the `message` property of the error, if it exists.\n\nSee [`Error.prototype.message`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message) on MDN.\n\n## Example\n```rescript\nlet error = Error.SyntaxError.make(\"Some message here\")\nConsole.log(error->Error.message) // Logs \"Some message here\" to the console\n```"
        ],
        "signature": "let message: t => option<string>",
        "deprecated": "Use `JsError.message` instead"
      },
      {
        "id": "Stdlib.Error.name",
        "kind": "value",
        "name": "name",
        "docstrings": [
          "`name(error)` retrieves the `name` property of the error, if it exists.\n\nSee [`Error.prototype.name`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name) on MDN.\n\n## Example\n```rescript\nlet error = Error.SyntaxError.make(\"Some message here\")\nConsole.log(error->Error.name) // Logs \"SyntaxError\" to the console\n```"
        ],
        "signature": "let name: t => option<string>",
        "deprecated": "Use `JsError.name` instead"
      },
      {
        "id": "Stdlib.Error.fileName",
        "kind": "value",
        "name": "fileName",
        "docstrings": [
          "`fileName(error)` retrieves the `fileName` property of the error, if it exists.\n\nSee [`Error.prototype.fileName`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/fileName) on MDN."
        ],
        "signature": "let fileName: t => option<string>",
        "deprecated": "Use `JsError.fileName` instead"
      },
      {
        "id": "Stdlib.Error.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(message)` creates a new error, setting its `message` to the provided value.\n\nSee [`Error`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error) on MDN.\n\n## Example\n```rescript\nlet error = Error.make(\"Some message here\")\nConsole.log(error->Error.message) // Logs \"Some message here\" to the console\nConsole.log(error->Error.name) // Logs \"Error\" to the console, because this is a regular error\n```"
        ],
        "signature": "let make: string => t",
        "deprecated": "Use `JsError.make` instead"
      },
      {
        "id": "Stdlib.Error.raise",
        "kind": "value",
        "name": "raise",
        "docstrings": [
          "Raises (throws in JavaScript language) the provided `Error.t`, which will stop execution.\n\n## Examples\n```rescript\nlet error = Error.make(\"Everything is upside down.\")\n\nif 5 > 10 {\n  error->Error.raise\n} else {\n  Console.log(\"Phew, sanity still rules.\")\n}\n```"
        ],
        "signature": "let raise: t => 'a",
        "deprecated": "`raise` has been renamed to `throw` to align with JavaScript vocabulary. Please use `JsError.throw` instead"
      },
      {
        "id": "Stdlib.Error.throw",
        "kind": "value",
        "name": "throw",
        "docstrings": [
          "Raises the given exception, terminating execution unless caught by a surrounding try/catch block.\n\n## Examples\n\n```rescript\nlet error = Error.make(\"Everything is upside down.\")\n\nif 5 > 10 {\n  Error.throw(error)\n} else {\n  Console.log(\"Phew, sanity still rules.\")\n}\n```"
        ],
        "signature": "let throw: t => 'a",
        "deprecated": "Use `JsError.throw` instead"
      },
      {
        "id": "Stdlib.Error.panic",
        "kind": "value",
        "name": "panic",
        "docstrings": [
          "Raises a panic exception with the given message.\n\nA panic exception is a native JavaScript exception that is not intended to be caught and\nhandled. Compared to a ReScript exception this will give a better stack trace and\ndebugging experience.\n\n## Examples\n\n```rescript\ntry {\n  Error.panic(\"Uh oh. This was unexpected!\")\n} catch {\n| Exn.Error(obj) =>\n  switch Exn.message(obj) {\n  | Some(m) => assert(m == \"Panic! Uh oh. This was unexpected!\")\n  | None => assert(false)\n  }\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let panic: string => 'a",
        "deprecated": "Use `JsError.panic` instead"
      },
      {
        "id": "Stdlib.Error.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(error)` ignores the provided error and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit",
        "deprecated": "Use `JsError.ignore` instead"
      }
    ]
  },
  "stdlib/exn": {
    "id": "Stdlib.Exn",
    "name": "Exn",
    "docstrings": ["Provide utilities for dealing with JS exceptions."],
    "items": [
      {
        "id": "Stdlib.Exn.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Represents a JS exception"],
        "signature": "type t",
        "deprecated": "Use `JsExn.t` instead"
      },
      {
        "id": "Stdlib.Exn.asJsExn",
        "kind": "value",
        "name": "asJsExn",
        "docstrings": [],
        "signature": "let asJsExn: exn => option<t>",
        "deprecated": "Use `JsExn.fromException` instead"
      },
      {
        "id": "Stdlib.Exn.stack",
        "kind": "value",
        "name": "stack",
        "docstrings": [],
        "signature": "let stack: t => option<string>",
        "deprecated": "Use `JsExn.stack` instead"
      },
      {
        "id": "Stdlib.Exn.message",
        "kind": "value",
        "name": "message",
        "docstrings": [],
        "signature": "let message: t => option<string>",
        "deprecated": "Use `JsExn.message` instead"
      },
      {
        "id": "Stdlib.Exn.name",
        "kind": "value",
        "name": "name",
        "docstrings": [],
        "signature": "let name: t => option<string>",
        "deprecated": "Use `JsExn.name` instead"
      },
      {
        "id": "Stdlib.Exn.fileName",
        "kind": "value",
        "name": "fileName",
        "docstrings": [],
        "signature": "let fileName: t => option<string>",
        "deprecated": "Use `JsExn.fileName` instead"
      },
      {
        "id": "Stdlib.Exn.anyToExnInternal",
        "kind": "value",
        "name": "anyToExnInternal",
        "docstrings": [
          "`anyToExnInternal(obj)` will take any value `obj` and wrap it\nin a Exn.Error if given value is not an exn already. If\n`obj` is an exn, it will return `obj` without any changes.\n\nThis function is mostly useful for cases where you want to unify a type of a value\nthat potentially is either exn, a JS error, or any other JS value really (e.g. for\na value passed to a Promise.catch callback)\n\n**IMPORTANT**: This is an internal API and may be changed / removed any time in the future."
        ],
        "signature": "let anyToExnInternal: 'a => exn",
        "deprecated": "Use `JsExn.anyToExnInternal` instead"
      },
      {
        "id": "Stdlib.Exn.raiseError",
        "kind": "value",
        "name": "raiseError",
        "docstrings": ["Raise Js exception Error object with stacktrace"],
        "signature": "let raiseError: string => 'a",
        "deprecated": "Use `JsError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseEvalError",
        "kind": "value",
        "name": "raiseEvalError",
        "docstrings": [],
        "signature": "let raiseEvalError: string => 'a",
        "deprecated": "Use `JsError.EvalError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseRangeError",
        "kind": "value",
        "name": "raiseRangeError",
        "docstrings": [],
        "signature": "let raiseRangeError: string => 'a",
        "deprecated": "Use `JsError.RangeError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseReferenceError",
        "kind": "value",
        "name": "raiseReferenceError",
        "docstrings": [],
        "signature": "let raiseReferenceError: string => 'a",
        "deprecated": "Use `JsError.ReferenceError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseSyntaxError",
        "kind": "value",
        "name": "raiseSyntaxError",
        "docstrings": [],
        "signature": "let raiseSyntaxError: string => 'a",
        "deprecated": "Use `JsError.SyntaxError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseTypeError",
        "kind": "value",
        "name": "raiseTypeError",
        "docstrings": [],
        "signature": "let raiseTypeError: string => 'a",
        "deprecated": "Use `JsError.TypeError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.raiseUriError",
        "kind": "value",
        "name": "raiseUriError",
        "docstrings": [],
        "signature": "let raiseUriError: string => 'a",
        "deprecated": "Use `JsError.URIError.throwWithMessage` instead"
      },
      {
        "id": "Stdlib.Exn.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(exn)` ignores the provided exn and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit",
        "deprecated": "Use `JsExn.ignore` instead"
      }
    ]
  },
  "stdlib/dict": {
    "id": "Stdlib.Dict",
    "name": "Dict",
    "docstrings": [
      "A mutable dictionary with string keys.\n\nCompiles to a regular JavaScript object."
    ],
    "items": [
      {
        "id": "Stdlib.Dict.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a dictionary of value `'a`."],
        "signature": "type t<'a> = dict<'a>"
      },
      {
        "id": "Stdlib.Dict.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(dict, key)` Returns the `value` at the provided `key`.\n\nThis is _unsafe_, meaning it will return `undefined` value if `key` does not exist in `dict`.\n\nUse `Dict.getUnsafe` only when you are sure the key exists (i.e. when iterating `Dict.keys` result).\n\n## Examples\n```rescript\nlet dict = dict{\"key1\": \"value1\", \"key2\": \"value2\"}\nlet value = dict->Dict.getUnsafe(\"key1\")\nConsole.log(value) // value1\n```"
        ],
        "signature": "let getUnsafe: (dict<'a>, string) => 'a"
      },
      {
        "id": "Stdlib.Dict.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "Returns the value at the provided key, if it exists. Returns an option.\n\n## Examples\n```rescript\nlet dict = dict{\"someKey\": \"someValue\"}\n\nswitch dict->Dict.get(\"someKey\") {\n| None => Console.log(\"Nope, didn't have the key.\")\n| Some(value) => Console.log(value)\n}\n```"
        ],
        "signature": "let get: (dict<'a>, string) => option<'a>"
      },
      {
        "id": "Stdlib.Dict.set",
        "kind": "value",
        "name": "set",
        "docstrings": [
          "`set(dictionary, key, value)` sets the value at the provided key to the provided value.\n\n## Examples\n```rescript\nlet dict = Dict.make()\n\ndict->Dict.set(\"someKey\", \"someValue\")\n```"
        ],
        "signature": "let set: (dict<'a>, string, 'a) => unit"
      },
      {
        "id": "Stdlib.Dict.delete",
        "kind": "value",
        "name": "delete",
        "docstrings": [
          "`delete(dictionary, key)` deletes the value at `key`, if it exists.\n\n## Examples\n```rescript\nlet dict = dict{\"someKey\": \"someValue\"}\n\ndict->Dict.delete(\"someKey\")\n```"
        ],
        "signature": "let delete: (dict<'a>, string) => unit"
      },
      {
        "id": "Stdlib.Dict.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make()` creates a new, empty dictionary.\n\n## Examples\n```rescript\nlet dict1: dict<int> = Dict.make() // You can annotate the type of the values of your dict yourself if you want\n\nlet dict2 = Dict.make() // Or you can let ReScript infer it via usage.\ndict2->Dict.set(\"someKey\", 12)\n```"
        ],
        "signature": "let make: unit => dict<'a>"
      },
      {
        "id": "Stdlib.Dict.fromArray",
        "kind": "value",
        "name": "fromArray",
        "docstrings": [
          "`fromArray(entries)` creates a new dictionary from the provided array of key/value pairs.\n\n## Examples\n```rescript\nlet dict = Dict.fromArray([(\"key1\", \"value1\"), (\"key2\", \"value2\")])\n```"
        ],
        "signature": "let fromArray: array<(string, 'a)> => dict<'a>"
      },
      {
        "id": "Stdlib.Dict.fromIterator",
        "kind": "value",
        "name": "fromIterator",
        "docstrings": [
          "`fromIterator(entries)` creates a new dictionary from the provided iterator of key/value pairs.\n\n## Examples\n\n```rescript\nlet iterator: Iterator.t<(string, int)> = %raw(`\n  (() => {\n    var map1 = new Map();\n    map1.set('first', 1);\n    map1.set('second', 2);\n    var iterator1 = map1[Symbol.iterator]();\n    return iterator1;\n  })()\n`)\niterator\n->Dict.fromIterator\n->Dict.valuesToArray == [1, 2]\n```"
        ],
        "signature": "let fromIterator: Iterator.t<(string, 'a)> => dict<'a>"
      },
      {
        "id": "Stdlib.Dict.toArray",
        "kind": "value",
        "name": "toArray",
        "docstrings": [
          "`toArray(dictionary)` returns an array of all the key/value pairs of the dictionary.\n\n## Examples\n```rescript\nlet dict = Dict.make()\ndict->Dict.set(\"someKey\", 1)\ndict->Dict.set(\"someKey2\", 2)\nlet asArray = dict->Dict.toArray\nConsole.log(asArray) // Logs `[[\"someKey\", 1], [\"someKey2\", 2]]` to the console\n```"
        ],
        "signature": "let toArray: dict<'a> => array<(string, 'a)>"
      },
      {
        "id": "Stdlib.Dict.keysToArray",
        "kind": "value",
        "name": "keysToArray",
        "docstrings": [
          "`keysToArray(dictionary)` returns an array of all the keys of the dictionary.\n\n## Examples\n```rescript\nlet dict = Dict.make()\ndict->Dict.set(\"someKey\", 1)\ndict->Dict.set(\"someKey2\", 2)\nlet keys = dict->Dict.keysToArray\nConsole.log(keys) // Logs `[\"someKey\", \"someKey2\"]` to the console\n```"
        ],
        "signature": "let keysToArray: dict<'a> => array<string>"
      },
      {
        "id": "Stdlib.Dict.valuesToArray",
        "kind": "value",
        "name": "valuesToArray",
        "docstrings": [
          "`valuesToArray(dictionary)` returns an array of all the values of the dictionary.\n\n## Examples\n```rescript\nlet dict = Dict.make()\ndict->Dict.set(\"someKey\", 1)\ndict->Dict.set(\"someKey2\", 2)\nlet values = dict->Dict.valuesToArray\nConsole.log(values) // Logs `[1, 2]` to the console\n```"
        ],
        "signature": "let valuesToArray: dict<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Dict.assign",
        "kind": "value",
        "name": "assign",
        "docstrings": [
          "`assign(dictionary1, dictionary2)` [shallowly](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) merges dictionary2 into dictionary1, and returns dictionary1.\n\nBeware this will *mutate* dictionary1. If you're looking for a way to copy a dictionary, check out `Dict.copy`.\n\n## Examples\n```rescript\nlet dict1 = Dict.make()\ndict1->Dict.set(\"firstKey\", 1)\nConsole.log(dict1->Dict.keysToArray) // Logs `[\"firstKey\"]`\n\nlet dict2 = Dict.make()\ndict2->Dict.set(\"someKey\", 2)\ndict2->Dict.set(\"someKey2\", 3)\n\nlet dict1 = dict1->Dict.assign(dict2)\n\nConsole.log(dict1->Dict.keysToArray) // Logs `[\"firstKey\", \"someKey\", \"someKey2\"]`\n```"
        ],
        "signature": "let assign: (dict<'a>, dict<'a>) => dict<'a>"
      },
      {
        "id": "Stdlib.Dict.copy",
        "kind": "value",
        "name": "copy",
        "docstrings": [
          "`copy(dictionary)` [shallowly copies](https://developer.mozilla.org/en-US/docs/Glossary/Shallow_copy) the provided dictionary to a new dictionary.\n\n## Examples\n```rescript\nlet dict = dict{\"key1\": \"value1\", \"key2\": \"value2\"}\nlet dict2 = dict->Dict.copy\n\n// Both log `[\"key1\", \"key2\"]` here.\nConsole.log2(dict->Dict.keysToArray, dict2->Dict.keysToArray)\n```"
        ],
        "signature": "let copy: dict<'a> => dict<'a>"
      },
      {
        "id": "Stdlib.Dict.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(dictionary, f)` iterates through all values of the dict.\n\n> Please note that this is *without the keys*, just the values. If you need the key as well, use `Dict.forEachWithKey`.\n\n## Examples\n```rescript\nlet dict = dict{\"key1\": \"value1\", \"key2\": \"value2\"}\n\ndict->Dict.forEach(value => {\n  Console.log(value)\n})\n```"
        ],
        "signature": "let forEach: (dict<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Dict.forEachWithKey",
        "kind": "value",
        "name": "forEachWithKey",
        "docstrings": [
          "`forEachWithKey(dictionary, f)` iterates through all values of the dict, including the key for each value.\n\n## Examples\n```rescript\nlet dict = dict{\"key1\": \"value1\", \"key2\": \"value2\"}\n\ndict->Dict.forEachWithKey((value, key) => {\n  Console.log2(value, key)\n})\n```"
        ],
        "signature": "let forEachWithKey: (dict<'a>, ('a, string) => unit) => unit"
      },
      {
        "id": "Stdlib.Dict.mapValues",
        "kind": "value",
        "name": "mapValues",
        "docstrings": [
          "`mapValues(dictionary, f)` returns a new dictionary with the same keys, and `f` applied to each value in the original dictionary.\n\n## Examples\n\n```rescript\nlet dict = dict{\"key1\": 1, \"key2\": 2}\n\ndict->Dict.mapValues(v => v + 10)->Dict.toArray // [(\"key1\", 11), (\"key2\", 12)]\ndict->Dict.mapValues(v => Int.toString(v))->Dict.toArray // [(\"key1\", \"1\"), (\"key2\", \"2\")]\n```"
        ],
        "signature": "let mapValues: (dict<'a>, 'a => 'b) => dict<'b>"
      },
      {
        "id": "Stdlib.Dict.has",
        "kind": "value",
        "name": "has",
        "docstrings": [
          "`has(dictionary, \"key\")` returns true if the \"key\" is present in the dictionary.\n\nBe aware that it uses the JavaScript `in` operator under the hood.\n\n## Examples\n\n```rescript\nlet dict = dict{\"key1\": Some(1), \"key2\": None}\n\ndict->Dict.has(\"key1\") == true\ndict->Dict.has(\"key2\") == true\ndict->Dict.has(\"key3\") == false\ndict->Dict.has(\"toString\") == true\n```"
        ],
        "signature": "let has: (dict<'a>, string) => bool"
      },
      {
        "id": "Stdlib.Dict.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(dict)` ignores the provided dict and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: dict<'a> => unit"
      }
    ]
  },
  "stdlib/date": {
    "id": "Stdlib.Date",
    "name": "Date",
    "docstrings": ["Functions for interacting with JavaScript Dates."],
    "items": [
      {
        "id": "Stdlib.Date.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["A type representing a JavaScript date."],
        "signature": "type t"
      },
      {
        "id": "Stdlib.Date.msSinceEpoch",
        "kind": "type",
        "name": "msSinceEpoch",
        "docstrings": [
          "Time, in milliseconds, since / until the UNIX epoch (January 1, 1970 00:00:00 UTC).\nPositive numbers represent dates after, negative numbers dates before epoch."
        ],
        "signature": "type msSinceEpoch = float"
      },
      {
        "id": "Stdlib.Date.localeOptions",
        "kind": "type",
        "name": "localeOptions",
        "docstrings": [
          "A type representing date time format options.\n\nNote: There are some properties missing:\n- fractionalSecondDigits\n- dayPeriod\n- calendar\n- numberingSystem\n- localeMatcher\n- timeZone\n- hour12\n- hourCycle\n- formatMatcher\n\nSee full spec at https://tc39.es/ecma402/#datetimeformat-objects"
        ],
        "signature": "type localeOptions = {\n  dateStyle?: [#full | #long | #medium | #short],\n  timeStyle?: [#full | #long | #medium | #short],\n  weekday?: [#long | #narrow | #short],\n  era?: [#long | #narrow | #short],\n  year?: [#\"2-digit\" | #numeric],\n  month?: [\n    | #\"2-digit\"\n    | #long\n    | #narrow\n    | #numeric\n    | #short\n  ],\n  day?: [#\"2-digit\" | #numeric],\n  hour?: [#\"2-digit\" | #numeric],\n  minute?: [#\"2-digit\" | #numeric],\n  second?: [#\"2-digit\" | #numeric],\n  timeZoneName?: [#long | #short],\n}"
      },
      {
        "id": "Stdlib.Date.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make()`\n\nCreates a date object with the current date time as value.\n\n## Examples\n```rescript\nDate.make()\n```"
        ],
        "signature": "let make: unit => t"
      },
      {
        "id": "Stdlib.Date.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "`fromString(dateTimeString)`\n\nCreates a date object from given date time string.\nThe string has to be in the ISO 8601 format YYYY-MM-DDTHH:mm:ss.sssZ (https://tc39.es/ecma262/\\#sec-date-time-string-format).\n\nInvalid date time strings will create invalid dates.\nYou can use the result like any valid date, but many functions like `toString` will return \"Invalid Date\" or functions like `Date.getTime` will return NaN.\n\n## Examples\n```rescript\nDate.fromString(\"2023\") // 2023-01-01T00:00:00.000Z\n\nDate.fromString(\"2023-02-20\") // 2023-02-20T00:00:00.000Z\n\nDate.fromString(\"2023-02-20T16:40:00.00Z\") // 2023-02-20T16:40:00.000Z\n\nDate.fromString(\"\") // Invalid Date\n\nDate.fromString(\"\")->Date.getTime // NaN\n```"
        ],
        "signature": "let fromString: string => t"
      },
      {
        "id": "Stdlib.Date.fromTime",
        "kind": "value",
        "name": "fromTime",
        "docstrings": [
          "`fromTime(msSinceEpoch)`\n\nCreates a date object from the given time in milliseconds since / until UNIX epoch (January 1, 1970 00:00:00 UTC).\nPositive numbers create dates after epoch, negative numbers create dates before epoch.\n\n## Examples\n```rescript\nDate.fromTime(0.0)\n// 1970-01-01T00:00:00.000Z\n\nDate.fromTime(-86_400_000.0)\n// 1969-12-31T00:00:00.000Z\n\nDate.fromTime(86_400_000.0)\n// 1970-01-02T00:00:00.000Z\n```"
        ],
        "signature": "let fromTime: msSinceEpoch => t"
      },
      {
        "id": "Stdlib.Date.makeWithYM",
        "kind": "value",
        "name": "makeWithYM",
        "docstrings": [
          "Creates a date object with the given year and month.\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYM(~year=2023, ~month=0)\n// 2023-01-01T00:00:00.000Z\n\nDate.makeWithYM(~year=2023, ~month=11)\n// 2023-12-01T00:00:00.000Z\n\nDate.makeWithYM(~year=2023, ~month=12)\n// 2024-01-01T00:00:00.000Z\n\nDate.makeWithYM(~year=2023, ~month=-1)\n// 2022-12-01T00:00:00.000Z\n\n// Note: The output depends on your local time zone.\n// In nodejs you can change it by using the TZ env (`export TZ='Europe/London' && node index.bs.js`)\n```"
        ],
        "signature": "let makeWithYM: (~year: int, ~month: int) => t"
      },
      {
        "id": "Stdlib.Date.makeWithYMD",
        "kind": "value",
        "name": "makeWithYMD",
        "docstrings": [
          "Creates a date object with the given year, month and date (day of month).\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYMD(~year=2023, ~month=1, ~day=20)\n// 2023-02-20T00:00:00.000Z\n\nDate.makeWithYMD(~year=2023, ~month=1, ~day=-1)\n// 2022-11-29T00:00:00.000Z\n\nDate.makeWithYMD(~year=2023, ~month=1, ~day=29)\n// 2023-03-01T00:00:00.000Z\n```"
        ],
        "signature": "let makeWithYMD: (~year: int, ~month: int, ~day: int) => t"
      },
      {
        "id": "Stdlib.Date.makeWithYMDH",
        "kind": "value",
        "name": "makeWithYMDH",
        "docstrings": [
          "Creates a date object with the given year, month, date (day of month) and hours.\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=16)\n// 2023-02-20T16:00:00.000Z\n\nDate.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=24)\n// 2023-02-21T00:00:00.000Z\n\nDate.makeWithYMDH(~year=2023, ~month=1, ~day=20, ~hours=-1)\n// 2023-02-19T23:00:00.000Z\n\n// Note: The output depends on your local time zone.\n// In nodejs you can change it by using the TZ env (`export TZ='Europe/London' && node index.bs.js`)\n```"
        ],
        "signature": "let makeWithYMDH: (~year: int, ~month: int, ~day: int, ~hours: int) => t"
      },
      {
        "id": "Stdlib.Date.makeWithYMDHM",
        "kind": "value",
        "name": "makeWithYMDHM",
        "docstrings": [
          "Creates a date object with the given year, month, date (day of month), hours and minutes.\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40)\n// 2023-02-20T16:40:00.000Z\n\nDate.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=60)\n// 2023-02-20T17:00:00.000Z\n\nDate.makeWithYMDHM(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=-1)\n// 2023-02-20T15:59:00.000Z\n\n// Note: The output depends on your local time zone.\n// In nodejs you can change it by using the TZ env (`export TZ='Europe/London' && node index.bs.js`)\n```"
        ],
        "signature": "let makeWithYMDHM: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n) => t"
      },
      {
        "id": "Stdlib.Date.makeWithYMDHMS",
        "kind": "value",
        "name": "makeWithYMDHMS",
        "docstrings": [
          "Creates a date object with the given year, month, date (day of month), hours, minutes and seconds.\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=0)\n// 2023-02-20T16:40:00.000Z\n\nDate.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=60)\n// 2023-02-20T16:41:00.000Z\n\nDate.makeWithYMDHMS(~year=2023, ~month=1, ~day=20, ~hours=16, ~minutes=40, ~seconds=-1)\n// 2023-02-20T16:39:59.000Z\n\n// Note: The output depends on your local time zone.\n// In nodejs you can change it by using the TZ env (`export TZ='Europe/London' && node index.bs.js`)\n```"
        ],
        "signature": "let makeWithYMDHMS: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n) => t"
      },
      {
        "id": "Stdlib.Date.makeWithYMDHMSM",
        "kind": "value",
        "name": "makeWithYMDHMSM",
        "docstrings": [
          "Creates a date object with the given year, month, date (day of month), hours, minutes, seconds and milliseconds.\nBe aware of using a value for year \\< 100, because it behaves inconsistent (see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\\_Objects/Date\\#interpretation\\_of\\_two-digit\\_years).\nMonths are 0-indexed (0 = January, 11 = December).\nValues, which are out of range, will be carried over to the next bigger unit (s. example).\n\n## Examples\n```rescript\nDate.makeWithYMDHMSM(\n  ~year=2023,\n  ~month=1,\n  ~day=20,\n  ~hours=16,\n  ~minutes=40,\n  ~seconds=0,\n  ~milliseconds=0,\n)\n// 2023-02-20T16:40:00.000Z\n\nDate.makeWithYMDHMSM(\n  ~year=2023,\n  ~month=1,\n  ~day=20,\n  ~hours=16,\n  ~minutes=40,\n  ~seconds=0,\n  ~milliseconds=1000,\n)\n// 2023-02-20T16:40:01.000Z\n\nDate.makeWithYMDHMSM(\n  ~year=2023,\n  ~month=1,\n  ~day=20,\n  ~hours=16,\n  ~minutes=40,\n  ~seconds=0,\n  ~milliseconds=-1,\n)\n// 2023-02-20T16:39:59.999Z\n\n// Note: The output depends on your local time zone.\n// In nodejs you can change it by using the TZ env (`export TZ='Europe/London' && node index.bs.js`)\n```"
        ],
        "signature": "let makeWithYMDHMSM: (\n  ~year: int,\n  ~month: int,\n  ~day: int,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => t"
      },
      {
        "id": "Stdlib.Date.now",
        "kind": "value",
        "name": "now",
        "docstrings": [
          "`now()`\n\nReturns the time, in milliseconds, between UNIX epoch (January 1, 1970 00:00:00 UTC) and the current date time."
        ],
        "signature": "let now: unit => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "`equal(date1, date2)` checks if two dates represent the same point in time.\n\n## Examples\n```rescript\nDate.equal(Date.fromString(\"2023-01-01\"), Date.fromString(\"2023-01-01\")) == true\nDate.equal(Date.fromString(\"2023-01-01\"), Date.fromString(\"2023-01-02\")) == false\n```"
        ],
        "signature": "let equal: (t, t) => bool"
      },
      {
        "id": "Stdlib.Date.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "`compare(date1, date2)` compares two dates chronologically, returns an `Ordering.t` value.\n\n## Examples\n```rescript\nDate.compare(Date.fromString(\"2023-01-01\"), Date.fromString(\"2023-01-01\")) == Ordering.equal\nDate.compare(Date.fromString(\"2023-01-01\"), Date.fromString(\"2023-01-02\")) == Ordering.less\nDate.compare(Date.fromString(\"2023-01-02\"), Date.fromString(\"2023-01-01\")) == Ordering.greater\n```"
        ],
        "signature": "let compare: (t, t) => Ordering.t"
      },
      {
        "id": "Stdlib.Date.getTime",
        "kind": "value",
        "name": "getTime",
        "docstrings": [
          "`getTime(date)`\n\nReturns the time, in milliseconds, between UNIX epoch (January 1, 1970 00:00:00 UTC) and the current date time.\nInvalid dates will return NaN.\nDates before epoch will return negative numbers.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20\")->Date.getTime\n// 1676851200000\n```"
        ],
        "signature": "let getTime: t => msSinceEpoch"
      },
      {
        "id": "Stdlib.Date.getTimezoneOffset",
        "kind": "value",
        "name": "getTimezoneOffset",
        "docstrings": [
          "`getTimezoneOffset(date)`\n\nReturns the time in minutes between the UTC time and the locale time.\nThe timezone of the given date doesn't matter.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01\")->Date.getTimezoneOffset\n// -60 with local time zone = Europe/Berlin\n\nDate.fromString(\"2023-06-01\")->Date.getTimezoneOffset\n// -120 with local time zone = Europe/Berlin\n```"
        ],
        "signature": "let getTimezoneOffset: t => int"
      },
      {
        "id": "Stdlib.Date.getFullYear",
        "kind": "value",
        "name": "getFullYear",
        "docstrings": [
          "`getFullYear(date)`\n\nReturns the year of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20\")->Date.getFullYear\n// 2023\n```"
        ],
        "signature": "let getFullYear: t => int"
      },
      {
        "id": "Stdlib.Date.getMonth",
        "kind": "value",
        "name": "getMonth",
        "docstrings": [
          "`getMonth(date)`\n\nReturns the month (0-indexed) of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01\")->Date.getMonth\n// 0\n```"
        ],
        "signature": "let getMonth: t => int"
      },
      {
        "id": "Stdlib.Date.getDate",
        "kind": "value",
        "name": "getDate",
        "docstrings": [
          "`getDate(date)`\n\nReturns the date (day of month) of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getDate\n// 20\n```"
        ],
        "signature": "let getDate: t => int"
      },
      {
        "id": "Stdlib.Date.getHours",
        "kind": "value",
        "name": "getHours",
        "docstrings": [
          "`getHours(date)`\n\nReturns the hours of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getHours\n// 16\n```"
        ],
        "signature": "let getHours: t => int"
      },
      {
        "id": "Stdlib.Date.getMinutes",
        "kind": "value",
        "name": "getMinutes",
        "docstrings": [
          "`getMinutes(date)`\n\nReturns the minutes of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getMinutes\n// 40\n```"
        ],
        "signature": "let getMinutes: t => int"
      },
      {
        "id": "Stdlib.Date.getSeconds",
        "kind": "value",
        "name": "getSeconds",
        "docstrings": [
          "`getSeconds(date)`\n\nReturns the seconds of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getSeconds\n// 0\n```"
        ],
        "signature": "let getSeconds: t => int"
      },
      {
        "id": "Stdlib.Date.getMilliseconds",
        "kind": "value",
        "name": "getMilliseconds",
        "docstrings": [
          "`getMilliseconds(date)`\n\nReturns the milliseconds of a given date (according to local time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getMilliseconds\n// 0\n```"
        ],
        "signature": "let getMilliseconds: t => int"
      },
      {
        "id": "Stdlib.Date.getDay",
        "kind": "value",
        "name": "getDay",
        "docstrings": [
          "`getDay(date)`\n\nReturns the day of week of a given date (according to local time).\n0 = Sunday, 1 = Monday, ... 6 = Saturday\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.getDay\n// 1\n```"
        ],
        "signature": "let getDay: t => int"
      },
      {
        "id": "Stdlib.Date.setFullYear",
        "kind": "value",
        "name": "setFullYear",
        "docstrings": [
          "`setFullYear(date, year)`\n\nSets the year of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setFullYear(2024)\n```"
        ],
        "signature": "let setFullYear: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setFullYearM",
        "kind": "value",
        "name": "setFullYearM",
        "docstrings": [
          "`setFullYearM(date, ~year, ~month)`\n\nSets the year and month of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setFullYearM(~year=2024, ~month=0)\n```"
        ],
        "signature": "let setFullYearM: (t, ~year: int, ~month: int) => unit"
      },
      {
        "id": "Stdlib.Date.setFullYearMD",
        "kind": "value",
        "name": "setFullYearMD",
        "docstrings": [
          "`setFullYearMD(date, ~year, ~month, ~day)`\n\nSets the year, month and date (day of month) of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setFullYearMD(~year=2024, ~month=0, ~day=1)\n```"
        ],
        "signature": "let setFullYearMD: (t, ~year: int, ~month: int, ~day: int) => unit"
      },
      {
        "id": "Stdlib.Date.setMonth",
        "kind": "value",
        "name": "setMonth",
        "docstrings": [
          "`setMonth(date, month)`\n\nSets the month of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setMonth(0)\n```"
        ],
        "signature": "let setMonth: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setDate",
        "kind": "value",
        "name": "setDate",
        "docstrings": [
          "`setDate(date, day)`\n\nSets the date (day of month) of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setDate(1)\n```"
        ],
        "signature": "let setDate: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setHours",
        "kind": "value",
        "name": "setHours",
        "docstrings": [
          "`setHours(date, hours)`\n\nSets the hours of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setHours(0)\n```"
        ],
        "signature": "let setHours: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setHoursM",
        "kind": "value",
        "name": "setHoursM",
        "docstrings": [
          "`setHoursM(date, ~hours, ~minutes)`\n\nSets the hours and minutes of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setHoursM(~hours=0, ~minutes=0)\n```"
        ],
        "signature": "let setHoursM: (t, ~hours: int, ~minutes: int) => unit"
      },
      {
        "id": "Stdlib.Date.setHoursMS",
        "kind": "value",
        "name": "setHoursMS",
        "docstrings": [
          "`setHoursMS(date, ~hours, ~minutes, ~seconds)`\n\nSets the hours, minutes and seconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setHoursMS(~hours=0, ~minutes=0, ~seconds=0)\n```"
        ],
        "signature": "let setHoursMS: (t, ~hours: int, ~minutes: int, ~seconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setHoursMSMs",
        "kind": "value",
        "name": "setHoursMSMs",
        "docstrings": [
          "`setHoursMSMs(date, ~hours, ~minutes, ~seconds, ~milliseconds)`\n\nSets the hours, minutes, seconds and milliseconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setHoursMSMs(\n  ~hours=0,\n  ~minutes=0,\n  ~seconds=0,\n  ~milliseconds=0,\n)\n```"
        ],
        "signature": "let setHoursMSMs: (\n  t,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => unit"
      },
      {
        "id": "Stdlib.Date.setMinutes",
        "kind": "value",
        "name": "setMinutes",
        "docstrings": [
          "`setMinutes(date, minutes)`\n\nSets the minutes of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setMinutes(0)\n```"
        ],
        "signature": "let setMinutes: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setMinutesS",
        "kind": "value",
        "name": "setMinutesS",
        "docstrings": [
          "`setMinutesS(date, ~minutes, ~seconds)`\n\nSets the minutes and seconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setMinutesS(~minutes=0, ~seconds=0)\n```"
        ],
        "signature": "let setMinutesS: (t, ~minutes: int, ~seconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setMinutesSMs",
        "kind": "value",
        "name": "setMinutesSMs",
        "docstrings": [
          "`setMinutesSMs(date, ~minutes, ~seconds, ~milliseconds)`\n\nSets the minutes, seconds and milliseconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setMinutesSMs(\n  ~minutes=0,\n  ~seconds=0,\n  ~milliseconds=0,\n)\n```"
        ],
        "signature": "let setMinutesSMs: (\n  t,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => unit"
      },
      {
        "id": "Stdlib.Date.setSeconds",
        "kind": "value",
        "name": "setSeconds",
        "docstrings": [
          "`setSeconds(date, seconds)`\n\nSets the seconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setSeconds(0)\n```"
        ],
        "signature": "let setSeconds: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setSecondsMs",
        "kind": "value",
        "name": "setSecondsMs",
        "docstrings": [
          "`setSecondsMs(date, ~seconds, ~milliseconds)`\n\nSets the seconds and milliseconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setSecondsMs(~seconds=0, ~milliseconds=0)\n```"
        ],
        "signature": "let setSecondsMs: (t, ~seconds: int, ~milliseconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setMilliseconds",
        "kind": "value",
        "name": "setMilliseconds",
        "docstrings": [
          "`setMilliseconds(date, milliseconds)`\n\nSets the milliseconds of a date (according to local time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setMilliseconds(0)\n```"
        ],
        "signature": "let setMilliseconds: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.getUTCFullYear",
        "kind": "value",
        "name": "getUTCFullYear",
        "docstrings": [
          "`getUTCFullYear(date)`\n\nReturns the year of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCFullYear // 2022\n```"
        ],
        "signature": "let getUTCFullYear: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCMonth",
        "kind": "value",
        "name": "getUTCMonth",
        "docstrings": [
          "`getUTCMonth(date)`\n\nReturns the month of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCMonth // 11\n```"
        ],
        "signature": "let getUTCMonth: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCDate",
        "kind": "value",
        "name": "getUTCDate",
        "docstrings": [
          "`getUTCDate(date)`\n\nReturns the date (day of month) of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCDate // 31\n```"
        ],
        "signature": "let getUTCDate: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCHours",
        "kind": "value",
        "name": "getUTCHours",
        "docstrings": [
          "`getUTCHours(date)`\n\nReturns the hours of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCHours // 23\n```"
        ],
        "signature": "let getUTCHours: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCMinutes",
        "kind": "value",
        "name": "getUTCMinutes",
        "docstrings": [
          "`getUTCMinutes(date)`\n\nReturns the minutes of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCMinutes // 0\n```"
        ],
        "signature": "let getUTCMinutes: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCSeconds",
        "kind": "value",
        "name": "getUTCSeconds",
        "docstrings": [
          "`getUTCSeconds(date)`\n\nReturns the seconds of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCSeconds // 0\n```"
        ],
        "signature": "let getUTCSeconds: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCMilliseconds",
        "kind": "value",
        "name": "getUTCMilliseconds",
        "docstrings": [
          "`getUTCMilliseconds(date)`\n\nReturns the milliseconds of a given date (according to UTC time).\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCMilliseconds // 0\n```"
        ],
        "signature": "let getUTCMilliseconds: t => int"
      },
      {
        "id": "Stdlib.Date.getUTCDay",
        "kind": "value",
        "name": "getUTCDay",
        "docstrings": [
          "`getUTCDay(date)`\n\nReturns the day (day of week) of a given date (according to UTC time).\n0 = Sunday, 1 = Monday, ... 6 = Saturday\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.getUTCDay // 6\n```"
        ],
        "signature": "let getUTCDay: t => int"
      },
      {
        "id": "Stdlib.Date.setUTCFullYear",
        "kind": "value",
        "name": "setUTCFullYear",
        "docstrings": [
          "`setUTCFullYear(date, year)`\n\nSets the year of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCFullYear(2024)\n```"
        ],
        "signature": "let setUTCFullYear: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCFullYearM",
        "kind": "value",
        "name": "setUTCFullYearM",
        "docstrings": [
          "`setUTCFullYearM(date, ~year, ~month)`\n\nSets the year and month of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCFullYearM(~year=2024, ~month=0)\n```"
        ],
        "signature": "let setUTCFullYearM: (t, ~year: int, ~month: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCFullYearMD",
        "kind": "value",
        "name": "setUTCFullYearMD",
        "docstrings": [
          "`setUTCFullYearMD(date, ~year, ~month, ~day)`\n\nSets the year, month and date (day of month) of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCFullYearMD(~year=2024, ~month=0, ~day=1)\n```"
        ],
        "signature": "let setUTCFullYearMD: (t, ~year: int, ~month: int, ~day: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCMonth",
        "kind": "value",
        "name": "setUTCMonth",
        "docstrings": [
          "`setUTCMonth(date, month)`\n\nSets the month of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCMonth(0)\n```"
        ],
        "signature": "let setUTCMonth: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCDate",
        "kind": "value",
        "name": "setUTCDate",
        "docstrings": [
          "`setDate(date, day)`\n\nSets the date (day of month) of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCDate(1)\n```"
        ],
        "signature": "let setUTCDate: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCHours",
        "kind": "value",
        "name": "setUTCHours",
        "docstrings": [
          "`setUTCHours(date, hours)`\n\nSets the hours of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCHours(0)\n```"
        ],
        "signature": "let setUTCHours: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCHoursM",
        "kind": "value",
        "name": "setUTCHoursM",
        "docstrings": [
          "`setHoursM(date, ~hours, ~minutes)`\n\nSets the hours and minutes of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCHoursM(~hours=0, ~minutes=0)\n```"
        ],
        "signature": "let setUTCHoursM: (t, ~hours: int, ~minutes: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCHoursMS",
        "kind": "value",
        "name": "setUTCHoursMS",
        "docstrings": [
          "`setUTCHoursMS(date, ~hours, ~minutes, ~seconds)`\n\nSets the hours, minutes and seconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCHoursMS(~hours=0, ~minutes=0, ~seconds=0)\n```"
        ],
        "signature": "let setUTCHoursMS: (t, ~hours: int, ~minutes: int, ~seconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCHoursMSMs",
        "kind": "value",
        "name": "setUTCHoursMSMs",
        "docstrings": [
          "`setUTCHoursMSMs(date, ~hours, ~minutes, ~seconds, ~milliseconds)`\n\nSets the hours, minutes, seconds and milliseconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCHoursMSMs(\n  ~hours=0,\n  ~minutes=0,\n  ~seconds=0,\n  ~milliseconds=0,\n)\n```"
        ],
        "signature": "let setUTCHoursMSMs: (\n  t,\n  ~hours: int,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCMinutes",
        "kind": "value",
        "name": "setUTCMinutes",
        "docstrings": [
          "`setUTCMinutes(date, minutes)`\n\nSets the minutes of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCMinutes(0)\n```"
        ],
        "signature": "let setUTCMinutes: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCMinutesS",
        "kind": "value",
        "name": "setUTCMinutesS",
        "docstrings": [
          "`setUTCMinutesS(date, ~minutes, ~seconds)`\n\nSets the minutes and seconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCMinutesS(~minutes=0, ~seconds=0)\n```"
        ],
        "signature": "let setUTCMinutesS: (t, ~minutes: int, ~seconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCMinutesSMs",
        "kind": "value",
        "name": "setUTCMinutesSMs",
        "docstrings": [
          "`setUTCMinutesSMs(date, ~minutes, ~seconds, ~milliseconds)`\n\nSets the minutes, seconds and milliseconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCMinutesSMs(\n  ~minutes=0,\n  ~seconds=0,\n  ~milliseconds=0,\n)\n```"
        ],
        "signature": "let setUTCMinutesSMs: (\n  t,\n  ~minutes: int,\n  ~seconds: int,\n  ~milliseconds: int,\n) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCSeconds",
        "kind": "value",
        "name": "setUTCSeconds",
        "docstrings": [
          "`setUTCSeconds(date, seconds)`\n\nSets the seconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCSeconds(0)\n```"
        ],
        "signature": "let setUTCSeconds: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCSecondsMs",
        "kind": "value",
        "name": "setUTCSecondsMs",
        "docstrings": [
          "`setUTCSecondsMs(date, ~seconds, ~milliseconds)`\n\nSets the seconds and milliseconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCSecondsMs(~seconds=0, ~milliseconds=0)\n```"
        ],
        "signature": "let setUTCSecondsMs: (t, ~seconds: int, ~milliseconds: int) => unit"
      },
      {
        "id": "Stdlib.Date.setUTCMilliseconds",
        "kind": "value",
        "name": "setUTCMilliseconds",
        "docstrings": [
          "`setUTCMilliseconds(date, milliseconds)`\n\nSets the milliseconds of a date (according to UTC time).\nBeware this will *mutate* the date.\n\n## Examples\n```rescript\nDate.fromString(\"2023-02-20T16:40:00.00\")->Date.setUTCMilliseconds(0)\n```"
        ],
        "signature": "let setUTCMilliseconds: (t, int) => unit"
      },
      {
        "id": "Stdlib.Date.toDateString",
        "kind": "value",
        "name": "toDateString",
        "docstrings": [
          "`toDateString(date)`\n\nConverts a JavaScript date to a standard date string. The date will be mapped to the current time zone.\nIf you want to convert it to a localized string, use `Date.toLocaleDateString` instead.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.toDateString->Console.log\n// Sun Jan 01 2023\n\nDate.fromString(\"2023-01-01T00:00:00.00+08:00\")->Date.toDateString->Console.log\n// Sat Dec 31 2022\n```"
        ],
        "signature": "let toDateString: t => string"
      },
      {
        "id": "Stdlib.Date.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "`toString(date)`\n\nConverts a JavaScript date to a standard date time string. The date will be mapped to the current time zone.\nIf you want to convert it to a localized string, use `Date.toLocaleString` instead.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.toString->Console.log\n// Sun Jan 01 2023 00:00:00 GMT+0100 (Central European Standard Time)\n\nDate.fromString(\"2023-06-01T00:00:00.00+01:00\")->Date.toString->Console.log\n// Thu Jun 01 2023 01:00:00 GMT+0200 (Central European Summer Time)\n```"
        ],
        "signature": "let toString: t => string"
      },
      {
        "id": "Stdlib.Date.toTimeString",
        "kind": "value",
        "name": "toTimeString",
        "docstrings": [
          "`toTimeString(date)`\n\nConverts a JavaScript date to a standard time string. The date will be mapped to the current time zone.\nIf you want to convert it to a localized string, use `Date.toLocaleStimeString` instead.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+01:00\")->Date.toTimeString->Console.log\n// 00:00:00 GMT+0100 (Central European Standard Time)\n\nDate.fromString(\"2023-01-01T00:00:00.00+08:00\")->Date.toTimeString->Console.log\n// 17:00:00 GMT+0100 (Central European Standard Time)\n```"
        ],
        "signature": "let toTimeString: t => string"
      },
      {
        "id": "Stdlib.Date.toLocaleDateString",
        "kind": "value",
        "name": "toLocaleDateString",
        "docstrings": [
          "`toLocaleDateString(date)`\n\nConverts a JavaScript date to a localized date string. It will use the current locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleDateString->Console.log\n// 2/19/2023\n```"
        ],
        "signature": "let toLocaleDateString: t => string"
      },
      {
        "id": "Stdlib.Date.toLocaleDateStringWithLocale",
        "kind": "value",
        "name": "toLocaleDateStringWithLocale",
        "docstrings": [
          "`toLocaleDateStringWithLocale(date, locale)`\n\nConverts a JavaScript date to a localized date string. It will use the specified locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleDateStringWithLocale(\"en-US\")->Console.log\n// 2/19/2023\n```"
        ],
        "signature": "let toLocaleDateStringWithLocale: (t, string) => string"
      },
      {
        "id": "Stdlib.Date.toLocaleDateStringWithLocaleAndOptions",
        "kind": "value",
        "name": "toLocaleDateStringWithLocaleAndOptions",
        "docstrings": [
          "`toLocaleDateStringWithLocaleAndOptions(date, locale, options)`\n\nConverts a JavaScript date to a localized date string. It will use the specified locale and formatting options.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleDateStringWithLocaleAndOptions(\"en-US\", {dateStyle: #long})->Console.log\n// February 19, 2023\n\nDate.make()\n->Date.toLocaleDateStringWithLocaleAndOptions(\"de\", {hour: #\"2-digit\", minute: #\"2-digit\"})\n->Console.log\n// 19.2.2023, 15:40\n\nDate.make()->Date.toLocaleDateStringWithLocaleAndOptions(\"de\", {year: #numeric})->Console.log\n// 2023\n```"
        ],
        "signature": "let toLocaleDateStringWithLocaleAndOptions: (t, string, localeOptions) => string"
      },
      {
        "id": "Stdlib.Date.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [
          "`toLocaleString(date)`\n\nConverts a JavaScript date to a localized date-time string. It will use the current locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleString->Console.log\n// 2/19/2023, 3:40:00 PM\n```"
        ],
        "signature": "let toLocaleString: t => string"
      },
      {
        "id": "Stdlib.Date.toLocaleStringWithLocale",
        "kind": "value",
        "name": "toLocaleStringWithLocale",
        "docstrings": [
          "`toLocaleStringWithLocale(date, locale)`\n\nConverts a JavaScript date to a localized date-time string. It will use the specified locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleStringWithLocale(\"en-US\")->Console.log\n// 2/19/2023, 3:40:00 PM\n```"
        ],
        "signature": "let toLocaleStringWithLocale: (t, string) => string"
      },
      {
        "id": "Stdlib.Date.toLocaleStringWithLocaleAndOptions",
        "kind": "value",
        "name": "toLocaleStringWithLocaleAndOptions",
        "docstrings": [
          "`toLocaleStringWithLocaleAndOptions(date, locale, options)`\n\nConverts a JavaScript date to a localized date-time string. It will use the specified locale and formatting options.\n\n## Examples\n```rescript\nDate.make()\n->Date.toLocaleStringWithLocaleAndOptions(\"en\", {dateStyle: #short, timeStyle: #short})\n->Console.log\n// 2/19/23, 3:40 PM\n\nDate.make()\n->Date.toLocaleStringWithLocaleAndOptions(\n  \"en\",\n  {\n    era: #long,\n    year: #numeric,\n    month: #\"2-digit\",\n    day: #\"2-digit\",\n    hour: #numeric,\n    timeZoneName: #short,\n  },\n)\n->Console.log\n// 02/19/2023 Anno Domini, 3 PM GMT+1\n```"
        ],
        "signature": "let toLocaleStringWithLocaleAndOptions: (t, string, localeOptions) => string"
      },
      {
        "id": "Stdlib.Date.toLocaleTimeString",
        "kind": "value",
        "name": "toLocaleTimeString",
        "docstrings": [
          "`toLocaleTimeString(date)`\n\nConverts a JavaScript date to a localized time string. It will use the current locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleTimeString->Console.log\n// 3:40:00 PM\n```"
        ],
        "signature": "let toLocaleTimeString: t => string"
      },
      {
        "id": "Stdlib.Date.toLocaleTimeStringWithLocale",
        "kind": "value",
        "name": "toLocaleTimeStringWithLocale",
        "docstrings": [
          "`toLocaleTimeStringWithLocale(date, locale)`\n\nConverts a JavaScript date to a localized time string. It will use the specified locale.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleTimeStringWithLocale(\"en-US\")->Console.log\n// 3:40:00 PM\n```"
        ],
        "signature": "let toLocaleTimeStringWithLocale: (t, string) => string"
      },
      {
        "id": "Stdlib.Date.toLocaleTimeStringWithLocaleAndOptions",
        "kind": "value",
        "name": "toLocaleTimeStringWithLocaleAndOptions",
        "docstrings": [
          "`toLocaleTimeStringWithLocaleAndOptions(date, locale, options)`\n\nConverts a JavaScript date to a localized time string. It will use the specified locale and formatting options.\n\n## Examples\n```rescript\nDate.make()->Date.toLocaleTimeStringWithLocaleAndOptions(\"en-US\", {timeStyle: #long})->Console.log\n// 3:40:00 PM GMT+1\n\nDate.make()\n->Date.toLocaleTimeStringWithLocaleAndOptions(\"de\", {hour: #\"2-digit\", minute: #\"2-digit\"})\n->Console.log\n// 15:40\n```"
        ],
        "signature": "let toLocaleTimeStringWithLocaleAndOptions: (t, string, localeOptions) => string"
      },
      {
        "id": "Stdlib.Date.toISOString",
        "kind": "value",
        "name": "toISOString",
        "docstrings": [
          "`toISOString(date)`\n\nConverts a JavaScript date to a ISO 8601 string (YYYY-MM-DDTHH:mm:ss.sssZ). The date will be mapped to the UTC time.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+00:00\")->Date.toISOString->Console.log\n// 2023-01-01T00:00:00.000Z\n\nDate.fromString(\"2023-01-01T00:00:00.00+08:00\")->Date.toISOString->Console.log\n// 2022-12-31T16:00:00.000Z\n```"
        ],
        "signature": "let toISOString: t => string"
      },
      {
        "id": "Stdlib.Date.toUTCString",
        "kind": "value",
        "name": "toUTCString",
        "docstrings": [
          "`toUTCString(date)`\n\nConverts a JavaScript date to date time string. The date will be mapped to the UTC time.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+00:00\")->Date.toUTCString->Console.log\n// Sun, 01 Jan 2023 00:00:00 GMT\n\nDate.fromString(\"2023-01-01T00:00:00.00+08:00\")->Date.toUTCString->Console.log\n// Sat, 31 Dec 2022 16:00:00 GMT\n```"
        ],
        "signature": "let toUTCString: t => string"
      },
      {
        "id": "Stdlib.Date.toJSON",
        "kind": "value",
        "name": "toJSON",
        "docstrings": [
          "`toJSON(date)`\n\nConverts a JavaScript date to a string.\nIf the date is valid, the function will return the same result as `Date.toISOString`.\nInvalid dates will return `None`.\n\n## Examples\n```rescript\nDate.fromString(\"2023-01-01T00:00:00.00+00:00\")->Date.toJSON\n// Some(\"2023-01-01T00:00:00.000Z\")\n\nDate.fromString(\"\")->Date.toJSON\n// None\n```"
        ],
        "signature": "let toJSON: t => option<string>"
      },
      {
        "id": "Stdlib.Date.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(date)` ignores the provided date and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/dataview": {
    "id": "Stdlib.DataView",
    "name": "DataView",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.DataView.t",
        "kind": "type",
        "name": "t",
        "docstrings": [],
        "signature": "type t"
      },
      {
        "id": "Stdlib.DataView.fromBuffer",
        "kind": "value",
        "name": "fromBuffer",
        "docstrings": [],
        "signature": "let fromBuffer: ArrayBuffer.t => t"
      },
      {
        "id": "Stdlib.DataView.fromBufferToEnd",
        "kind": "value",
        "name": "fromBufferToEnd",
        "docstrings": [],
        "signature": "let fromBufferToEnd: (ArrayBuffer.t, ~byteOffset: int) => t"
      },
      {
        "id": "Stdlib.DataView.fromBufferWithRange",
        "kind": "value",
        "name": "fromBufferWithRange",
        "docstrings": [],
        "signature": "let fromBufferWithRange: (ArrayBuffer.t, ~byteOffset: int, ~length: int) => t"
      },
      {
        "id": "Stdlib.DataView.buffer",
        "kind": "value",
        "name": "buffer",
        "docstrings": [],
        "signature": "let buffer: t => ArrayBuffer.t"
      },
      {
        "id": "Stdlib.DataView.byteLength",
        "kind": "value",
        "name": "byteLength",
        "docstrings": [],
        "signature": "let byteLength: t => int"
      },
      {
        "id": "Stdlib.DataView.byteOffset",
        "kind": "value",
        "name": "byteOffset",
        "docstrings": [],
        "signature": "let byteOffset: t => int"
      },
      {
        "id": "Stdlib.DataView.getInt8",
        "kind": "value",
        "name": "getInt8",
        "docstrings": [],
        "signature": "let getInt8: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getUint8",
        "kind": "value",
        "name": "getUint8",
        "docstrings": [],
        "signature": "let getUint8: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getInt16",
        "kind": "value",
        "name": "getInt16",
        "docstrings": [],
        "signature": "let getInt16: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getUint16",
        "kind": "value",
        "name": "getUint16",
        "docstrings": [],
        "signature": "let getUint16: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getInt32",
        "kind": "value",
        "name": "getInt32",
        "docstrings": [],
        "signature": "let getInt32: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getUint32",
        "kind": "value",
        "name": "getUint32",
        "docstrings": [],
        "signature": "let getUint32: (t, int) => int"
      },
      {
        "id": "Stdlib.DataView.getFloat32",
        "kind": "value",
        "name": "getFloat32",
        "docstrings": [],
        "signature": "let getFloat32: (t, int) => float"
      },
      {
        "id": "Stdlib.DataView.getFloat64",
        "kind": "value",
        "name": "getFloat64",
        "docstrings": [],
        "signature": "let getFloat64: (t, int) => float"
      },
      {
        "id": "Stdlib.DataView.getBigInt64",
        "kind": "value",
        "name": "getBigInt64",
        "docstrings": [],
        "signature": "let getBigInt64: (t, int) => bigint"
      },
      {
        "id": "Stdlib.DataView.getBigUint64",
        "kind": "value",
        "name": "getBigUint64",
        "docstrings": [],
        "signature": "let getBigUint64: (t, int) => bigint"
      },
      {
        "id": "Stdlib.DataView.setInt8",
        "kind": "value",
        "name": "setInt8",
        "docstrings": [],
        "signature": "let setInt8: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setUint8",
        "kind": "value",
        "name": "setUint8",
        "docstrings": [],
        "signature": "let setUint8: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setInt16",
        "kind": "value",
        "name": "setInt16",
        "docstrings": [],
        "signature": "let setInt16: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setUint16",
        "kind": "value",
        "name": "setUint16",
        "docstrings": [],
        "signature": "let setUint16: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setInt32",
        "kind": "value",
        "name": "setInt32",
        "docstrings": [],
        "signature": "let setInt32: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setUint32",
        "kind": "value",
        "name": "setUint32",
        "docstrings": [],
        "signature": "let setUint32: (t, int, int) => unit"
      },
      {
        "id": "Stdlib.DataView.setFloat32",
        "kind": "value",
        "name": "setFloat32",
        "docstrings": [],
        "signature": "let setFloat32: (t, int, float) => unit"
      },
      {
        "id": "Stdlib.DataView.setFloat64",
        "kind": "value",
        "name": "setFloat64",
        "docstrings": [],
        "signature": "let setFloat64: (t, int, float) => unit"
      },
      {
        "id": "Stdlib.DataView.setBigInt64",
        "kind": "value",
        "name": "setBigInt64",
        "docstrings": [],
        "signature": "let setBigInt64: (t, int, bigint) => unit"
      },
      {
        "id": "Stdlib.DataView.setBigUint64",
        "kind": "value",
        "name": "setBigUint64",
        "docstrings": [],
        "signature": "let setBigUint64: (t, int, bigint) => unit"
      },
      {
        "id": "Stdlib.DataView.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(dataView)` ignores the provided dataView and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: t => unit"
      }
    ]
  },
  "stdlib/console": {
    "id": "Stdlib.Console",
    "name": "Console",
    "docstrings": [
      "Functions for interacting with JavaScript console.\n\nSee: [`console`](https://developer.mozilla.org/en-US/docs/Web/API/Console)."
    ],
    "items": [
      {
        "id": "Stdlib.Console.assert_",
        "kind": "value",
        "name": "assert_",
        "docstrings": [
          "`assert_(assertion, value)` print a message to console if `assertion` evaluates `false`. Does nothing if it's `true`.\n\nSee [`console.assert`](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)\non MDN.\n\n## Examples\n\n```rescript\nConsole.assert_(false, \"Hello World!\")\nConsole.assert_(42 === 42, \"The answer\")\n```"
        ],
        "signature": "let assert_: (bool, 'a) => unit"
      },
      {
        "id": "Stdlib.Console.assert2",
        "kind": "value",
        "name": "assert2",
        "docstrings": [
          "`assert2(v1, v2)`. Like `assert_`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.assert2(false, \"Hello\", \"World\")\nConsole.assert2(42 === 42, [1, 2, 3], '4')\n```"
        ],
        "signature": "let assert2: (bool, 'a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.assert3",
        "kind": "value",
        "name": "assert3",
        "docstrings": [
          "`assert3(v1, v2, v3)`. Like `assert_`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.assert3(false, \"Hello\", \"World\", \"ReScript\")\nConsole.assert3(42 === 42, \"One\", 2, #3)\n```"
        ],
        "signature": "let assert3: (bool, 'a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.assert4",
        "kind": "value",
        "name": "assert4",
        "docstrings": [
          "`assert4(v1, v2, v3, v4)`. Like `assert_`, but with four arguments.\n\n## Examples\n\n```rescript\nlet value = 42\nConsole.assert4(false, \"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.assert4(value === 42, [1, 2], (3, 4), [#5, #6], #polyvar)\n```"
        ],
        "signature": "let assert4: (bool, 'a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.assert5",
        "kind": "value",
        "name": "assert5",
        "docstrings": [
          "`assert5(v1, v2, v3, v4, v5)`. Like `assert_`, but with five arguments.\n\n## Examples\n\n```rescript\nlet value = 42\nConsole.assert5(false, \"Hello\", \"World\", \"JS\", '!', '!')\nConsole.assert5(value === 42, [1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let assert5: (bool, 'a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.assert6",
        "kind": "value",
        "name": "assert6",
        "docstrings": [
          "`assert6(v1, v2)`. Like `assert_`, but with six arguments.\n\n## Examples\n\n```rescript\nlet value = 42\nConsole.assert6(false, \"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.assert6(value === 42, [1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let assert6: (bool, 'a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.assertMany",
        "kind": "value",
        "name": "assertMany",
        "docstrings": [
          "`assertMany(assertion, arr)`. Like `assert_`, but variadic.\n\n## Examples\n\n```rescript\nlet value = 42\nConsole.assertMany(false, [\"Hello\", \"World\"])\nConsole.assertMany(value === 42, [1, 2, 3])\n```"
        ],
        "signature": "let assertMany: (bool, array<'a>) => unit"
      },
      {
        "id": "Stdlib.Console.clear",
        "kind": "value",
        "name": "clear",
        "docstrings": [
          "`clear()` clears the console, if allowed.\n\nSee [`console.clear`](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)\non MDN.\n\n## Examples\n\n```rescript\nConsole.clear()\n```"
        ],
        "signature": "let clear: unit => unit"
      },
      {
        "id": "Stdlib.Console.count",
        "kind": "value",
        "name": "count",
        "docstrings": [
          "`count(label)` prints to the console the number of times it's been called with the given label.\n\nSee [`console.count`](https://developer.mozilla.org/en-US/docs/Web/API/console/count)\non MDN.\n\n## Examples\n\n```rescript\nConsole.count(\"rescript\")\n```"
        ],
        "signature": "let count: string => unit"
      },
      {
        "id": "Stdlib.Console.countReset",
        "kind": "value",
        "name": "countReset",
        "docstrings": [
          "`countReset(label)` resets the count for the given label to 0.\n\nSee [`console.countReset`](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)\non MDN.\n\n## Examples\n\n```rescript\nConsole.countReset(\"rescript\")\n```"
        ],
        "signature": "let countReset: string => unit"
      },
      {
        "id": "Stdlib.Console.debug",
        "kind": "value",
        "name": "debug",
        "docstrings": [
          "`debug(value)` print a debug message to console.\n\nSee [`console.debug`](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)\non MDN.\n\n## Examples\n\n```rescript\nConsole.debug(\"Hello\")\nlet obj = {\"name\": \"ReScript\", \"version\": 10}\nConsole.debug(obj)\n```"
        ],
        "signature": "let debug: 'a => unit"
      },
      {
        "id": "Stdlib.Console.debug2",
        "kind": "value",
        "name": "debug2",
        "docstrings": [
          "`debug2(v1, v2)`. Like `debug`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.debug2(\"Hello\", \"World\")\nConsole.debug2([1, 2, 3], '4')\n```"
        ],
        "signature": "let debug2: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.debug3",
        "kind": "value",
        "name": "debug3",
        "docstrings": [
          "`debug3(v1, v2, v3)`. Like `debug`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.debug3(\"Hello\", \"World\", \"ReScript\")\nConsole.debug3(\"One\", 2, #3)\n```"
        ],
        "signature": "let debug3: ('a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.debug4",
        "kind": "value",
        "name": "debug4",
        "docstrings": [
          "`debug4(v1, v2, v3, v4)`. Like `debug`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.debug4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.debug4([1, 2], (3, 4), [#5, #6], #polyvar)\n```"
        ],
        "signature": "let debug4: ('a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.debug5",
        "kind": "value",
        "name": "debug5",
        "docstrings": [
          "`debug5(v1, v2, v3, v4, v5)`. Like `debug`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.debug5(\"Hello\", \"World\", \"JS\", '!', '!')\nConsole.debug5([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let debug5: ('a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.debug6",
        "kind": "value",
        "name": "debug6",
        "docstrings": [
          "`debug6(v1, v2, v3, v4, v5, v6)`. Like `debug`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.debug6(\"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.debug6([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let debug6: ('a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.debugMany",
        "kind": "value",
        "name": "debugMany",
        "docstrings": [
          "`debugMany(arr)`. Like `debug`, but variadic.\n\n## Examples\n\n```rescript\nConsole.debugMany([\"Hello\", \"World\"])\nConsole.debugMany([1, 2, 3])\n```"
        ],
        "signature": "let debugMany: array<'a> => unit"
      },
      {
        "id": "Stdlib.Console.dirOptions",
        "kind": "type",
        "name": "dirOptions",
        "docstrings": [],
        "signature": "type dirOptions = {\n  colors?: bool,\n  depth?: Nullable.t<int>,\n  showHidden?: bool,\n}"
      },
      {
        "id": "Stdlib.Console.dir",
        "kind": "value",
        "name": "dir",
        "docstrings": [
          "`dir(object, options)` displays an interactive view of the object in the console.\n\nSee [`console.dir`](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)\non MDN.\n\n## Examples\n\n```rescript\nConsole.dir({\"language\": \"rescript\", \"version\": \"10.1.2\"})\nConsole.dir(\n  {\"language\": \"rescript\", \"version\": {\"major\": \"10\", \"minor\": \"1\", \"patch\": \"2\"}},\n  ~options={depth: null},\n)\n```"
        ],
        "signature": "let dir: ('a, ~options: dirOptions=?) => unit"
      },
      {
        "id": "Stdlib.Console.dirxml",
        "kind": "value",
        "name": "dirxml",
        "docstrings": [
          "`dirxml(object)` displays an interactive tree view of an XML/HTML element in the console.\n\nSee [`console.dirxml`](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)\non MDN."
        ],
        "signature": "let dirxml: 'a => unit"
      },
      {
        "id": "Stdlib.Console.error",
        "kind": "value",
        "name": "error",
        "docstrings": [
          "`error(value)` prints an error message to console.\n\nSee [`console.error`](https://developer.mozilla.org/en-US/docs/Web/API/console/error)\non MDN.\n\n## Examples\n\n```rescript\nConsole.error(\"error message\")\nConsole.error((\"error\", \"invalid value\"))\n```"
        ],
        "signature": "let error: 'a => unit"
      },
      {
        "id": "Stdlib.Console.error2",
        "kind": "value",
        "name": "error2",
        "docstrings": [
          "`error(v1, v2)`. Like `error`, but two arguments.\n\n## Examples\n\n```rescript\nConsole.error2(\"Error\", \"here\")\nConsole.error2((\"log\", \"error\"), \"message\")\n```"
        ],
        "signature": "let error2: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.error3",
        "kind": "value",
        "name": "error3",
        "docstrings": [
          "`error3(v1, v2, v3)`. Like `error`, but three arguments.\n\n## Examples\n\n```rescript\nConsole.error3(\"Hello\", \"World\", \"!!!\")\nConsole.error3(#first, #second, #third)\n```"
        ],
        "signature": "let error3: ('a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.error4",
        "kind": "value",
        "name": "error4",
        "docstrings": [
          "`error4(v1, v2, v3, v4)`. Like `error`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.error4(\"Hello\", \"World\", \"ReScript\", '!')\nConsole.error4(#first, #second, #third, \"fourth\")\n```"
        ],
        "signature": "let error4: ('a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.error5",
        "kind": "value",
        "name": "error5",
        "docstrings": [
          "`error5(v1, v2, v3, v4, v5)`. Like `error`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.error5('e', 'r', 'r', 'o', 'r')\nConsole.error5(1, #second, #third, \"fourth\", 'c')\n```"
        ],
        "signature": "let error5: ('a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.error6",
        "kind": "value",
        "name": "error6",
        "docstrings": [
          "`error6(v1, v2, v3, v4, v5, v6)`. Like `error`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.error6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.error6([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let error6: ('a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.group",
        "kind": "value",
        "name": "group",
        "docstrings": [
          "`group(label)` creates a new \"group\" level with the given label.\n\nSee [`console.group`](https://developer.mozilla.org/en-US/docs/Web/API/console/group)\non MDN.\n\n## Example\n\n```rescript\nConsole.group(\"first group\")\nConsole.group(\"second group\")\nConsole.log(\"a message on the second level\")\nConsole.groupEnd()\nConsole.log(\"a message message on the first level\")\nConsole.groupEnd()\n```"
        ],
        "signature": "let group: string => unit"
      },
      {
        "id": "Stdlib.Console.groupCollapsed",
        "kind": "value",
        "name": "groupCollapsed",
        "docstrings": [
          "`groupCollapsed(label)`. Like `group` but collapses the group initially.\n\nSee [`console.groupCollapsed`](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)\non MDN."
        ],
        "signature": "let groupCollapsed: string => unit"
      },
      {
        "id": "Stdlib.Console.groupEnd",
        "kind": "value",
        "name": "groupEnd",
        "docstrings": [
          "`groupEnd()` ends the current group.\n\nSee [`console.groupEnd`](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)\non MDN."
        ],
        "signature": "let groupEnd: unit => unit"
      },
      {
        "id": "Stdlib.Console.errorMany",
        "kind": "value",
        "name": "errorMany",
        "docstrings": [
          "`errorMany(arr)`. Like `error`, but variadic.\n\n## Examples\n\n```rescript\nConsole.errorMany([\"Hello\", \"World\"])\nConsole.errorMany([1, 2, 3])\n```"
        ],
        "signature": "let errorMany: array<'a> => unit"
      },
      {
        "id": "Stdlib.Console.info",
        "kind": "value",
        "name": "info",
        "docstrings": [
          "`info(value)` print an informational message to console.\n\nSee [`console.info`](https://developer.mozilla.org/en-US/docs/Web/API/console/info)\non MDN.\n\n## Examples\n\n```rescript\nConsole.info(\"Information\")\nConsole.info((\"Hello\", \"JS\"))\n```"
        ],
        "signature": "let info: 'a => unit"
      },
      {
        "id": "Stdlib.Console.info2",
        "kind": "value",
        "name": "info2",
        "docstrings": [
          "`info2(v1, v2)`. Like `info`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.info2(\"Info\", \"failed to download\")\nConsole.info2(#info, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let info2: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.info3",
        "kind": "value",
        "name": "info3",
        "docstrings": [
          "`info3(v1, v2, v3)`. Like `info`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.info3(\"Hello\", \"World\", \"ReScript\")\nConsole.info3([1, 2, 3], #4, #5)\n```"
        ],
        "signature": "let info3: ('a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.info4",
        "kind": "value",
        "name": "info4",
        "docstrings": [
          "`info4(v1, v2, v3, v4)`. Like `info`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.info4(\"Hello\", \"World\", \"ReScript\", '!')\nConsole.info4([1, 2, 3], #4, #5, #lastinfo)\n```"
        ],
        "signature": "let info4: ('a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.info5",
        "kind": "value",
        "name": "info5",
        "docstrings": [
          "`info5(v1, v2, v3, v4, v5)`. Like `info`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.info5(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\")\nConsole.info5([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let info5: ('a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.info6",
        "kind": "value",
        "name": "info6",
        "docstrings": [
          "`info6(v1, v2, v3, v4, v5, v6)`. Like `info`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.info6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.info6([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let info6: ('a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.infoMany",
        "kind": "value",
        "name": "infoMany",
        "docstrings": [
          "`infoMany(arr)`. Like `info`, but variadic.\n\n## Examples\n\n```rescript\nConsole.infoMany([\"Hello\", \"World\"])\nConsole.infoMany([1, 2, 3])\n```"
        ],
        "signature": "let infoMany: array<'a> => unit"
      },
      {
        "id": "Stdlib.Console.log",
        "kind": "value",
        "name": "log",
        "docstrings": [
          "`log(value)` print a message to console.\n\nSee [`console.log`](https://developer.mozilla.org/en-US/docs/Web/API/console/log)\non MDN.\n\n## Examples\n\n```rescript\nConsole.log(\"Hello\")\nlet obj = {\"name\": \"ReScript\", \"version\": 10}\nConsole.log(obj)\n```"
        ],
        "signature": "let log: 'a => unit"
      },
      {
        "id": "Stdlib.Console.log2",
        "kind": "value",
        "name": "log2",
        "docstrings": [
          "`log2(v1, v2)`. Like `log`, but with two arguments.\n\n## Examples\n\n```rescript\nConsole.log2(\"Hello\", \"World\")\nConsole.log2([1, 2, 3], '4')\n```"
        ],
        "signature": "let log2: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.log3",
        "kind": "value",
        "name": "log3",
        "docstrings": [
          "`log3(v1, v2, v3)`. Like `log`, but with three arguments.\n\n## Examples\n\n```rescript\nConsole.log3(\"Hello\", \"World\", \"ReScript\")\nConsole.log3(\"One\", 2, #3)\n```"
        ],
        "signature": "let log3: ('a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.log4",
        "kind": "value",
        "name": "log4",
        "docstrings": [
          "`log4(v1, v2, v3, v4)`. Like `log`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.log4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.log4([1, 2], (3, 4), [#5, #6], #polyvar)\n```"
        ],
        "signature": "let log4: ('a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.log5",
        "kind": "value",
        "name": "log5",
        "docstrings": [
          "`log5(v1, v2, v3, v4, v5)`. Like `log`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.log5(\"Hello\", \"World\", \"JS\", '!', '!')\nConsole.log5([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let log5: ('a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.log6",
        "kind": "value",
        "name": "log6",
        "docstrings": [
          "`log6(v1, v2, v3, v4, v5, v6)`. Like `log`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.log6(\"Hello\", \"World\", \"JS\", '!', '!', '?')\nConsole.log6([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let log6: ('a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.logMany",
        "kind": "value",
        "name": "logMany",
        "docstrings": [
          "`logMany(arr)`. Like `log`, but variadic.\n\n## Examples\n\n```rescript\nConsole.logMany([\"Hello\", \"World\"])\nConsole.logMany([1, 2, 3])\n```"
        ],
        "signature": "let logMany: array<'a> => unit"
      },
      {
        "id": "Stdlib.Console.table",
        "kind": "value",
        "name": "table",
        "docstrings": [
          "`table(object)` displays an tabular view of the object in the console.\n\nSee [`console.table`](https://developer.mozilla.org/en-US/docs/Web/API/console/table)\non MDN.\n\n## Examples\n\n```rescript\nConsole.table({\"language\": \"rescript\", \"version\": \"10.1.2\"})\n```"
        ],
        "signature": "let table: 'a => unit"
      },
      {
        "id": "Stdlib.Console.time",
        "kind": "value",
        "name": "time",
        "docstrings": [
          "`time(label)` creates a timer to measure how long an operation takes. `label`\nmust be a unique name. Call `console.timeEnd` with the same `label` to print\noutput time.\n\nSee [`console.time`](https://developer.mozilla.org/en-US/docs/Web/API/console/time)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"
        ],
        "signature": "let time: string => unit"
      },
      {
        "id": "Stdlib.Console.timeEnd",
        "kind": "value",
        "name": "timeEnd",
        "docstrings": [
          "`timeEnd(label)` stops a timer created by `time`.\n\nSee [`console.timeEnd`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"
        ],
        "signature": "let timeEnd: string => unit"
      },
      {
        "id": "Stdlib.Console.timeLog",
        "kind": "value",
        "name": "timeLog",
        "docstrings": [
          "`timeLog(label)` prints the current elapsed time of the given timer to the console.\n\nSee [`console.timeLog`](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)\non MDN.\n\n## Examples\n\n```rescript\nConsole.time(\"for_time\")\nfor x in 3 downto 1 {\n  Console.log(x)\n  Console.timeLog(\"for_time\")\n}\nConsole.timeEnd(\"for_time\")\n```"
        ],
        "signature": "let timeLog: string => unit"
      },
      {
        "id": "Stdlib.Console.trace",
        "kind": "value",
        "name": "trace",
        "docstrings": [
          "`trace()` print a stack trace to console.\n\nSee [`console.trace`](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)\non MDN.\n\n## Examples\n\n```rescript\nlet main = () => {\n  Console.trace()\n}\nmain()\n// In the console, the following trace will be displayed:\n// main\n// <anonymous>\n```"
        ],
        "signature": "let trace: unit => unit"
      },
      {
        "id": "Stdlib.Console.warn",
        "kind": "value",
        "name": "warn",
        "docstrings": [
          "`warn(value)` print a warning message to console.\n\nSee [`console.warn`](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)\non MDN.\n\n## Examples\n\n```rescript\nConsole.warn(\"Warning\")\nConsole.warn((\"Warning\", \"invalid number\"))\n```"
        ],
        "signature": "let warn: 'a => unit"
      },
      {
        "id": "Stdlib.Console.warn2",
        "kind": "value",
        "name": "warn2",
        "docstrings": [
          "`warn2(v1, v2)`. Like `warn`, but two arguments.\n\n## Examples\n\n```rescript\nConsole.warn2(\"Hello\", \"World\")\nConsole.warn2([1, 2, 3], 4)\n```"
        ],
        "signature": "let warn2: ('a, 'b) => unit"
      },
      {
        "id": "Stdlib.Console.warn3",
        "kind": "value",
        "name": "warn3",
        "docstrings": [
          "`warn3(v1, v2, v3)`. Like `warn`, but three arguments.\n\n## Examples\n\n```rescript\nConsole.warn3(\"Hello\", \"World\", \"ReScript\")\nConsole.warn3([1, 2, 3], #4, #5)\n```"
        ],
        "signature": "let warn3: ('a, 'b, 'c) => unit"
      },
      {
        "id": "Stdlib.Console.warn4",
        "kind": "value",
        "name": "warn4",
        "docstrings": [
          "`warn4(v1, v2, v3, v4)`. Like `warn`, but with four arguments.\n\n## Examples\n\n```rescript\nConsole.warn4(\"Hello\", \"World\", \"ReScript\", \"!!!\")\nConsole.warn4(#first, #second, #third, \"fourth\")\n```"
        ],
        "signature": "let warn4: ('a, 'b, 'c, 'd) => unit"
      },
      {
        "id": "Stdlib.Console.warn5",
        "kind": "value",
        "name": "warn5",
        "docstrings": [
          "`warn5(v1, v2, v3, v4, v5)`. Like `warn`, but with five arguments.\n\n## Examples\n\n```rescript\nConsole.warn5(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\")\nConsole.warn5([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"})\n```"
        ],
        "signature": "let warn5: ('a, 'b, 'c, 'd, 'e) => unit"
      },
      {
        "id": "Stdlib.Console.warn6",
        "kind": "value",
        "name": "warn6",
        "docstrings": [
          "`warn6(v1, v2, v3, v4, v5, v6)`. Like `warn`, but with six arguments.\n\n## Examples\n\n```rescript\nConsole.warn6(\"Hello\", \"World\", \"from\", \"JS\", \"!!!\", '!')\nConsole.warn6([1, 2], (3, 4), [#5, #6], #polyvar, {\"name\": \"ReScript\"}, 42)\n```"
        ],
        "signature": "let warn6: ('a, 'b, 'c, 'd, 'e, 'f) => unit"
      },
      {
        "id": "Stdlib.Console.warnMany",
        "kind": "value",
        "name": "warnMany",
        "docstrings": [
          "`warnMany(arr)`. Like `warn`, but variadic.\n\n## Examples\n\n```rescript\nConsole.warnMany([\"Hello\", \"World\"])\nConsole.warnMany([1, 2, 3])\n```"
        ],
        "signature": "let warnMany: array<'a> => unit"
      }
    ]
  },
  "stdlib/bool": {
    "id": "Stdlib.Bool",
    "name": "Bool",
    "docstrings": [
      "Functions for interacting with JavaScript booleans.\nSee: [`Boolean`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean)"
    ],
    "items": [
      {
        "id": "Stdlib.Bool.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a boolean."],
        "signature": "type t = bool"
      },
      {
        "id": "Stdlib.Bool.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "Converts a boolean to a string.\n\n## Examples\n```rescript\nBool.toString(true) == \"true\"\nBool.toString(false) == \"false\"\n```"
        ],
        "signature": "let toString: bool => string"
      },
      {
        "id": "Stdlib.Bool.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "Converts a string to a boolean.\n\n## Examples\n```rescript\nBool.fromString(\"true\") == Some(true)\nBool.fromString(\"false\") == Some(false)\nBool.fromString(\"notAValidBoolean\") == None\n```"
        ],
        "signature": "let fromString: string => option<bool>"
      },
      {
        "id": "Stdlib.Bool.fromStringOrThrow",
        "kind": "value",
        "name": "fromStringOrThrow",
        "docstrings": [
          "Converts a string to a boolean.\nThrows an `Invalid_argument` exception if the string is not a valid boolean.\n\n## Examples\n```rescript\nBool.fromStringOrThrow(\"true\") == true\nBool.fromStringOrThrow(\"false\") == false\nswitch Bool.fromStringOrThrow(\"notAValidBoolean\") {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let fromStringOrThrow: string => bool"
      },
      {
        "id": "Stdlib.Bool.fromStringExn",
        "kind": "value",
        "name": "fromStringExn",
        "docstrings": [
          "Converts a string to a boolean.\nBeware, this function will throw an `Invalid_argument` exception\nif the string is not a valid boolean.\n\n## Examples\n```rescript\nBool.fromStringExn(\"true\") == true\nBool.fromStringExn(\"false\") == false\nswitch Bool.fromStringExn(\"notAValidBoolean\") {\n| exception Invalid_argument(_) => assert(true)\n| _ => assert(false)\n}\n```"
        ],
        "signature": "let fromStringExn: string => bool",
        "deprecated": "Use `fromStringOrThrow` instead"
      },
      {
        "id": "Stdlib.Bool.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [
          "Compares two booleans, returns an `Ordering.t` value.\n\n## Examples\n```rescript\nBool.compare(true, true) == Ordering.equal\nBool.compare(false, false) == Ordering.equal\nBool.compare(true, false) == Ordering.greater\nBool.compare(false, true) == Ordering.less\n```"
        ],
        "signature": "let compare: (bool, bool) => Ordering.t"
      },
      {
        "id": "Stdlib.Bool.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [
          "Checks if two booleans are equal and have the same value.\n\n## Examples\n```rescript\nBool.equal(true, true) == true\nBool.equal(false, false) == true\nBool.equal(true, false) == false\nBool.equal(false, true) == false\n```"
        ],
        "signature": "let equal: (bool, bool) => bool"
      }
    ]
  },
  "stdlib/bigint": {
    "id": "Stdlib.BigInt",
    "name": "BigInt",
    "docstrings": [],
    "items": [
      {
        "id": "Stdlib.BigInt.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing a bigint."],
        "signature": "type t = bigint"
      },
      {
        "id": "Stdlib.BigInt.asIntN",
        "kind": "value",
        "name": "asIntN",
        "docstrings": [
          "`asIntN(~width, bigint)` returns a bigint value truncated to the given number of bits as a signed integer.\n\nSee [`BigInt.asIntN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN) on MDN.\n\n## Examples\n\n```rescript\nBigInt.asIntN(~width=4, 25n) == -7n\nBigInt.asIntN(~width=4, 3n) == 3n\n```"
        ],
        "signature": "let asIntN: (~width: int, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.asUintN",
        "kind": "value",
        "name": "asUintN",
        "docstrings": [
          "`asUintN(~width, bigint)` returns a bigint value truncated to the given number of bits as an unsigned integer.\n\nSee [`BigInt.asUintN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN) on MDN.\n\n## Examples\n\n```rescript\nBigInt.asUintN(~width=4, 25n) == 9n\nBigInt.asUintN(~width=4, 3n) == 3n\n```"
        ],
        "signature": "let asUintN: (~width: int, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.fromStringOrThrow",
        "kind": "value",
        "name": "fromStringOrThrow",
        "docstrings": [
          "Parses the given `string` into a `bigint` using JavaScript semantics. Return the\nnumber as a `bigint` if successfully parsed. Throws a syntax exception otherwise.\n\n## Examples\n\n```rescript\nBigInt.fromStringOrThrow(\"123\") == 123n\n\nBigInt.fromStringOrThrow(\"\") == 0n\n\nBigInt.fromStringOrThrow(\"0x11\") == 17n\n\nBigInt.fromStringOrThrow(\"0b11\") == 3n\n\nBigInt.fromStringOrThrow(\"0o11\") == 9n\n\n/* catch exception */\nswitch BigInt.fromStringOrThrow(\"a\") {\n| exception JsExn(_error) => assert(true)\n| _bigInt => assert(false)\n}\n```"
        ],
        "signature": "let fromStringOrThrow: string => bigint"
      },
      {
        "id": "Stdlib.BigInt.fromString",
        "kind": "value",
        "name": "fromString",
        "docstrings": [
          "Parses the given `string` into a `bigint` using JavaScript semantics. Returns\n`Some(bigint)` if the string can be parsed, `None` otherwise.\n\n## Examples\n\n```rescript\nBigInt.fromString(\"123\") == Some(123n)\n\nBigInt.fromString(\"\") == Some(0n)\n\nBigInt.fromString(\"0x11\") == Some(17n)\n\nBigInt.fromString(\"0b11\") == Some(3n)\n\nBigInt.fromString(\"0o11\") == Some(9n)\n\nBigInt.fromString(\"invalid\") == None\n```"
        ],
        "signature": "let fromString: string => option<bigint>"
      },
      {
        "id": "Stdlib.BigInt.fromStringExn",
        "kind": "value",
        "name": "fromStringExn",
        "docstrings": [],
        "signature": "let fromStringExn: string => bigint",
        "deprecated": "Use `fromStringOrThrow` instead"
      },
      {
        "id": "Stdlib.BigInt.fromInt",
        "kind": "value",
        "name": "fromInt",
        "docstrings": [
          "`fromInt(int)` converts an `int` to a `bigint`.\n\n## Examples\n\n```rescript\nBigInt.fromInt(123) == 123n\nBigInt.fromInt(0) == 0n\nBigInt.fromInt(-456) == -456n\n```"
        ],
        "signature": "let fromInt: int => bigint"
      },
      {
        "id": "Stdlib.BigInt.fromFloatOrThrow",
        "kind": "value",
        "name": "fromFloatOrThrow",
        "docstrings": [
          "Converts a `float` to a `bigint` using JavaScript semantics.\nThrows an exception if the float is not an integer or is infinite/NaN.\n\n## Examples\n\n```rescript\nBigInt.fromFloatOrThrow(123.0) == 123n\n\nBigInt.fromFloatOrThrow(0.0) == 0n\n\nBigInt.fromFloatOrThrow(-456.0) == -456n\n\n/* This will throw an exception */\nswitch BigInt.fromFloatOrThrow(123.5) {\n| exception JsExn(_error) => assert(true)\n| _bigInt => assert(false)\n}\n```"
        ],
        "signature": "let fromFloatOrThrow: float => bigint"
      },
      {
        "id": "Stdlib.BigInt.fromFloat",
        "kind": "value",
        "name": "fromFloat",
        "docstrings": [
          "`fromFloat(float)` converts a `float` to a `bigint` using JavaScript semantics.\nReturns `Some(bigint)` if the float is a valid `bigint`, `None` otherwise.\n\n## Examples\n\n```rescript\nBigInt.fromFloat(123.0) == Some(123n)\nBigInt.fromFloat(0.0) == Some(0n)\nBigInt.fromFloat(-456.0) == Some(-456n)\nBigInt.fromFloat(123.5) == None\n```"
        ],
        "signature": "let fromFloat: float => option<bigint>"
      },
      {
        "id": "Stdlib.BigInt.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "Formats a `bigint` as a string. Return a `string` representing the given value.\nSee [`toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString) on MDN.\n\n## Examples\n\n```rescript\nBigInt.toString(123n) == \"123\"\n```"
        ],
        "signature": "let toString: (bigint, ~radix: int=?) => string"
      },
      {
        "id": "Stdlib.BigInt.toStringWithRadix",
        "kind": "value",
        "name": "toStringWithRadix",
        "docstrings": [],
        "signature": "let toStringWithRadix: (bigint, ~radix: int) => string",
        "deprecated": "Use `toString` with `~radix` instead"
      },
      {
        "id": "Stdlib.BigInt.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [
          "Returns a string with a language-sensitive representation of this BigInt value.\n\n## Examples\n\n```rescript\nBigInt.toString(123n) == \"123\"\n```"
        ],
        "signature": "let toLocaleString: bigint => string"
      },
      {
        "id": "Stdlib.BigInt.toFloat",
        "kind": "value",
        "name": "toFloat",
        "docstrings": [
          "`toFloat(bigint)` converts a `bigint` to a `float`.\n\n## Examples\n\n```rescript\nBigInt.toFloat(123n) == 123.0\nBigInt.toFloat(0n) == 0.0\nBigInt.toFloat(-456n) == -456.0\n```"
        ],
        "signature": "let toFloat: bigint => float"
      },
      {
        "id": "Stdlib.BigInt.toInt",
        "kind": "value",
        "name": "toInt",
        "docstrings": [
          "`toInt(bigint)` converts a `bigint` to an `int`.\n\n## Examples\n\n```rescript\nBigInt.toInt(123n) == 123\nBigInt.toInt(0n) == 0\nBigInt.toInt(-456n) == -456\n```"
        ],
        "signature": "let toInt: bigint => int"
      },
      {
        "id": "Stdlib.BigInt.add",
        "kind": "value",
        "name": "add",
        "docstrings": [
          "`add(a, b)` calculates the sum of two bigints.\n\n## Examples\n\n```rescript\nBigInt.add(5n, 3n) == 8n\nBigInt.add(-2n, 7n) == 5n\n```"
        ],
        "signature": "let add: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.sub",
        "kind": "value",
        "name": "sub",
        "docstrings": [
          "`sub(a, b)` calculates the difference of two bigints.\n\n## Examples\n\n```rescript\nBigInt.sub(8n, 3n) == 5n\nBigInt.sub(2n, 7n) == -5n\n```"
        ],
        "signature": "let sub: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.mul",
        "kind": "value",
        "name": "mul",
        "docstrings": [
          "`mul(a, b)` calculates the product of two bigints.\n\n## Examples\n\n```rescript\nBigInt.mul(5n, 3n) == 15n\nBigInt.mul(-2n, 7n) == -14n\n```"
        ],
        "signature": "let mul: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.div",
        "kind": "value",
        "name": "div",
        "docstrings": [
          "`div(a, b)` calculates the quotient of two bigints.\n\n## Examples\n\n```rescript\nBigInt.div(15n, 3n) == 5n\nBigInt.div(14n, 3n) == 4n\n```"
        ],
        "signature": "let div: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.mod",
        "kind": "value",
        "name": "mod",
        "docstrings": [
          "`mod(a, b)` calculates the remainder of dividing two bigints.\n\n## Examples\n\n```rescript\nBigInt.mod(15n, 4n) == 3n\nBigInt.mod(14n, 3n) == 2n\n```"
        ],
        "signature": "let mod: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.bitwiseAnd",
        "kind": "value",
        "name": "bitwiseAnd",
        "docstrings": [
          "`bitwiseAnd(a, b)` calculates the bitwise AND of two bigints.\n\n## Examples\n\n```rescript\nBigInt.bitwiseAnd(7n, 4n) == 4n\nBigInt.bitwiseAnd(15n, 8n) == 8n\n```"
        ],
        "signature": "let bitwiseAnd: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.bitwiseOr",
        "kind": "value",
        "name": "bitwiseOr",
        "docstrings": [
          "`bitwiseOr(a, b)` calculates the bitwise OR of two bigints.\n\n## Examples\n\n```rescript\nBigInt.bitwiseOr(7n, 4n) == 7n\nBigInt.bitwiseOr(8n, 4n) == 12n\n```"
        ],
        "signature": "let bitwiseOr: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.bitwiseXor",
        "kind": "value",
        "name": "bitwiseXor",
        "docstrings": [
          "`bitwiseXor(a, b)` calculates the bitwise XOR of two bigints.\n\n## Examples\n\n```rescript\nBigInt.bitwiseXor(7n, 4n) == 3n\nBigInt.bitwiseXor(15n, 8n) == 7n\n```"
        ],
        "signature": "let bitwiseXor: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.bitwiseNot",
        "kind": "value",
        "name": "bitwiseNot",
        "docstrings": [
          "`bitwiseNot(bigint)` calculates the bitwise NOT of a bigint.\n\n## Examples\n\n```rescript\nBigInt.bitwiseNot(2n) == -3n\nBigInt.bitwiseNot(-1n) == 0n\n```"
        ],
        "signature": "let bitwiseNot: bigint => bigint"
      },
      {
        "id": "Stdlib.BigInt.shiftLeft",
        "kind": "value",
        "name": "shiftLeft",
        "docstrings": [
          "`shiftLeft(bigint, amount)` calculates the shifted value of a bigint by `amount` bits to the left.\n\n## Examples\n\n```rescript\nBigInt.shiftLeft(4n, 1n) == 8n\nBigInt.shiftLeft(1n, 3n) == 8n\n```"
        ],
        "signature": "let shiftLeft: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.shiftRight",
        "kind": "value",
        "name": "shiftRight",
        "docstrings": [
          "`shiftRight(bigint, amount)` calculates the shifted value of a bigint by `amount` bits to the right.\n\n## Examples\n\n```rescript\nBigInt.shiftRight(8n, 1n) == 4n\nBigInt.shiftRight(16n, 2n) == 4n\n```"
        ],
        "signature": "let shiftRight: (bigint, bigint) => bigint"
      },
      {
        "id": "Stdlib.BigInt.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(bigint)` ignores the provided bigint and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: bigint => unit"
      },
      {
        "id": "Stdlib.BigInt.land",
        "kind": "value",
        "name": "land",
        "docstrings": [
          "`land(a, b)` calculates the bitwise AND of two bigints.\n\n**Deprecated:** Use `&` operator or `bitwiseAnd` instead.\n\n## Examples\n\n```rescript\nBigInt.land(7n, 4n) == 4n\n```"
        ],
        "signature": "let land: (bigint, bigint) => bigint",
        "deprecated": "Use `&` operator or `bitwiseAnd` instead."
      },
      {
        "id": "Stdlib.BigInt.lor",
        "kind": "value",
        "name": "lor",
        "docstrings": [
          "`lor(a, b)` calculates the bitwise OR of two bigints.\n\n**Deprecated:** Use `bitwiseOr` instead.\n\n## Examples\n\n```rescript\nBigInt.lor(7n, 4n) == 7n\n```"
        ],
        "signature": "let lor: (bigint, bigint) => bigint",
        "deprecated": "Use `bitwiseOr` instead."
      },
      {
        "id": "Stdlib.BigInt.lxor",
        "kind": "value",
        "name": "lxor",
        "docstrings": [
          "`lxor(a, b)` calculates the bitwise XOR of two bigints.\n\n**Deprecated:** Use `^` operator or `bitwiseXor` instead.\n\n## Examples\n\n```rescript\nBigInt.lxor(7n, 4n) == 3n\n```"
        ],
        "signature": "let lxor: (bigint, bigint) => bigint",
        "deprecated": "Use `^` operator or `bitwiseXor` instead."
      },
      {
        "id": "Stdlib.BigInt.lnot",
        "kind": "value",
        "name": "lnot",
        "docstrings": [
          "`lnot(bigint)` calculates the bitwise NOT of a bigint.\n\n**Deprecated:** Use `~` operator or `bitwiseNot` instead.\n\n## Examples\n\n```rescript\nBigInt.lnot(2n) == -3n\n```"
        ],
        "signature": "let lnot: bigint => bigint",
        "deprecated": "Use `~` operator or `bitwiseNot` instead."
      },
      {
        "id": "Stdlib.BigInt.lsl",
        "kind": "value",
        "name": "lsl",
        "docstrings": [
          "`lsl(bigint, amount)` calculates the shifted value of a bigint by `amount` bits to the left.\n\n**Deprecated:** Use `<<` operator or `shiftLeft` instead.\n\n## Examples\n\n```rescript\nBigInt.lsl(4n, 1n) == 8n\n```"
        ],
        "signature": "let lsl: (bigint, bigint) => bigint",
        "deprecated": "Use `<<` operator or `shiftLeft` instead."
      },
      {
        "id": "Stdlib.BigInt.asr",
        "kind": "value",
        "name": "asr",
        "docstrings": [
          "`asr(bigint, amount)` calculates the shifted value of a bigint by `amount` bits to the right.\n\n**Deprecated:** Use `>>` operator or `shiftRight` instead.\n\n## Examples\n\n```rescript\nBigInt.asr(8n, 1n) == 4n\n```"
        ],
        "signature": "let asr: (bigint, bigint) => bigint",
        "deprecated": "Use `>>` operator or `shiftRight` instead."
      }
    ]
  },
  "stdlib/array": {
    "id": "Stdlib.Array",
    "name": "Array",
    "docstrings": [
      "A mutable array.\n\nCompiles to a regular JavaScript array."
    ],
    "items": [
      {
        "id": "Stdlib.Array.t",
        "kind": "type",
        "name": "t",
        "docstrings": ["Type representing an array of value `'a`."],
        "signature": "type t<'a> = array<'a>"
      },
      {
        "id": "Stdlib.Array.arrayLike",
        "kind": "type",
        "name": "arrayLike",
        "docstrings": [],
        "signature": "type arrayLike<'a>"
      },
      {
        "id": "Stdlib.Array.fromIterator",
        "kind": "value",
        "name": "fromIterator",
        "docstrings": [
          "`fromIterator(iterator)` creates an array from the provided `iterator`\n\n## Examples\n\n```rescript\nMap.fromArray([(\"foo\", 1), (\"bar\", 2)])\n->Map.values\n->Array.fromIterator == [1, 2]\n```"
        ],
        "signature": "let fromIterator: Iterator.t<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Array.fromArrayLike",
        "kind": "value",
        "name": "fromArrayLike",
        "docstrings": [],
        "signature": "let fromArrayLike: arrayLike<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Array.fromArrayLikeWithMap",
        "kind": "value",
        "name": "fromArrayLikeWithMap",
        "docstrings": [],
        "signature": "let fromArrayLikeWithMap: (arrayLike<'a>, 'a => 'b) => array<'b>"
      },
      {
        "id": "Stdlib.Array.make",
        "kind": "value",
        "name": "make",
        "docstrings": [
          "`make(~length, init)` creates an array of length `length` initialized with the value of `init`.\n\n## Examples\n\n```rescript\nArray.make(~length=3, #apple) == [#apple, #apple, #apple]\nArray.make(~length=6, 7) == [7, 7, 7, 7, 7, 7]\n```"
        ],
        "signature": "let make: (~length: int, 'a) => array<'a>"
      },
      {
        "id": "Stdlib.Array.fromInitializer",
        "kind": "value",
        "name": "fromInitializer",
        "docstrings": [
          "`fromInitializer(~length, f)`\n\nCreates an array of length `length` initialized with the value returned from `f ` for each index.\n\n## Examples\n\n```rescript\nArray.fromInitializer(~length=3, i => i + 3) == [3, 4, 5]\n\nArray.fromInitializer(~length=7, i => i + 3) == [3, 4, 5, 6, 7, 8, 9]\n```"
        ],
        "signature": "let fromInitializer: (~length: int, int => 'a) => array<'a>"
      },
      {
        "id": "Stdlib.Array.equal",
        "kind": "value",
        "name": "equal",
        "docstrings": [],
        "signature": "let equal: (array<'a>, array<'a>, ('a, 'a) => bool) => bool"
      },
      {
        "id": "Stdlib.Array.compare",
        "kind": "value",
        "name": "compare",
        "docstrings": [],
        "signature": "let compare: (array<'a>, array<'a>, ('a, 'a) => Ordering.t) => Ordering.t"
      },
      {
        "id": "Stdlib.Array.isArray",
        "kind": "value",
        "name": "isArray",
        "docstrings": [],
        "signature": "let isArray: 'a => bool"
      },
      {
        "id": "Stdlib.Array.length",
        "kind": "value",
        "name": "length",
        "docstrings": [
          "`length(array)` returns the length of (i.e. number of items in) the array.\n\nSee [`Array.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\n\nsomeArray->Array.length == 2\n```"
        ],
        "signature": "let length: array<'a> => int"
      },
      {
        "id": "Stdlib.Array.copyAllWithin",
        "kind": "value",
        "name": "copyAllWithin",
        "docstrings": [],
        "signature": "let copyAllWithin: (array<'a>, ~target: int) => array<'a>",
        "deprecated": "Use `copyWithin` instead"
      },
      {
        "id": "Stdlib.Array.copyWithinToEnd",
        "kind": "value",
        "name": "copyWithinToEnd",
        "docstrings": [],
        "signature": "let copyWithinToEnd: (array<'a>, ~target: int, ~start: int) => array<'a>",
        "deprecated": "Use `copyWithin` instead"
      },
      {
        "id": "Stdlib.Array.copyWithin",
        "kind": "value",
        "name": "copyWithin",
        "docstrings": [
          "`copyWithin(array, ~target, ~start, ~end)` copies the sequence of array elements within the array to the position starting at `target`. The copy is taken from the index positions `start` to `end`.\n\nBeware this will *mutate* the array.\n\nSee [`Array.copyWithin`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin) on MDN.\n\n## Examples\n\n```rescript\nlet myArray = [1, 2, 3, 4, 5]\nmyArray->Array.copyWithin(~target=0, ~start=3) == [4, 5, 3, 4, 5]\n\nlet myArray = [1, 2, 3, 4, 5]\nmyArray->Array.copyWithin(~target=1, ~start=3, ~end=4) == [1, 4, 3, 4, 5]\n```"
        ],
        "signature": "let copyWithin: (\n  array<'a>,\n  ~target: int,\n  ~start: int,\n  ~end: int=?,\n) => array<'a>"
      },
      {
        "id": "Stdlib.Array.fillAll",
        "kind": "value",
        "name": "fillAll",
        "docstrings": [
          "`fillAll(array, value)` fills the entire `array` with `value`.\n\nBeware this will *mutate* the array.\n\nSee [`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) on MDN.\n\n## Examples\n\n```rescript\nlet myArray = [1, 2, 3, 4]\nmyArray->Array.fillAll(9)\nmyArray == [9, 9, 9, 9]\n```"
        ],
        "signature": "let fillAll: (array<'a>, 'a) => unit",
        "deprecated": "Use `fill` instead"
      },
      {
        "id": "Stdlib.Array.fillToEnd",
        "kind": "value",
        "name": "fillToEnd",
        "docstrings": [
          "`fillToEnd(array, value, ~start)` fills `array` with `value` from the `start` index.\n\nBeware this will *mutate* the array.\n\nSee [`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) on MDN.\n\n## Examples\n\n```rescript\nlet myArray = [1, 2, 3, 4]\nmyArray->Array.fillToEnd(9, ~start=1)\nmyArray == [1, 9, 9, 9]\n```"
        ],
        "signature": "let fillToEnd: (array<'a>, 'a, ~start: int) => unit",
        "deprecated": "Use `fill` instead"
      },
      {
        "id": "Stdlib.Array.fill",
        "kind": "value",
        "name": "fill",
        "docstrings": [
          "`fill(array, value, ~start, ~end)` fills `array` with `value` from `start` to `end`.\n\nBeware this will *mutate* the array.\n\nSee [`Array.fill`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) on MDN.\n\n## Examples\n\n```rescript\nlet myArray = [1, 2, 3, 4]\n\nmyArray->Array.fill(9)\nmyArray == [9, 9, 9, 9]\n\nmyArray->Array.fill(0, ~start=1)\nmyArray == [9, 0, 0, 0]\n\nmyArray->Array.fill(5, ~start=1, ~end=3)\nmyArray == [9, 5, 5, 0]\n```"
        ],
        "signature": "let fill: (array<'a>, 'a, ~start: int=?, ~end: int=?) => unit"
      },
      {
        "id": "Stdlib.Array.pop",
        "kind": "value",
        "name": "pop",
        "docstrings": [
          "`pop(array)` removes the last item from `array` and returns it.\n\nBeware this will *mutate* the array.\n\nSee [`Array.pop`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\n\nsomeArray->Array.pop == Some(\"hello\")\n\nsomeArray == [\"hi\"] // Notice last item is gone.\n```"
        ],
        "signature": "let pop: array<'a> => option<'a>"
      },
      {
        "id": "Stdlib.Array.push",
        "kind": "value",
        "name": "push",
        "docstrings": [
          "`push(array, item)` appends `item` to the end of `array`.\n\nBeware this will *mutate* the array.\n\nSee [`Array.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\n\nsomeArray->Array.push(\"yay\")\n\nsomeArray == [\"hi\", \"hello\", \"yay\"]\n```"
        ],
        "signature": "let push: (array<'a>, 'a) => unit"
      },
      {
        "id": "Stdlib.Array.pushMany",
        "kind": "value",
        "name": "pushMany",
        "docstrings": [
          "`pushMany(array, itemsArray)` appends many new items to the end of the array.\n\nBeware this will *mutate* the array.\n\nSee [`Array.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\n\nsomeArray->Array.pushMany([\"yay\", \"wehoo\"])\nsomeArray == [\"hi\", \"hello\", \"yay\", \"wehoo\"]\n```"
        ],
        "signature": "let pushMany: (array<'a>, array<'a>) => unit"
      },
      {
        "id": "Stdlib.Array.reverse",
        "kind": "value",
        "name": "reverse",
        "docstrings": [
          "`reverse(array)` reverses the order of the items in `array`.\n\nBeware this will *mutate* the array.\n\nSee [`Array.reverse`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\nsomeArray->Array.reverse\n\nsomeArray == [\"hello\", \"hi\"]\n```"
        ],
        "signature": "let reverse: array<'a> => unit"
      },
      {
        "id": "Stdlib.Array.shift",
        "kind": "value",
        "name": "shift",
        "docstrings": [
          "`shift(array)` removes the first item in the array, and returns it.\n\nBeware this will *mutate* the array.\n\nSee [`Array.shift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\n\nsomeArray->Array.shift == Some(\"hi\")\n\nsomeArray == [\"hello\"] // Notice first item is gone.\n```"
        ],
        "signature": "let shift: array<'a> => option<'a>"
      },
      {
        "id": "Stdlib.Array.toSorted",
        "kind": "value",
        "name": "toSorted",
        "docstrings": [
          "`toSorted(array, comparator)` returns a new, sorted array from `array`, using the `comparator` function.\n\nSee [`Array.toSorted`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [3, 2, 1]\n\nsomeArray->Array.toSorted(Int.compare) == [1, 2, 3]\n\nsomeArray == [3, 2, 1] // Original unchanged\n```"
        ],
        "signature": "let toSorted: (array<'a>, ('a, 'a) => Ordering.t) => array<'a>"
      },
      {
        "id": "Stdlib.Array.sort",
        "kind": "value",
        "name": "sort",
        "docstrings": [
          "`sort(array, comparator)` sorts `array` in-place using the `comparator` function.\n\nBeware this will *mutate* the array.\n\nSee [`Array.sort`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort) on MDN.\n\n## Examples\n\n```rescript\nlet array = [3, 2, 1]\narray->Array.sort((a, b) => float(a - b))\narray == [1, 2, 3]\n```"
        ],
        "signature": "let sort: (array<'a>, ('a, 'a) => Ordering.t) => unit"
      },
      {
        "id": "Stdlib.Array.splice",
        "kind": "value",
        "name": "splice",
        "docstrings": [],
        "signature": "let splice: (\n  array<'a>,\n  ~start: int,\n  ~remove: int,\n  ~insert: array<'a>,\n) => unit"
      },
      {
        "id": "Stdlib.Array.toSpliced",
        "kind": "value",
        "name": "toSpliced",
        "docstrings": [],
        "signature": "let toSpliced: (\n  array<'a>,\n  ~start: int,\n  ~remove: int,\n  ~insert: array<'a>,\n) => array<'a>"
      },
      {
        "id": "Stdlib.Array.removeInPlace",
        "kind": "value",
        "name": "removeInPlace",
        "docstrings": [
          "`removeInPlace(array, index)` removes the item at the specified `index` from `array`.\n\nBeware this will *mutate* the array.\n\n## Examples\n\n```rescript\nlet array = []\narray->Array.removeInPlace(0)\narray == [] // Removing from an empty array does nothing\n\nlet array2 = [\"Hello\", \"Hi\", \"Good bye\"]\narray2->Array.removeInPlace(1)\narray2 == [\"Hello\", \"Good bye\"] // Removes the item at index 1\n```"
        ],
        "signature": "let removeInPlace: (array<'a>, int) => unit"
      },
      {
        "id": "Stdlib.Array.with",
        "kind": "value",
        "name": "with",
        "docstrings": [],
        "signature": "let with: (array<'a>, int, 'a) => array<'a>"
      },
      {
        "id": "Stdlib.Array.unshift",
        "kind": "value",
        "name": "unshift",
        "docstrings": [
          "`unshift(array, item)` inserts a new item at the start of the array.\n\nBeware this will *mutate* the array.\n\nSee [`Array.unshift`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\nsomeArray->Array.unshift(\"yay\")\nsomeArray == [\"yay\", \"hi\", \"hello\"]\n```"
        ],
        "signature": "let unshift: (array<'a>, 'a) => unit"
      },
      {
        "id": "Stdlib.Array.unshiftMany",
        "kind": "value",
        "name": "unshiftMany",
        "docstrings": [
          "`unshiftMany(array, itemsArray)` inserts many new items to the start of the array.\n\nBeware this will *mutate* the array.\n\nSee [`Array.push`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\nsomeArray->Array.unshiftMany([\"yay\", \"wehoo\"])\nsomeArray == [\"yay\", \"wehoo\", \"hi\", \"hello\"]\n```"
        ],
        "signature": "let unshiftMany: (array<'a>, array<'a>) => unit"
      },
      {
        "id": "Stdlib.Array.concat",
        "kind": "value",
        "name": "concat",
        "docstrings": [
          "`concat(array1, array2)` concatenates the two arrays, creating a new array.\n\nSee [`Array.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) on MDN.\n\n## Examples\n\n```rescript\nlet array1 = [\"hi\", \"hello\"]\nlet array2 = [\"yay\", \"wehoo\"]\n\nlet someArray = array1->Array.concat(array2)\n\nsomeArray == [\"hi\", \"hello\", \"yay\", \"wehoo\"]\n```"
        ],
        "signature": "let concat: (array<'a>, array<'a>) => array<'a>"
      },
      {
        "id": "Stdlib.Array.concatMany",
        "kind": "value",
        "name": "concatMany",
        "docstrings": [
          "`concatMany(array1, arrays)` concatenates array1 with several other arrays, creating a new array.\n\nSee [`Array.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat) on MDN.\n\n## Examples\n```rescript\nlet array1 = [\"hi\", \"hello\"]\nlet array2 = [\"yay\"]\nlet array3 = [\"wehoo\"]\n\nlet someArray = array1->Array.concatMany([array2, array3])\n\nConsole.log(someArray) // [\"hi\", \"hello\", \"yay\", \"wehoo\"]\n```"
        ],
        "signature": "let concatMany: (array<'a>, array<array<'a>>) => array<'a>"
      },
      {
        "id": "Stdlib.Array.flat",
        "kind": "value",
        "name": "flat",
        "docstrings": [
          "`flat(arrays)` concatenates an array of arrays into a single array.\n\nSee [`Array.flat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat) on MDN.\n\n## Examples\n\n```rescript\n[[1], [2], [3, 4]]->Array.flat == [1, 2, 3, 4]\n```"
        ],
        "signature": "let flat: array<array<'a>> => array<'a>"
      },
      {
        "id": "Stdlib.Array.includes",
        "kind": "value",
        "name": "includes",
        "docstrings": [
          "`includes(array, item)` checks whether `array` includes `item`, by doing a [strict check for equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality).\n\nSee [`Array.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes) on MDN.\n\n## Examples\n\n```rescript\n[1, 2]->Array.includes(1) == true\n[1, 2]->Array.includes(3) == false\n\n[{\"language\": \"ReScript\"}]->Array.includes({\"language\": \"ReScript\"}) == false // false, because of strict equality\n```"
        ],
        "signature": "let includes: (array<'a>, 'a) => bool"
      },
      {
        "id": "Stdlib.Array.indexOf",
        "kind": "value",
        "name": "indexOf",
        "docstrings": [
          "`indexOf(array, item, ~from)` returns the index of the provided `item` in `array`, starting the search at `from`. Uses [strict check for equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) when comparing items.\n\nReturns `-1` if the item isn't found. Check out `Array.indexOfOpt` for a version that returns `None` instead of `-1` if the item does not exist.\n\nSee [`Array.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) on MDN.\n\n## Examples\n\n```rescript\n[1, 2]->Array.indexOf(2) == 1\n[1, 2]->Array.indexOf(3) == -1\n[1, 2, 1, 2]->Array.indexOf(2, ~from=2) == 3\n\n[{\"language\": \"ReScript\"}]->Array.indexOf({\"language\": \"ReScript\"}) == -1 // -1, because of strict equality\n```"
        ],
        "signature": "let indexOf: (array<'a>, 'a, ~from: int=?) => int"
      },
      {
        "id": "Stdlib.Array.indexOfOpt",
        "kind": "value",
        "name": "indexOfOpt",
        "docstrings": [
          "`indexOfOpt(array, item)` returns an option of the index of the provided `item` in `array`. Uses [strict check for equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) when comparing items.\n\nSee [`Array.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf) on MDN.\n\n## Examples\n\n```rescript\n[1, 2]->Array.indexOfOpt(2) == Some(1)\n[1, 2]->Array.indexOfOpt(3) == None\n[{\"language\": \"ReScript\"}]->Array.indexOfOpt({\"language\": \"ReScript\"}) == None // None, because of strict equality\n```"
        ],
        "signature": "let indexOfOpt: (array<'a>, 'a) => option<int>"
      },
      {
        "id": "Stdlib.Array.indexOfFrom",
        "kind": "value",
        "name": "indexOfFrom",
        "docstrings": [],
        "signature": "let indexOfFrom: (array<'a>, 'a, int) => int",
        "deprecated": "Use `indexOf` instead"
      },
      {
        "id": "Stdlib.Array.join",
        "kind": "value",
        "name": "join",
        "docstrings": [
          "`join(array, separator)` produces a string where all items of `array` are printed, separated by `separator`. Array items must be strings, to join number or other arrays, use `joinUnsafe`. Under the hood this will run JavaScript's `toString` on all the array items.\n\nSee [Array.join](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n## Examples\n\n```rescript\n[\"One\", \"Two\", \"Three\"]->Array.join(\" -- \") == \"One -- Two -- Three\"\n```"
        ],
        "signature": "let join: (array<string>, string) => string"
      },
      {
        "id": "Stdlib.Array.joinWith",
        "kind": "value",
        "name": "joinWith",
        "docstrings": [
          "`joinWith(array, separator)` produces a string where all items of `array` are printed, separated by `separator`. Array items must be strings, to join number or other arrays, use `joinWithUnsafe`. Under the hood this will run JavaScript's `toString` on all the array items.\n\n## Examples\n\n```rescript\n[\"One\", \"Two\", \"Three\"]->Array.joinWith(\" -- \") == \"One -- Two -- Three\"\n```"
        ],
        "signature": "let joinWith: (array<string>, string) => string",
        "deprecated": "Use `join` instead"
      },
      {
        "id": "Stdlib.Array.joinUnsafe",
        "kind": "value",
        "name": "joinUnsafe",
        "docstrings": [
          "`joinUnsafe(array, separator)` produces a string where all items of `array` are printed, separated by `separator`. Under the hood this will run JavaScript's `toString` on all the array items.\n\nSee [Array.join](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join)\n\n## Examples\n\n```rescript\n[1, 2, 3]->Array.joinUnsafe(\" -- \") == \"1 -- 2 -- 3\"\n```"
        ],
        "signature": "let joinUnsafe: (array<'a>, string) => string"
      },
      {
        "id": "Stdlib.Array.joinWithUnsafe",
        "kind": "value",
        "name": "joinWithUnsafe",
        "docstrings": [
          "`joinWithUnsafe(array, separator)` produces a string where all items of `array` are printed, separated by `separator`. Under the hood this will run JavaScript's `toString` on all the array items.\n\n## Examples\n\n```rescript\n[1, 2, 3]->Array.joinWithUnsafe(\" -- \") == \"1 -- 2 -- 3\"\n```"
        ],
        "signature": "let joinWithUnsafe: (array<'a>, string) => string",
        "deprecated": "Use `joinUnsafe` instead"
      },
      {
        "id": "Stdlib.Array.lastIndexOf",
        "kind": "value",
        "name": "lastIndexOf",
        "docstrings": [
          "`lastIndexOf(array, item, ~from)` returns the last index of the provided `item` in `array`, searching backwards from `from`. Uses [strict check for equality](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality) when comparing items.\n\nReturns `-1` if the item isn't found. Check out `Array.lastIndexOfOpt` for a version that returns `None` instead of `-1` if the item does not exist.\n\nSee [`Array.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 1, 2]->Array.lastIndexOf(2) == 3\n[1, 2]->Array.lastIndexOf(3) == -1\n[1, 2, 1, 2]->Array.lastIndexOf(2, ~from=2) == 1\n\n[{\"language\": \"ReScript\"}]->Array.lastIndexOf({\"language\": \"ReScript\"}) == -1 // -1, because of strict equality\n```"
        ],
        "signature": "let lastIndexOf: (array<'a>, 'a, ~from: int=?) => int"
      },
      {
        "id": "Stdlib.Array.lastIndexOfOpt",
        "kind": "value",
        "name": "lastIndexOfOpt",
        "docstrings": [],
        "signature": "let lastIndexOfOpt: (array<'a>, 'a) => option<int>"
      },
      {
        "id": "Stdlib.Array.lastIndexOfFrom",
        "kind": "value",
        "name": "lastIndexOfFrom",
        "docstrings": [],
        "signature": "let lastIndexOfFrom: (array<'a>, 'a, int) => int",
        "deprecated": "Use `lastIndexOf` instead"
      },
      {
        "id": "Stdlib.Array.slice",
        "kind": "value",
        "name": "slice",
        "docstrings": [
          "`slice(array, ~start, ~end)` creates a new array of items copied from `array` from `start` until (but not including) `end`.\n\nSee [`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 3, 4]->Array.slice(~start=1, ~end=3) == [2, 3]\n[1, 2, 3, 4]->Array.slice(~start=1) == [2, 3, 4]\n[1, 2, 3, 4]->Array.slice == [1, 2, 3, 4]\n```"
        ],
        "signature": "let slice: (array<'a>, ~start: int=?, ~end: int=?) => array<'a>"
      },
      {
        "id": "Stdlib.Array.sliceToEnd",
        "kind": "value",
        "name": "sliceToEnd",
        "docstrings": [
          "`sliceToEnd(array, start)` creates a new array from `array`, with all items from `array` starting from `start`.\n\nSee [`Array.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 3, 4]->Array.sliceToEnd(~start=1) == [2, 3, 4]\n```"
        ],
        "signature": "let sliceToEnd: (array<'a>, ~start: int) => array<'a>",
        "deprecated": "Use `slice` instead"
      },
      {
        "id": "Stdlib.Array.copy",
        "kind": "value",
        "name": "copy",
        "docstrings": [
          "`copy(array)` makes a copy of the array with the items in it, but does not make copies of the items themselves.\n\n## Examples\n\n```rescript\nlet myArray = [1, 2, 3]\nlet copyOfMyArray = myArray->Array.copy\n\ncopyOfMyArray == [1, 2, 3]\n(myArray === copyOfMyArray) == false\n```"
        ],
        "signature": "let copy: array<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Array.toString",
        "kind": "value",
        "name": "toString",
        "docstrings": [
          "`toString(array)` stringifies `array` by running `toString` on all of the array elements and joining them with \",\".\n\nSee [`Array.toString`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 3, 4]->Array.toString == \"1,2,3,4\"\n```"
        ],
        "signature": "let toString: array<'a> => string"
      },
      {
        "id": "Stdlib.Array.toLocaleString",
        "kind": "value",
        "name": "toLocaleString",
        "docstrings": [],
        "signature": "let toLocaleString: array<'a> => string"
      },
      {
        "id": "Stdlib.Array.every",
        "kind": "value",
        "name": "every",
        "docstrings": [
          "`every(array, predicate)` returns true if `predicate` returns true for all items in `array`.\n\nSee [`Array.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) on MDN.\n\n## Examples\n\n```rescript\nlet array = [1, 2, 3, 4]\n\narray->Array.every(num => num <= 4) == true\n\narray->Array.every(num => num === 1) == false\n```"
        ],
        "signature": "let every: (array<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.Array.everyWithIndex",
        "kind": "value",
        "name": "everyWithIndex",
        "docstrings": [
          "`everyWithIndex(array, checker)` returns true if all items in `array` returns true when running the provided `checker` function.\n\nSee [`Array.every`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every) on MDN.\n\n## Examples\n\n```rescript\nlet array = [1, 2, 3, 4]\n\narray->Array.everyWithIndex((num, index) => index < 5 && num <= 4) == true\n\narray->Array.everyWithIndex((num, index) => index < 2 && num >= 2) == false\n```"
        ],
        "signature": "let everyWithIndex: (array<'a>, ('a, int) => bool) => bool"
      },
      {
        "id": "Stdlib.Array.filter",
        "kind": "value",
        "name": "filter",
        "docstrings": [
          "`filter(array, checker)` returns a new array containing all elements from `array` for which the provided `checker` function returns true.\n\nSee [`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 3, 4]->Array.filter(num => num > 2) == [3, 4]\n```"
        ],
        "signature": "let filter: (array<'a>, 'a => bool) => array<'a>"
      },
      {
        "id": "Stdlib.Array.filterWithIndex",
        "kind": "value",
        "name": "filterWithIndex",
        "docstrings": [
          "`filterWithIndex(array, checker)` returns a new array containing all elements from `array` for which the provided `checker` function returns true.\n\nSee [`Array.filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) on MDN.\n\n## Examples\n\n```rescript\n[1, 2, 3, 4]->Array.filterWithIndex((num, index) => index === 0 || num === 2) == [1, 2]\n```"
        ],
        "signature": "let filterWithIndex: (array<'a>, ('a, int) => bool) => array<'a>"
      },
      {
        "id": "Stdlib.Array.find",
        "kind": "value",
        "name": "find",
        "docstrings": [
          "`find(array, checker)` returns the first element of `array` where the provided `checker` function returns true.\n\nSee [`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, TypeScript, JavaScript]\n\narray->Array.find(item => item == ReScript) == Some(ReScript)\n```"
        ],
        "signature": "let find: (array<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Array.findWithIndex",
        "kind": "value",
        "name": "findWithIndex",
        "docstrings": [
          "`findWithIndex(array, checker)` returns the first element of `array` where the provided `checker` function returns true.\n\nSee [`Array.find`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [TypeScript, JavaScript, ReScript]\n\narray->Array.findWithIndex((item, index) => index > 1 && item == ReScript) == Some(ReScript)\n```"
        ],
        "signature": "let findWithIndex: (array<'a>, ('a, int) => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Array.findLast",
        "kind": "value",
        "name": "findLast",
        "docstrings": [
          "`findLast(array, checker)` returns the last element of `array` where the provided `checker` function returns true.\n\nSee [`Array.findLast`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) on MDN.\n\n## Examples\n\n```rescript\nlet array = [1, 2, 3]\n\narray->Array.findLast(item => item > 0) == Some(3)\n```"
        ],
        "signature": "let findLast: (array<'a>, 'a => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Array.findLastWithIndex",
        "kind": "value",
        "name": "findLastWithIndex",
        "docstrings": [
          "`findLastWithIndex(array, checker)` returns the last element of `array` where the provided `checker` function returns true.\n\nSee [`Array.findLast`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast) on MDN.\n\n## Examples\n\n```rescript\nlet array = [1, 2, 3]\n\narray->Array.findLastWithIndex((item, index) => index < 2 && item > 0) == Some(2)\n```"
        ],
        "signature": "let findLastWithIndex: (array<'a>, ('a, int) => bool) => option<'a>"
      },
      {
        "id": "Stdlib.Array.findIndex",
        "kind": "value",
        "name": "findIndex",
        "docstrings": [
          "`findIndex(array, checker)` returns the index of the first element of `array` where the provided `checker` function returns true.\n\nReturns `-1` if the item does not exist. Consider using `Array.findIndexOpt` if you want an option instead (where `-1` would be `None`).\n\nSee [`Array.findIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, JavaScript]\n\narray->Array.findIndex(item => item == ReScript) == 0\n\narray->Array.findIndex(item => item == TypeScript) == -1\n```"
        ],
        "signature": "let findIndex: (array<'a>, 'a => bool) => int"
      },
      {
        "id": "Stdlib.Array.findIndexWithIndex",
        "kind": "value",
        "name": "findIndexWithIndex",
        "docstrings": [
          "`findIndexWithIndex(array, checker)` returns the index of the first element of `array` where the provided `checker` function returns true.\n\nReturns `-1` if the item does not exist. Consider using `Array.findIndexOpt` if you want an option instead (where `-1` would be `None`).\n\nSee [`Array.findIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, JavaScript]\n\nlet isReScriptFirst =\n  array->Array.findIndexWithIndex((item, index) => index === 0 && item == ReScript)\nlet isTypeScriptFirst =\n  array->Array.findIndexWithIndex((item, index) => index === 0 && item == TypeScript)\n\nisReScriptFirst == 0\nisTypeScriptFirst == -1\n```"
        ],
        "signature": "let findIndexWithIndex: (array<'a>, ('a, int) => bool) => int"
      },
      {
        "id": "Stdlib.Array.findLastIndex",
        "kind": "value",
        "name": "findLastIndex",
        "docstrings": [
          "`findLastIndex(array, checker)` returns the index of the last element of `array` where the provided `checker` function returns true.\n\nReturns `-1` if the item does not exist. Consider using `Array.findLastIndexOpt` if you want an option instead (where `-1` would be `None`).\n\nSee [`Array.findLastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, JavaScript, ReScript]\n\narray->Array.findLastIndex(item => item == ReScript) == 2\n\narray->Array.findLastIndex(item => item == TypeScript) == -1\n```"
        ],
        "signature": "let findLastIndex: (array<'a>, 'a => bool) => int"
      },
      {
        "id": "Stdlib.Array.findLastIndexWithIndex",
        "kind": "value",
        "name": "findLastIndexWithIndex",
        "docstrings": [
          "`findLastIndexWithIndex(array, checker)` returns the index of the last element of `array` where the provided `checker` function returns true.\n\nReturns `-1` if the item does not exist. Consider using `Array.findLastIndexOpt` if you want an option instead (where `-1` would be `None`).\n\nSee [`Array.findLastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, JavaScript, JavaScript, ReScript]\n\nlet isReScriptLast =\n  array->Array.findLastIndexWithIndex((item, index) => index === 3 && item == ReScript)\nlet isTypeScriptLast =\n  array->Array.findLastIndexWithIndex((item, index) => index === 3 && item == TypeScript)\n\nisReScriptLast == 3\nisTypeScriptLast == -1\n```"
        ],
        "signature": "let findLastIndexWithIndex: (array<'a>, ('a, int) => bool) => int"
      },
      {
        "id": "Stdlib.Array.forEach",
        "kind": "value",
        "name": "forEach",
        "docstrings": [
          "`forEach(array, fn)` runs the provided `fn` on every element of `array`.\n\nSee [`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) on MDN.\n\n## Examples\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\n\narray->Array.forEach(item => {\n  Console.log(item)\n})\n```"
        ],
        "signature": "let forEach: (array<'a>, 'a => unit) => unit"
      },
      {
        "id": "Stdlib.Array.forEachWithIndex",
        "kind": "value",
        "name": "forEachWithIndex",
        "docstrings": [
          "`forEachWithIndex(array, fn)` runs the provided `fn` on every element of `array`.\n\nSee [`Array.forEach`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\n\narray->Array.forEachWithIndex((item, index) => {\n  Console.log(\"At item \" ++ Int.toString(index) ++ \": \" ++ item)\n})\n```"
        ],
        "signature": "let forEachWithIndex: (array<'a>, ('a, int) => unit) => unit"
      },
      {
        "id": "Stdlib.Array.map",
        "kind": "value",
        "name": "map",
        "docstrings": [
          "`map(array, fn)` returns a new array with all elements from `array`, each element transformed using the provided `fn`.\n\nSee [`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\nlet mappedArray = array->Array.map(greeting => greeting ++ \" to you\")\n\nmappedArray == [\"Hello to you\", \"Hi to you\", \"Good bye to you\"]\n```"
        ],
        "signature": "let map: (array<'a>, 'a => 'b) => array<'b>"
      },
      {
        "id": "Stdlib.Array.mapWithIndex",
        "kind": "value",
        "name": "mapWithIndex",
        "docstrings": [
          "`mapWithIndex(array, fn)` returns a new array with all elements from `array`, each element transformed using the provided `fn`.\n\nSee [`Array.map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\nlet mappedArray =\n  array->Array.mapWithIndex((greeting, index) => greeting ++ \" at position \" ++ Int.toString(index))\n\nmappedArray == [\"Hello at position 0\", \"Hi at position 1\", \"Good bye at position 2\"]\n```"
        ],
        "signature": "let mapWithIndex: (array<'a>, ('a, int) => 'b) => array<'b>"
      },
      {
        "id": "Stdlib.Array.reduce",
        "kind": "value",
        "name": "reduce",
        "docstrings": [
          "`reduce(xs, init, fn)`\n\nApplies `fn` to each element of `xs` from beginning to end. Function `fn` has two parameters: the item from the list and an “accumulator”; which starts with a value of `init`. `reduce` returns the final value of the accumulator.\n\n## Examples\n\n```rescript\nArray.reduce([2, 3, 4], 1, (a, b) => a + b) == 10\n\nArray.reduce([\"a\", \"b\", \"c\", \"d\"], \"\", (a, b) => a ++ b) == \"abcd\"\n\n[1, 2, 3]->Array.reduce(list{}, List.add) == list{3, 2, 1}\n\nArray.reduce([], list{}, List.add) == list{}\n```"
        ],
        "signature": "let reduce: (array<'a>, 'b, ('b, 'a) => 'b) => 'b"
      },
      {
        "id": "Stdlib.Array.reduceWithIndex",
        "kind": "value",
        "name": "reduceWithIndex",
        "docstrings": [
          "`reduceWithIndex(x, init, fn)`\n\nApplies `fn` to each element of `xs` from beginning to end. Function `fn` has three parameters: the item from the array and an “accumulator”, which starts with a value of `init` and the index of each element. `reduceWithIndex` returns the final value of the accumulator.\n\n## Examples\n\n```rescript\nArray.reduceWithIndex([1, 2, 3, 4], 0, (acc, x, i) => acc + x + i) == 16\n\nArray.reduceWithIndex([1, 2, 3], list{}, (acc, v, i) => list{v + i, ...acc}) == list{5, 3, 1}\n\nArray.reduceWithIndex([], list{}, (acc, v, i) => list{v + i, ...acc}) == list{}\n```"
        ],
        "signature": "let reduceWithIndex: (array<'a>, 'b, ('b, 'a, int) => 'b) => 'b"
      },
      {
        "id": "Stdlib.Array.reduceRight",
        "kind": "value",
        "name": "reduceRight",
        "docstrings": [
          "`reduceRight(xs, init, fn)`\n\nWorks like `Array.reduce`; except that function `fn` is applied to each item of `xs` from the last back to the first.\n\n## Examples\n\n```rescript\nArray.reduceRight([\"a\", \"b\", \"c\", \"d\"], \"\", (a, b) => a ++ b) == \"dcba\"\n\nArray.reduceRight([1, 2, 3], list{}, List.add) == list{1, 2, 3}\n\nArray.reduceRight([], list{}, List.add) == list{}\n```"
        ],
        "signature": "let reduceRight: (array<'a>, 'b, ('b, 'a) => 'b) => 'b"
      },
      {
        "id": "Stdlib.Array.reduceRightWithIndex",
        "kind": "value",
        "name": "reduceRightWithIndex",
        "docstrings": [
          "`reduceRightWithIndex(xs, init, fn)`\n\nLike `reduceRight`, but with an additional index argument on the callback function.\n\n## Examples\n\n```rescript\nArray.reduceRightWithIndex([1, 2, 3, 4], 0, (acc, x, i) => acc + x + i) == 16\n\nArray.reduceRightWithIndex([], list{}, (acc, v, i) => list{v + i, ...acc}) == list{}\n```"
        ],
        "signature": "let reduceRightWithIndex: (array<'a>, 'b, ('b, 'a, int) => 'b) => 'b"
      },
      {
        "id": "Stdlib.Array.some",
        "kind": "value",
        "name": "some",
        "docstrings": [
          "`some(array, predicate)` returns true if `predicate` returns true for any element in `array`.\n\nSee [`Array.some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\n\narray->Array.some(greeting => greeting === \"Hello\") == true\n```"
        ],
        "signature": "let some: (array<'a>, 'a => bool) => bool"
      },
      {
        "id": "Stdlib.Array.someWithIndex",
        "kind": "value",
        "name": "someWithIndex",
        "docstrings": [
          "`someWithIndex(array, checker)` returns true if running the provided `checker` function on any element in `array` returns true.\n\nSee [`Array.some`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\n\narray->Array.someWithIndex((greeting, index) => greeting === \"Hello\" && index === 0) == true\n```"
        ],
        "signature": "let someWithIndex: (array<'a>, ('a, int) => bool) => bool"
      },
      {
        "id": "Stdlib.Array.get",
        "kind": "value",
        "name": "get",
        "docstrings": [
          "`get(array, index)` returns the element at `index` of `array`.\n\nReturns `None` if the index does not exist in the array. Equivalent to doing `array[index]` in JavaScript.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\n\narray->Array.get(0) == Some(\"Hello\")\n\narray->Array.get(3) == None\n```"
        ],
        "signature": "let get: (array<'a>, int) => option<'a>"
      },
      {
        "id": "Stdlib.Array.set",
        "kind": "value",
        "name": "set",
        "docstrings": [
          "`set(array, index, item)` sets the provided `item` at `index` of `array`.\n\nBeware this will *mutate* the array.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\narray->Array.set(1, \"Hello\")\n\narray[1] == Some(\"Hello\")\n```"
        ],
        "signature": "let set: (array<'a>, int, 'a) => unit"
      },
      {
        "id": "Stdlib.Array.getSymbol",
        "kind": "value",
        "name": "getSymbol",
        "docstrings": [],
        "signature": "let getSymbol: (array<'a>, Symbol.t) => option<'b>"
      },
      {
        "id": "Stdlib.Array.getSymbolUnsafe",
        "kind": "value",
        "name": "getSymbolUnsafe",
        "docstrings": [],
        "signature": "let getSymbolUnsafe: (array<'a>, Symbol.t) => 'b"
      },
      {
        "id": "Stdlib.Array.setSymbol",
        "kind": "value",
        "name": "setSymbol",
        "docstrings": [],
        "signature": "let setSymbol: (array<'a>, Symbol.t, 'b) => unit"
      },
      {
        "id": "Stdlib.Array.getUnsafe",
        "kind": "value",
        "name": "getUnsafe",
        "docstrings": [
          "`getUnsafe(array, index)` returns the element at `index` of `array`.\n\nThis is _unsafe_, meaning it will return `undefined` value if `index` does not exist in `array`.\n\nUse `Array.getUnsafe` only when you are sure the `index` exists (i.e. when using for-loop).\n\n## Examples\n```rescript\nlet array = [1, 2, 3]\nfor index in 0 to array->Array.length - 1 {\n  let value = array->Array.getUnsafe(index)\n  Console.log(value)\n}\n```"
        ],
        "signature": "let getUnsafe: (array<'a>, int) => 'a"
      },
      {
        "id": "Stdlib.Array.unsafe_get",
        "kind": "value",
        "name": "unsafe_get",
        "docstrings": [
          "`unsafe_get(array, index)` returns the element at `index` of `array`.\n\nThis is _unsafe_, meaning it will return `undefined` value if `index` does not exist in `array`.\n\nUse `Array.unsafe_get` only when you are sure the `index` exists (i.e. when using for-loop).\n\n## Examples\n\n```rescript\nlet array = [1, 2, 3]\nfor index in 0 to array->Array.length - 1 {\n  let value = array->Array.unsafe_get(index)\n  Console.log(value)\n}\n```"
        ],
        "signature": "let unsafe_get: (array<'a>, int) => 'a",
        "deprecated": "Use getUnsafe instead. This will be removed in v13"
      },
      {
        "id": "Stdlib.Array.setUnsafe",
        "kind": "value",
        "name": "setUnsafe",
        "docstrings": [
          "`setUnsafe(array, index, item)` sets the provided `item` at `index` of `array`.\n\nBeware this will *mutate* the array, and is *unsafe*.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\narray->Array.setUnsafe(1, \"Hello\")\n\narray[1] == Some(\"Hello\")\n```"
        ],
        "signature": "let setUnsafe: (array<'a>, int, 'a) => unit"
      },
      {
        "id": "Stdlib.Array.findIndexOpt",
        "kind": "value",
        "name": "findIndexOpt",
        "docstrings": [
          "`findIndexOpt(array, checker)` returns the index of the first element of `array` where the provided `checker` function returns true.\n\nReturns `None` if no item matches.\n\nSee [`Array.findIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex) on MDN.\n\n## Examples\n\n```rescript\ntype languages = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, TypeScript, JavaScript]\n\narray->Array.findIndexOpt(item => item == ReScript) == Some(0)\n```"
        ],
        "signature": "let findIndexOpt: (array<'a>, 'a => bool) => option<int>"
      },
      {
        "id": "Stdlib.Array.findLastIndexOpt",
        "kind": "value",
        "name": "findLastIndexOpt",
        "docstrings": [
          "`findIndexOpt(array, checker)` returns the index of the last element of `array` where the provided `checker` function returns true.\n\nReturns `None` if no item matches.\n\nSee [`Array.findLastIndex`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex) on MDN.\n\n## Examples\n\n```rescript\nlet array = [\"hello\", \"world\", \"!\"]\n\narray->Array.findLastIndexOpt(item => item->String.includes(\"o\")) == Some(1)\n```"
        ],
        "signature": "let findLastIndexOpt: (array<'a>, 'a => bool) => option<int>"
      },
      {
        "id": "Stdlib.Array.toReversed",
        "kind": "value",
        "name": "toReversed",
        "docstrings": [
          "`toReversed(array)` creates a new array with all items from `array` in reversed order.\n\nSee [`Array.toReversed`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed) on MDN.\n\n## Examples\n\n```rescript\nlet someArray = [\"hi\", \"hello\"]\nlet reversed = someArray->Array.toReversed\n\nreversed == [\"hello\", \"hi\"]\nsomeArray == [\"hi\", \"hello\"] // Original unchanged\n```"
        ],
        "signature": "let toReversed: array<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Array.filterMap",
        "kind": "value",
        "name": "filterMap",
        "docstrings": [
          "`filterMap(array, fn)`\n\nCalls `fn` for each element and returns a new array containing results of the `fn` calls which are not `None`.\n\n## Examples\n\n```rescript\n[\"Hello\", \"Hi\", \"Good bye\"]->Array.filterMap(item =>\n  switch item {\n  | \"Hello\" => Some(item->String.length)\n  | _ => None\n  }\n) == [5]\n\n[1, 2, 3, 4, 5, 6]->Array.filterMap(n => mod(n, 2) == 0 ? Some(n * n) : None) == [4, 16, 36]\n\nArray.filterMap([1, 2, 3, 4, 5, 6], _ => None) == []\n\nArray.filterMap([], n => mod(n, 2) == 0 ? Some(n * n) : None) == []\n```"
        ],
        "signature": "let filterMap: (array<'a>, 'a => option<'b>) => array<'b>"
      },
      {
        "id": "Stdlib.Array.keepSome",
        "kind": "value",
        "name": "keepSome",
        "docstrings": [
          "`keepSome(arr)`\n\nReturns a new array containing `value` for all elements that are `Some(value)`\nand ignoring every value that is `None`\n\n## Examples\n\n```rescript\nArray.keepSome([Some(1), None, Some(3)]) == [1, 3]\n\nArray.keepSome([Some(1), Some(2), Some(3)]) == [1, 2, 3]\n\nArray.keepSome([None, None, None]) == []\n\nArray.keepSome([]) == []\n```"
        ],
        "signature": "let keepSome: array<option<'a>> => array<'a>"
      },
      {
        "id": "Stdlib.Array.toShuffled",
        "kind": "value",
        "name": "toShuffled",
        "docstrings": [
          "`toShuffled(array)` returns a new array with all items in `array` in a random order.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\nlet shuffledArray = array->Array.toShuffled\nConsole.log(shuffledArray)\n\nArray.toShuffled([1, 2, 3])->Array.length == 3\n```"
        ],
        "signature": "let toShuffled: array<'a> => array<'a>"
      },
      {
        "id": "Stdlib.Array.shuffle",
        "kind": "value",
        "name": "shuffle",
        "docstrings": [
          "`shuffle(array)` randomizes the position of all items in `array`.\n\nBeware this will *mutate* the array.\n\n## Examples\n\n```rescript\nlet array = [\"Hello\", \"Hi\", \"Good bye\"]\narray->Array.shuffle\nConsole.log(array)\n\nlet array2 = [1, 2, 3]\narray2->Array.shuffle\n\narray2->Array.length == 3\n```"
        ],
        "signature": "let shuffle: array<'a> => unit"
      },
      {
        "id": "Stdlib.Array.flatMap",
        "kind": "value",
        "name": "flatMap",
        "docstrings": [
          "`flatMap(array, mapper)` returns a new array concatenating the arrays returned from running `mapper` on all items in `array`.\n\n## Examples\n\n```rescript\ntype language = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, TypeScript, JavaScript]\n\narray->Array.flatMap(item =>\n  switch item {\n  | ReScript => [1, 2, 3]\n  | TypeScript => [4, 5, 6]\n  | JavaScript => [7, 8, 9]\n  }\n) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"
        ],
        "signature": "let flatMap: (array<'a>, 'a => array<'b>) => array<'b>"
      },
      {
        "id": "Stdlib.Array.flatMapWithIndex",
        "kind": "value",
        "name": "flatMapWithIndex",
        "docstrings": [
          "`flatMapWithIndex(array, mapper)` returns a new array concatenating the arrays returned from running `mapper` on all items in `array`.\n\n## Examples\n\n```rescript\ntype language = ReScript | TypeScript | JavaScript\n\nlet array = [ReScript, TypeScript, JavaScript]\n\narray->Array.flatMapWithIndex((item, index) =>\n  switch item {\n  | ReScript => [index]\n  | TypeScript => [index, index + 1]\n  | JavaScript => [index, index + 1, index + 2]\n  }\n) == [0, 1, 2, 2, 3, 4]\n```"
        ],
        "signature": "let flatMapWithIndex: (array<'a>, ('a, int) => array<'b>) => array<'b>"
      },
      {
        "id": "Stdlib.Array.findMap",
        "kind": "value",
        "name": "findMap",
        "docstrings": [
          "`findMap(arr, fn)`\n\nCalls `fn` for each element and returns the first value from `fn` that is `Some(_)`.\nOtherwise returns `None`\n\n## Examples\n\n```rescript\nArray.findMap([1, 2, 3], n => mod(n, 2) == 0 ? Some(n - 2) : None) == Some(0)\n\nArray.findMap([1, 2, 3, 4, 5, 6], n => mod(n, 2) == 0 ? Some(n - 8) : None) == Some(-6)\n\nArray.findMap([1, 2, 3, 4, 5, 6], _ => None) == None\n\nArray.findMap([], n => mod(n, 2) == 0 ? Some(n * n) : None) == None\n```"
        ],
        "signature": "let findMap: (array<'a>, 'a => option<'b>) => option<'b>"
      },
      {
        "id": "Stdlib.Array.at",
        "kind": "value",
        "name": "at",
        "docstrings": [
          "`at(array, index)`\n\nGet an element by its index. Negative indices count backwards from the last item.\n\n## Examples\n\n```rescript\n[\"a\", \"b\", \"c\"]->Array.at(0) == Some(\"a\")\n[\"a\", \"b\", \"c\"]->Array.at(2) == Some(\"c\")\n[\"a\", \"b\", \"c\"]->Array.at(3) == None\n[\"a\", \"b\", \"c\"]->Array.at(-1) == Some(\"c\")\n[\"a\", \"b\", \"c\"]->Array.at(-3) == Some(\"a\")\n[\"a\", \"b\", \"c\"]->Array.at(-4) == None\n```"
        ],
        "signature": "let at: (array<'a>, int) => option<'a>"
      },
      {
        "id": "Stdlib.Array.last",
        "kind": "value",
        "name": "last",
        "docstrings": [
          "`last(array)` returns the last element of `array`.\n\nReturns `None` if the array is empty.\n\n## Examples\n\n```rescript\n[\"Hello\", \"Hi\", \"Good bye\"]->Array.last == Some(\"Good bye\")\n\n[]->Array.last == None\n```"
        ],
        "signature": "let last: array<'a> => option<'a>"
      },
      {
        "id": "Stdlib.Array.ignore",
        "kind": "value",
        "name": "ignore",
        "docstrings": [
          "`ignore(array)` ignores the provided array and returns unit.\n\n  This helper is useful when you want to discard a value (for example, the result of an operation with side effects)\n  without having to store or process it further."
        ],
        "signature": "let ignore: array<'a> => unit"
      },
      {
        "id": "Stdlib.Array.entries",
        "kind": "value",
        "name": "entries",
        "docstrings": [
          "`entries(array)` returns a new array iterator object that contains the key/value pairs for each index in the array.\n\nSee [Array.prototype.entries](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries) on MDN.\n\n## Examples\n\n```rescript\nlet array = [5, 6, 7]\nlet iterator: Iterator.t<(int, int)> = array->Array.entries\niterator->Iterator.next == {done: false, value: Some((0, 5))}\niterator->Iterator.next == {done: false, value: Some((1, 6))}\n```"
        ],
        "signature": "let entries: array<'a> => Iterator.t<(int, 'a)>"
      },
      {
        "id": "Stdlib.Array.values",
        "kind": "value",
        "name": "values",
        "docstrings": [
          "`values(array)` returns a new array iterator object that contains the values for each index in the array.\n\nSee [Array.prototype.values](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values) on MDN.\n\n## Examples\n\n```rescript\nlet array = [5, 6, 7]\nlet iterator: Iterator.t<int> = array->Array.values\niterator->Iterator.next == {done: false, value: Some(5)}\niterator->Iterator.next == {done: false, value: Some(6)}\n```"
        ],
        "signature": "let values: array<'a> => Iterator.t<'a>"
      }
    ]
  },
  "stdlib/intervalid": {
    "id": "Stdlib.IntervalId",
    "name": "IntervalId",
    "docstrings": [],
    "items": []
  },
  "stdlib/timeoutid": {
    "id": "Stdlib.TimeoutId",
    "name": "TimeoutId",
    "docstrings": [],
    "items": []
  }
}
